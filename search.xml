<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>每天5分钟OSP-Glance01</title>
    <url>/Ops/2022-10-28-5mins-OpenStack-everydays-Glance01.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221029000932.png" width=50% /></center>

<h2 id="0x00️⃣前言"><a href="#0x00️⃣前言" class="headerlink" title="0x00️⃣前言"></a>0x00️⃣前言</h2><p>本文记录一些个人的glance学习笔记。</p>
<a id="more"></a>

<h2 id="0x01️⃣理解Image"><a href="#0x01️⃣理解Image" class="headerlink" title="0x01️⃣理解Image"></a>0x01️⃣理解Image</h2><ul>
<li><p>安装系统，from CD or Ghost</p>
</li>
<li><p>效率低</p>
</li>
<li><p>工作量大</p>
</li>
<li><p>手动配置</p>
</li>
<li><p>备份恢复不灵活 </p>
</li>
<li><p>Image，模板，os+software，批量分发，快照</p>
</li>
</ul>
<h2 id="0x02️⃣理解Image-Service"><a href="#0x02️⃣理解Image-Service" class="headerlink" title="0x02️⃣理解Image Service"></a>0x02️⃣理解Image Service</h2><ul>
<li><p>管理Image，集发现、获取和保存</p>
</li>
<li><p>具体功能</p>
</li>
<li><p>REST API 查询+获取image的元数据和image本身</p>
</li>
<li><p>多种方式存储，文件系统、Swift、Amazon S3</p>
</li>
<li><p>对Instance Snapshot创建新的image</p>
</li>
</ul>
<h2 id="0x03️⃣Glance架构"><a href="#0x03️⃣Glance架构" class="headerlink" title="0x03️⃣Glance架构"></a>0x03️⃣Glance架构</h2><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221012181155.png" alt=""></p>
<ul>
<li><p>glance-api</p>
<ul>
<li>后台进程，提供API，相应image查询、存取image的metada（丢给glance-registry）、存储image（丢给store backend）的调用。</li>
</ul>
</li>
<li><p>glance-registry</p>
<ul>
<li><p>主要处理image的metada，image的大小和类型。</p>
</li>
<li><p>镜像类型如下：</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221028214306.png" alt=""></p>
</li>
</ul>
</li>
<li><p>database</p>
<ul>
<li><p>默认使用mysql，但redhat openstack没有.</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221028230918.png" alt=""></p>
</li>
</ul>
</li>
<li><p>store backend，支持多种， /etc/glance/glance-api.conf 配置，不同配置<a href="http://docs.openstack.org/liberty/config-reference/content/configuring-image-service-backends.html" target="_blank" rel="noopener">遵循</a></p>
<ul>
<li><p>A directory on a local file system（这是默认配置），uuid名的image存储在对应文件夹</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221028231400.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221028231302.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221028231316.png" alt=""></p>
</li>
<li><p>GridFS</p>
</li>
<li><p>Ceph RBD</p>
</li>
<li><p>Amazon S3</p>
</li>
<li><p>Sheepdog</p>
</li>
<li><p>OpenStack Block Storage (Cinder)</p>
</li>
<li><p>OpenStack Object Storage (Swift)</p>
</li>
<li><p>VMware ESX</p>
</li>
</ul>
</li>
</ul>
<h2 id="0x04️⃣总结感悟"><a href="#0x04️⃣总结感悟" class="headerlink" title="0x04️⃣总结感悟"></a>0x04️⃣总结感悟</h2><p>简洁明了了解一下glance，接下来实操glance。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Storage </tag>
        <tag>OpenStack </tag>
        <tag>Glance </tag>
        <tag>每天五分鐘玩轉OpenStack </tag>
      </tags>
  </entry>
  <entry>
    <title>每天5分钟OSP-Glance02</title>
    <url>/Ops/2022-10-29-5mins-OpenStack-everydays-Glance02.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221029000932.png" width=50% /></center>

<h2 id="0x00️⃣前言"><a href="#0x00️⃣前言" class="headerlink" title="0x00️⃣前言"></a>0x00️⃣前言</h2><p>本文继续记录一些个人的glance学习笔记。</p>
<a id="more"></a>

<h2 id="0x01️⃣webui操作image"><a href="#0x01️⃣webui操作image" class="headerlink" title="0x01️⃣webui操作image"></a>0x01️⃣webui操作image</h2><p>下载地址： <a href="http://download.cirros-cloud.net/" target="_blank" rel="noopener">http://download.cirros-cloud.net/</a></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221029144641.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221029150152.png" alt=""></p>
<p><strong>关于Public ，Private，Shared和Community的区别如下。</strong></p>
<ul>
<li><p><strong>Public images</strong></p>
<p>These are images provided by the OpenStack administrators. They are visible to all users.</p>
<p>镜像由OpenStack管理员提供。所有用户可见。</p>
</li>
<li><p><strong>Private images</strong></p>
<p>A private image is owned by a specific project and cannot be viewed or used by other projects.</p>
<p>私有镜像由特定项目所有。不可被其他项目查看或使用。</p>
</li>
<li><p><strong>Shared images</strong></p>
<p>A shared image is a private image that can be viewed/used by specific other projects that the image owner adds as “members” to the image.</p>
<p>共享镜像是一个私有镜像，可由镜像所有者作为“成员”添加到镜像的特定其他项目查看/使用。</p>
</li>
<li><p><strong>Community images</strong></p>
<p>A community image is an image uploaded by a project, and such project wants other projects use such image, but isn’t interested in maintaining a relationship with these tenants by making them image members.</p>
<p>社区镜像是项目上传的镜像，该项目希望其他项目使用该镜像，但避免了繁杂的租户的关系。</p>
</li>
</ul>
<p><strong>点击我们上传的cirros超链接，就跳转下面页面。</strong></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221029153615.png" alt=""></p>
<h2 id="0x02️⃣CLI操作image"><a href="#0x02️⃣CLI操作image" class="headerlink" title="0x02️⃣CLI操作image"></a>0x02️⃣CLI操作image</h2><p>cirros比较小，webui交互体感较好，但如果较大的image则CLI可以方便后台运行，上传个RHEL9看看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(overcloud) [stack@rhosp16-director ~]$ openstack image create rhel90 --file /tmp/rhel-baseos-9.0-x86_64-dvd.iso --disk-format iso --container-format bare</span><br><span class="line">(overcloud) [stack@rhosp16-director ~]$ openstack image show rhel90 --max 80</span><br><span class="line">+------------------+-----------------------------------------------------------+</span><br><span class="line">| Field            | Value                                                     |</span><br><span class="line">+------------------+-----------------------------------------------------------+</span><br><span class="line">| checksum         | b1156c2533d191a4a752e99195d03471                          |</span><br><span class="line">| container_format | bare                                                      |</span><br><span class="line">| created_at       | 2022-10-29T08:46:10Z                                      |</span><br><span class="line">| disk_format      | iso                                                       |</span><br><span class="line">| file             | /v2/images/7374f85c-c34e-4061-aa4a-5262ee2c4df3/file      |</span><br><span class="line">| id               | 7374f85c-c34e-4061-aa4a-5262ee2c4df3                      |</span><br><span class="line">| min_disk         | 0                                                         |</span><br><span class="line">| min_ram          | 0                                                         |</span><br><span class="line">| name             | rhel90                                                    |</span><br><span class="line">| owner            | 5ea1e912713542b58cfbfa56c3a93645                          |</span><br><span class="line">| properties       | direct_url='swift+config://ref1/glance/7374f85c-c34e-4061 |</span><br><span class="line">|                  | -aa4a-5262ee2c4df3', os_hash_algo='sha512', os_hash_value |</span><br><span class="line">|                  | ='ff546a297276df19ae31ebc0adbd901989d4f4c4397d0abedd7a7a6 |</span><br><span class="line">|                  | afa772dac45cec1f06479919426ca5a24e93e8b588a32a88f032739c7 |</span><br><span class="line">|                  | 9a5c2c5709df6a08', os_hidden='False',                     |</span><br><span class="line">|                  | stores='default_backend'                                  |</span><br><span class="line">| protected        | False                                                     |</span><br><span class="line">| schema           | /v2/schemas/image                                         |</span><br><span class="line">| size             | 8579448832                                                |</span><br><span class="line">| status           | active                                                    |</span><br><span class="line">| tags             |                                                           |</span><br><span class="line">| updated_at       | 2022-10-29T08:55:58Z                                      |</span><br><span class="line">| virtual_size     | None                                                      |</span><br><span class="line">| visibility       | shared                                                    |</span><br><span class="line">+------------------+-----------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>默认情况下，红帽OpenStack 16使用swift来负责glance的存储。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(overcloud) [stack@rhosp16-director ~]$ openstack user list</span><br><span class="line">+----------------------------------+-------------------------+</span><br><span class="line">| ID                               | Name                    |</span><br><span class="line">+----------------------------------+-------------------------+</span><br><span class="line">| 06733500c8244a448305aa92c4f4cdae | admin                   |</span><br><span class="line">| b709c40050d94ca49651cbd1e83f48d3 | cinder                  |</span><br><span class="line">| 3fd1abb25a1d47f39391f4fee2b83184 | cinderv2                |</span><br><span class="line">| a73a4566d2654a4cbd8f1b20aba915c9 | cinderv3                |</span><br><span class="line">| 5fad2deebe5842fd8fc01d8ef32e4d3d | glance                  |</span><br><span class="line">| 7746848c40f247d689c44d95acb11d76 | heat                    |</span><br><span class="line">| 1a5499776a294737999d1002f04c0652 | heat_stack_domain_admin |</span><br><span class="line">| 703b975c2c1f4c78a44e24e769dd27d0 | heat-cfn                |</span><br><span class="line">| 5bee2b21ecea4bcda81b38f361269626 | neutron                 |</span><br><span class="line">| d0c42ea85066412795e789dcb6fc7468 | nova                    |</span><br><span class="line">| a4a8959ecf8b454cad9d39d2964514bf | octavia                 |</span><br><span class="line">| 6511c586fb5a4f39b6ffb0caa47b3db1 | placement               |</span><br><span class="line">| 73895f5ffad74abaab18108db8933b4c | swift                   |</span><br><span class="line">+----------------------------------+-------------------------+</span><br></pre></td></tr></table></figure>

<h2 id="0x03️⃣红帽OpenStack命令剖析"><a href="#0x03️⃣红帽OpenStack命令剖析" class="headerlink" title="0x03️⃣红帽OpenStack命令剖析"></a>0x03️⃣红帽OpenStack命令剖析</h2><p><strong>命令范式</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;obj&gt;-create [parm1] [parm2]…</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;obj&gt;-delete [parm]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;obj&gt;-update [parm1] [parm2]…</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;obj&gt;-list</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;obj&gt;-show [parm]</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>Glance</p>
<ul>
<li><p>glance版本</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">glance <span class="built_in">image</span>-create</span><br><span class="line">glance <span class="built_in">image</span>-<span class="keyword">delete</span></span><br><span class="line">glance <span class="built_in">image</span>-update</span><br><span class="line">glance <span class="built_in">image</span>-<span class="built_in">list</span></span><br><span class="line">glance <span class="built_in">image</span>-show</span><br></pre></td></tr></table></figure>
</li>
<li><p>红帽openstack版本，直接拿掉了obj，flavor同理</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">openstack <span class="built_in">image</span> create</span><br><span class="line">openstack <span class="built_in">image</span> <span class="keyword">delete</span></span><br><span class="line">openstack <span class="built_in">image</span> update</span><br><span class="line">openstack <span class="built_in">image</span> <span class="built_in">list</span></span><br><span class="line">openstack <span class="built_in">image</span> show</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>被操作对象都有ID</strong></p>
<p><strong>help查看用法</strong></p>
<h2 id="0x04️⃣如何Troubleshooting"><a href="#0x04️⃣如何Troubleshooting" class="headerlink" title="0x04️⃣如何Troubleshooting"></a>0x04️⃣如何Troubleshooting</h2><p>glance日志主要是glance_api.log 和glance_registry.log。由于红帽OpenStack采用容器的方式来进行分发，所以路径可以通过podman inspect来得知是<code>/var/log/containers/glance</code></p>
<h2 id="0x05️⃣总结感悟"><a href="#0x05️⃣总结感悟" class="headerlink" title="0x05️⃣总结感悟"></a>0x05️⃣总结感悟</h2><p>记录一下每天五分钟OpenStack的读书笔记，顺便试试新格式。意外发现一个非官方的<a href="">社区OpenStack文档</a>，还不错。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Storage </tag>
        <tag>OpenStack </tag>
        <tag>Glance </tag>
        <tag>每天五分鐘玩轉OpenStack </tag>
      </tags>
  </entry>
  <entry>
    <title>每天5分钟OSP-Nova01</title>
    <url>/Ops/2022-10-30-5mins-OpenStack-everydays-Nova01.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221030084802.png" width=50% /></center>

<h2 id="0x00️⃣前言"><a href="#0x00️⃣前言" class="headerlink" title="0x00️⃣前言"></a>0x00️⃣前言</h2><p>本文记录一些个人的nova架构的学习笔记。</p>
<a id="more"></a>

<h2 id="0x01️⃣从OpenStack的架构谈起"><a href="#0x01️⃣从OpenStack的架构谈起" class="headerlink" title="0x01️⃣从OpenStack的架构谈起"></a>0x01️⃣从OpenStack的架构谈起</h2><p><strong>以下是OpenStack的架构：</strong></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221030085206.png" alt=""></p>
<p>围绕在VM的四周，Nova 提供部署，Neutron提供网络，Glance提供镜像，cinder提供volumes。</p>
<h2 id="0x02️⃣更近一步"><a href="#0x02️⃣更近一步" class="headerlink" title="0x02️⃣更近一步"></a>0x02️⃣更近一步</h2><p>nova架构</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221030105555.png" alt=""></p>
<p><img src="https://www.xjimmy.com/wp-content/uploads/image/20180108/1515342369642394.png" alt="Nova 架构"></p>
<ul>
<li>API<ul>
<li>nova-api：接收和相应api调用，兼容调用EC2 API的客户端工具。</li>
</ul>
</li>
<li>Compute Core<ul>
<li>nova-scheduler：虚拟机调度服务。</li>
<li>nova-conductor：虚拟机更新数据库的前置服务。</li>
<li>nova-compute：虚拟机管理核心服务，调度Hypervisor api。<ul>
<li>Hypervisor有KVM/Xen/VMWare</li>
</ul>
</li>
</ul>
</li>
<li>Console Interface<ul>
<li>nova-console：用户可以通过多种方式访问虚机的控制台： <ul>
<li>nova-novncproxy：基于 Web 浏览器的VNC 访问</li>
<li>nova-spicehtml5proxy：基于HTML5 浏览器的 SPICE 访问</li>
<li>nova-xvpnvncproxy：基于 Java 客户端的 VNC 访问</li>
</ul>
</li>
<li>nova-consoleauth：负责对访问虚机控制台请求提供 Token 认证</li>
<li>nova-cert：提供 x509 证书支持</li>
</ul>
</li>
<li>Database<ul>
<li>Compute Database</li>
</ul>
</li>
<li>Message Queue<ul>
<li>RabbitMQ 是nova组件通讯的关键。</li>
</ul>
</li>
</ul>
<h2 id="0x03️⃣结语"><a href="#0x03️⃣结语" class="headerlink" title="0x03️⃣结语"></a>0x03️⃣结语</h2><p>今天的五分钟就到这了，期待后面的nova章节，最近刚参加过nova的debug workshop，受益匪浅。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>OpenStack </tag>
        <tag>每天五分鐘玩轉OpenStack </tag>
        <tag>Compute </tag>
        <tag>Nova </tag>
      </tags>
  </entry>
  <entry>
    <title>從KVM模板到OS淺談</title>
    <url>/Ops/2021-09-26-From-KVM-Template-To-Linux-Distro.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Linux-distro.png" width=50% /></center>

<p>本文旨在阐述如何使用virt-sysprep制作kvm的qcow2格式的模板，以及一些感想。</p>
<a id="more"></a>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>许久没有更新博客，正在花时间将手上的几台HomeLab机器整合划分不同的域，写blog素材upup，而kvm的各项工具正在蓬勃发展，现已不再需要osp和rhev也能够获得比较良好的虚拟机管理体验了。</p>
<h2 id="0x01-工具介绍"><a href="#0x01-工具介绍" class="headerlink" title="0x01 工具介绍"></a>0x01 工具介绍</h2><p>这次的主角是virt-sysprep，以下方法适用于制作Ubuntu1804，Ubuntu2004，CentOS7，Centos Stream 8的模板。</p>
<h2 id="0x02-制作过程"><a href="#0x02-制作过程" class="headerlink" title="0x02 制作过程"></a>0x02 制作过程</h2><h3 id="新建模板"><a href="#新建模板" class="headerlink" title="新建模板"></a>新建模板</h3><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/ubuntu-template.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/ubuntu-template.png"></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/centos7-template.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/centos7-template.png"></p>
<ul>
<li>使用lvm，并且设置确保/home目录没有使用</li>
<li>设置普通用户并赋予sudo权限</li>
<li>Ubuntu选择live-server, CentOS选择minimal</li>
</ul>
<h3 id="清除标记"><a href="#清除标记" class="headerlink" title="清除标记"></a>清除标记</h3><p>安装完成后使用virt-sysprep清除以下</p>
<ul>
<li>默认的日志项</li>
<li>重置ssh相关</li>
<li>清除machine-id</li>
<li>时区设定</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># virt-sysprep -d ubuntu2004_server --timezone 'Asia/Shanghai' --operations machine-id --no-logfile -v -x</span></span><br><span class="line"><span class="comment"># virt-sysprep -d centos7_server --timezone 'Asia/Shanghai' --operations machine-id --no-logfile -v -x</span></span><br></pre></td></tr></table></figure>

<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>我安装时直接通过qcow2本身的稀松性（sparse）来生成，qcow2是具有稀松性的存储格式，会预划分磁盘大小，所以ls -hl看的大小是预划分的大小，只有du和ls -hls看的才准确。单纯地scp它们，稀松性不会被很好地保留，可能会出现以原先大小存储的可能性。因此应该用tar预先处理稀松性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar -cv --sparse -f ubuntu2004_server.tar ubuntu2004_server.qcow2</span></span><br><span class="line"><span class="comment"># tar -cv --sparse -f centos7_server.tar centos7_server.qcow2</span></span><br></pre></td></tr></table></figure>

<h2 id="0x03-不同发行版"><a href="#0x03-不同发行版" class="headerlink" title="0x03 不同发行版"></a>0x03 不同发行版</h2><p>最近有不少不同Linux发行版的各种新闻，CentOS Stream 8取代CentOS 8，国家机关强推统信、麒麟OS等各种关乎不同OS的新闻出现，趁这篇博文撰写的时候谈一下自己粗浅的见解。我认为没有最好的Linux发行版，只有最适合自己的发行版。每种发行版于我而言，它们所做的一些开箱即用的优化以及一些特性都让我爱不释手。</p>
<ol>
<li><p>区别 </p>
<ul>
<li>CentOS Stream：Stream的出现，我认为顺应了云原生浪潮。小版本的取消，使得CentOS上的创新能够以最低、最快的门槛适配RHEL。CentOS过去的角色，Rocky、Almalinux、TencentOS这些发行版可以轻松填补，但是CentOS Stream的角色它们却不能填补。这对开源软件界进入企业流行无疑是一大利好。</li>
<li>RHEL: 集最多硬件支持、最优开源软件编译参数实践、最优商业支持于一身的Linux发行版。</li>
<li>Rocky，Almalinux、统信UOS服务器版、TencentOS、OpenAlios： 现今的CentOS角色，并且也推出了<a href="https://www.zdnet.com/article/centos-clone-rocky-linux-gets-technical-support/" target="_blank" rel="noopener">便宜的支持策略</a>，像Oracle linux一样，更低的商业成本享受rpm系，Oracle linux做的只是对自己Oracle数据库的一些简单优化参数，而OpenAlios目前的信息看来是旨在针对国内的硬件适配兼容。</li>
<li>Debian：apt系的最上游，拥有比RHEL更“自由”的发行版，提供了进入Linux流行的更低门槛。毫无疑问会被更多不旨在进入企业流行盈利的软件爱好者所喜爱，须知也不是所有的开源应用都热衷于进入到企业盈利。</li>
<li>Ubuntu：apt系的扛把子，漂亮优雅的桌面风格，更新的内核。现在也采取了和RHEL一样的“十年”支持。额外使用了cloud-init来实现更易分发的特性，但是这也带来了一定侵入性，可选的apt系商业支持。</li>
<li>Kali、deepin、统信UOS桌面版: 拥有很多适合特定场景的软件集合，提供开箱即用的桌面大杂烩工具集。</li>
<li>openEular：结合了Ubuntu发行策略优势，以自身小版本为上游的rpm系产物。一方面背靠rpm系可以获得成熟的企业支持经验和古稀硬件的支持经验，一方面采用更新内核，可以更好地衔接上游的开源成果。也隐去了人们对CentOS Stream的担忧。</li>
<li>RHCOS、RancherOS、Photon OS：专为容器而生的OS，从机器的角度提供更加可控的K8S运行时的OS，但从人类的角度更加可控性更差。它们应用在物理机上能节省更多的资源给上层，但也意味着更多的开源特性依赖厂商支持。</li>
<li>其他：没有体验不做评价。</li>
</ul>
</li>
<li><p>选择原则</p>
<ul>
<li>商业成本&amp;业务中断容忍度（高？中？低？）</li>
<li>安全要求（高？中？低？）</li>
<li>虚拟化程度？（高？中？低？容器化？虚拟机？物理机？）</li>
<li>技术栈支持度（高？中？低？内核依赖？组件依赖？特性依赖？）</li>
</ul>
</li>
<li><p>个人癖好</p>
<ul>
<li>当无可避免地需要运行不可信代码时，会优先考虑拥有selinux的rpm系。 </li>
<li>当需要开箱即用的软件环境时，会优先根据其支持程度选择apt系。</li>
<li>当有稀奇古怪的硬件时，会优先考虑rpm系。 </li>
<li>当容器化程度很高，底层os需要及时更新及时，会考虑CentOS Stream、openEular这种不以牺牲人类可控性但又不至于更新太慢的OS。</li>
</ul>
</li>
</ol>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ul>
<li>virt-sysprep挺好用的，把我暂时地从cloud-init的苦海拯救了出来。</li>
<li>virt-sysprep制作模板时背后调用virt-customize启用临时kvm制作，足够优雅。</li>
<li>各大发行版都有自己的使用场景，应结合使用场景，相互借鉴，大家好才是真的好。“无他，唯手熟尔”。</li>
<li>有机会搞一个混杂各种发行版的K8S玩玩。</li>
<li>更多的厂商参与，对于客户来说是好事，并且眼睛足够多，开源特性能使得它们变得更好，互相学习。</li>
<li>能够在这么纷繁复杂的世界中诞生Linux，已经是很了不起的事情了。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
      </tags>
  </entry>
  <entry>
    <title>趣談Linux操作系統筆記I（之剖析系統進程）</title>
    <url>/Ops/2020-06-25-Funny-With-Linux-I-about-progress.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>

<p>本文旨在從三個方面（被執行的主體[Executable and Linkable Format]，執行程序的主體，執行函數的主體）闡述系統調用的全過程。</p>
<a id="more"></a>

<h2 id="0x00-被執行的主體：ELF"><a href="#0x00-被執行的主體：ELF" class="headerlink" title="0x00 被執行的主體：ELF"></a>0x00 被執行的主體：ELF</h2><hr>
<h3 id="ELF的第一種類型：可重定位文件"><a href="#ELF的第一種類型：可重定位文件" class="headerlink" title="ELF的第一種類型：可重定位文件"></a>ELF的第一種類型：可重定位文件</h3><p>可重定位文件全程：Relocatable File，環境準備，安裝軟體。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># yum -y groupinstall "Development Tools"</span></span><br></pre></td></tr></table></figure>

<p>新建代碼工程文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># cat &gt;&gt; process.c &lt;&lt; EOF</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line">extern int create_process (char* program, char** arg_list);</span><br><span class="line"></span><br><span class="line">int create_process (char* program, char** arg_list)</span><br><span class="line">&#123;</span><br><span class="line">        pid_t child_pid;                  <span class="comment"># 初始化child_pid</span></span><br><span class="line">        child_pid = fork ();              <span class="comment"># 調用fork獲取進程號</span></span><br><span class="line">        <span class="keyword">if</span> (child_pid != 0)               <span class="comment"># 如果獲取成功</span></span><br><span class="line">            <span class="built_in">return</span> child_pid;             <span class="comment"># 則返回獲取的進程號</span></span><br><span class="line">        <span class="keyword">else</span> &#123;                            <span class="comment"># 否則</span></span><br><span class="line">            execvp (program, arg_list);   <span class="comment"># 調用執行，輸入程序名及其參數</span></span><br><span class="line">            abort ();                     <span class="comment"># 之後中斷                  </span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">[root@learn ~]<span class="comment"># cat &gt;&gt; createprocess.c &lt;&lt; EOF</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line">extern int create_process (char* program, char** arg_list);</span><br><span class="line"></span><br><span class="line">int main ()</span><br><span class="line">&#123;</span><br><span class="line">    char* arg_list[] = &#123;                  <span class="comment"># 參數列表</span></span><br><span class="line">        <span class="string">"ls"</span>,                             </span><br><span class="line">        <span class="string">"-l"</span>,</span><br><span class="line">        <span class="string">"/etc/yum.repos.d/"</span>,</span><br><span class="line">        NULL                              <span class="comment"># 完成輸入</span></span><br><span class="line">    &#125;;</span><br><span class="line">    create_process (<span class="string">"ls"</span>, arg_list);      <span class="comment"># 調用process.c中自定義的create_process函數</span></span><br><span class="line">    <span class="built_in">return</span> 0;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>進行編譯，<strong>獲得ELF的第一種類型: 可重定位文件(Relocatable File)。</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># gcc -c -fPIC process.c</span></span><br><span class="line">[root@learn ~]<span class="comment"># gcc -c -fPIC createprocess.c</span></span><br></pre></td></tr></table></figure>

<p>對其内部sections進行檢視。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/relocatableFileFormat.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/relocatableFileFormat.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># readelf -S ./createprocess.o                             </span></span><br><span class="line">There are 13 section headers, starting at offset 0x368:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset    ⚠局部變量運行時存在</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align    棧，運行前的.o文件不</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000  包含。</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] **.text**             PROGBITS     0000000000000000  00000040 &lt;=== 編譯后的二進制代碼</span><br><span class="line">       000000000000004b  0000000000000000  AX       0     0     1</span><br><span class="line">  [ 2] .rela.text        RELA             0000000000000000  00000270 &lt;=== 標注需重定位的函數</span><br><span class="line">       0000000000000078  0000000000000018   I      10     1     8</span><br><span class="line">  [ 3] **.data**             PROGBITS     0000000000000000  0000008b &lt;=== 已初始化的全局變量</span><br><span class="line">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="line">  [ 4] **.bss**              NOBITS       0000000000000000  0000008b &lt;=== 未初始化的全局變量</span><br><span class="line">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="line">  [ 5] **.rodata**           PROGBITS     0000000000000000  0000008b &lt;=== 只讀數據，常量變量</span><br><span class="line">       0000000000000018  0000000000000000   A       0     0     1       （這正是process.o</span><br><span class="line">  [ 6] .comment          PROGBITS         0000000000000000  000000a3     所沒有的）</span><br><span class="line">       000000000000002e  0000000000000001  MS       0     0     1</span><br><span class="line">  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  000000d1</span><br><span class="line">       0000000000000000  0000000000000000           0     0     1</span><br><span class="line">  [ 8] .eh_frame         PROGBITS         0000000000000000  000000d8</span><br><span class="line">       0000000000000038  0000000000000000   A       0     0     8</span><br><span class="line">  [ 9] .rela.eh_frame    RELA             0000000000000000  000002e8</span><br><span class="line">       0000000000000018  0000000000000018   I      10     8     8</span><br><span class="line">  [10] .symtab           SYMTAB           0000000000000000  00000110 &lt;=== 符號表，函數變量</span><br><span class="line">       0000000000000120  0000000000000018          11     9     8</span><br><span class="line">  [11] .strtab           STRTAB           0000000000000000  00000230 &lt;=== 字符串表，字符串常量</span><br><span class="line">       000000000000003b  0000000000000000           0     0     1        及變量名</span><br><span class="line">  [12] .shstrtab         STRTAB           0000000000000000  00000300</span><br><span class="line">       0000000000000061  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure>

<h3 id="ELF的第二種類型：可執行文件"><a href="#ELF的第二種類型：可執行文件" class="headerlink" title="ELF的第二種類型：可執行文件"></a>ELF的第二種類型：可執行文件</h3><p>可执行文件全稱：Executable file，先通過ar，將.o文件歸檔為.a文件，可作爲靜態鏈接庫。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># man ar</span></span><br><span class="line">c   Create the archive.  The specified archive is always created <span class="keyword">if</span> it did not exist, when you request an update.  But a warning is issued unless you specify <span class="keyword">in</span> advance that you expect to create        </span><br><span class="line">           it, by using this modifier.</span><br><span class="line">r   Insert the files member... into archive (with replacement). This operation differs from q <span class="keyword">in</span> that any previously existing members are deleted <span class="keyword">if</span> their names match those being added.</span><br><span class="line"></span><br><span class="line">           If one of the files named <span class="keyword">in</span> member... does not exist, ar displays an error message, and leaves undisturbed any existing members of the archive matching that name.</span><br><span class="line"></span><br><span class="line">           By default, new members are added at the end of the file; but you may use one of the modifiers a, b, or i to request placement relative to some existing member.</span><br><span class="line"></span><br><span class="line">           The modifier v used with this operation elicits a line of output <span class="keyword">for</span> each file inserted, along with one of the letters a or r to indicate whether the file was appended (no old member deleted)       </span><br><span class="line">           or replaced.</span><br><span class="line">[root@learn ~]<span class="comment"># ar cr libstaticprocess.a process.o</span></span><br><span class="line">[root@learn ~]<span class="comment"># readelf -S libstaticprocess.a </span></span><br><span class="line"></span><br><span class="line">File: libstaticprocess.a(process.o)   &lt;---   （只是歸檔，并非新文件）</span><br><span class="line">There are 12 section headers, starting at offset 0x328:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .text             PROGBITS         0000000000000000  00000040</span><br><span class="line">       000000000000003d  0000000000000000  AX       0     0     1</span><br><span class="line">  [ 2] .rela.text        RELA             0000000000000000  00000268</span><br><span class="line">       0000000000000048  0000000000000018   I       9     1     8</span><br><span class="line">  [ 3] .data             PROGBITS         0000000000000000  0000007d</span><br><span class="line">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="line">  [ 4] .bss              NOBITS           0000000000000000  0000007d</span><br><span class="line">       0000000000000000  0000000000000000  WA       0     0     1</span><br><span class="line">  [ 5] .comment          PROGBITS         0000000000000000  0000007d</span><br><span class="line">       000000000000002e  0000000000000001  MS       0     0     1</span><br><span class="line">  [ 6] .note.GNU-stack   PROGBITS         0000000000000000  000000ab</span><br><span class="line">       0000000000000000  0000000000000000           0     0     1</span><br><span class="line">  [ 7] .eh_frame         PROGBITS         0000000000000000  000000b0</span><br><span class="line">       0000000000000038  0000000000000000   A       0     0     8</span><br><span class="line">  [ 8] .rela.eh_frame    RELA             0000000000000000  000002b0</span><br><span class="line">       0000000000000018  0000000000000018   I       9     7     8</span><br><span class="line">  [ 9] .symtab           SYMTAB           0000000000000000  000000e8</span><br><span class="line">       0000000000000138  0000000000000018          10     8     8</span><br><span class="line">  [10] .strtab           STRTAB           0000000000000000  00000220</span><br><span class="line">       0000000000000042  0000000000000000           0     0     1</span><br><span class="line">  [11] .shstrtab         STRTAB           0000000000000000  000002c8</span><br><span class="line">       0000000000000059  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure>

<p>后將.a文件鏈入目標文件<strong>(Relocatable File)</strong>中去編譯即可得到<strong>ELF的第二種形態，可執行文件(Executable file)</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                                          目標文件  -L 查找當前目錄     </span><br><span class="line">[root@learn ~]<span class="comment"># gcc -o staticcreateprocess createprocess.o -L . -l staticprocess</span></span><br><span class="line">             編譯       輸出文件                               -l 指定library並補全lib和.a</span><br></pre></td></tr></table></figure>

<p>對其内部sections進行檢視。</p>
<blockquote>
<p>ELF Header，e_entry虛擬地址入口。</p>
</blockquote>
<blockquote>
<p>Section Header Table（段頭表，struct elf32_phdr 和 struct elf64_phdr兩個描述代碼運行于32/64位。還有p_vaddr加載内存地址）</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/executableFileFormat.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/executableFileFormat.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># ./staticcreateprocess </span></span><br><span class="line">total 228</span><br><span class="line">-rw-r--r--. 1 root root 231449 Jun 22 05:36 redhat.repo</span><br><span class="line">[root@learn ~]<span class="comment"># readelf -S ./staticcreateprocess </span></span><br><span class="line">There are 31 section headers, starting at offset 0x19e8:            ⚠ 準備加載到内存執行，因</span><br><span class="line">                                                                       此包含需要加載的代碼塊，</span><br><span class="line">Section Headers:                                                       數據段和不需要加載的部</span><br><span class="line">  [Nr] Name              Type             Address           Offset     分。</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .interp           PROGBITS         0000000000400238  00000238</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     1</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298</span><br><span class="line">       000000000000001c  0000000000000000   A       5     0     8</span><br><span class="line">  [ 5] .dynsym           DYNSYM           00000000004002b8  000002b8</span><br><span class="line">       0000000000000090  0000000000000018   A       6     1     8</span><br><span class="line">  [ 6] .dynstr           STRTAB           0000000000400348  00000348</span><br><span class="line">       000000000000004a  0000000000000000   A       0     0     1</span><br><span class="line">  [ 7] .gnu.version      VERSYM           0000000000400392  00000392</span><br><span class="line">       000000000000000c  0000000000000002   A       5     0     2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED          00000000004003a0  000003a0</span><br><span class="line">       0000000000000020  0000000000000000   A       6     1     8</span><br><span class="line">  [ 9] .rela.dyn         RELA             00000000004003c0  000003c0</span><br><span class="line">       0000000000000018  0000000000000018   A       5     0     8</span><br><span class="line">  [10] .rela.plt         RELA             00000000004003d8  000003d8</span><br><span class="line">       0000000000000060  0000000000000018  AI       5    24     8</span><br><span class="line">  [11] .init             PROGBITS         0000000000400438  00000438</span><br><span class="line">       000000000000001a  0000000000000000  AX       0     0     4</span><br><span class="line">  [12] .plt              PROGBITS         0000000000400460  00000460</span><br><span class="line">       0000000000000050  0000000000000010  AX       0     0     16</span><br><span class="line">  [13] .plt.got          PROGBITS         00000000004004b0  000004b0</span><br><span class="line">       0000000000000008  0000000000000000  AX       0     0     8</span><br><span class="line">  [14] .text             PROGBITS         00000000004004c0  000004c0  &lt;===  代碼段</span><br><span class="line">       00000000000001f2  0000000000000000  AX       0     0     16</span><br><span class="line">  [15] .fini             PROGBITS         00000000004006b4  000006b4</span><br><span class="line">       0000000000000009  0000000000000000  AX       0     0     4</span><br><span class="line">  [16] .rodata           PROGBITS         00000000004006c0  000006c0  &lt;===  代碼段</span><br><span class="line">       0000000000000028  0000000000000000   A       0     0     8</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS         00000000004006e8  000006e8</span><br><span class="line">       000000000000003c  0000000000000000   A       0     0     4</span><br><span class="line">  [18] .eh_frame         PROGBITS         0000000000400728  00000728</span><br><span class="line">       0000000000000114  0000000000000000   A       0     0     8</span><br><span class="line">  [19] .init_array       INIT_ARRAY       0000000000600e10  00000e10</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [20] .fini_array       FINI_ARRAY       0000000000600e18  00000e18</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [21] .jcr              PROGBITS         0000000000600e20  00000e20</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [22] .dynamic          DYNAMIC          0000000000600e28  00000e28</span><br><span class="line">       00000000000001d0  0000000000000010  WA       6     0     8</span><br><span class="line">  [23] .got              PROGBITS         0000000000600ff8  00000ff8</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [24] .got.plt          PROGBITS         0000000000601000  00001000</span><br><span class="line">       0000000000000038  0000000000000008  WA       0     0     8</span><br><span class="line">  [25] .data             PROGBITS         0000000000601038  00001038  &lt;===  數據段  </span><br><span class="line">       0000000000000004  0000000000000000  WA       0     0     1</span><br><span class="line">  [26] .bss              NOBITS           000000000060103c  0000103c  &lt;===  數據段 </span><br><span class="line">       0000000000000004  0000000000000000  WA       0     0     1</span><br><span class="line">  [27] .comment          PROGBITS         0000000000000000  0000103c</span><br><span class="line">       000000000000002d  0000000000000001  MS       0     0     1</span><br><span class="line">  [28] .symtab           SYMTAB           0000000000000000  00001070  &lt;===  不加載到内存段 </span><br><span class="line">       0000000000000660  0000000000000018          29    48     8</span><br><span class="line">  [29] .strtab           STRTAB           0000000000000000  000016d0  &lt;===  不加載到内存段</span><br><span class="line">       0000000000000208  0000000000000000           0     0     1</span><br><span class="line">  [30] .shstrtab         STRTAB           0000000000000000  000018d8</span><br><span class="line">       000000000000010c  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure>

<p>運行結果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># ./staticcreateprocess </span></span><br><span class="line">total 228</span><br><span class="line">-rw-r--r--. 1 root root 231449 Jun 22 05:36 redhat.repo</span><br></pre></td></tr></table></figure>

<h3 id="ELF的第三種類型：共享對象文件"><a href="#ELF的第三種類型：共享對象文件" class="headerlink" title="ELF的第三種類型：共享對象文件"></a>ELF的第三種類型：共享對象文件</h3><p>共享對象文件全稱：Shared Object，先通過gcc，由.o文件編譯為.so文件，可得到<strong>動態鏈接庫，亦就是ELF第三種類型</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># gcc -shared -fPIC -o libdynamicprocess.so process.o</span></span><br></pre></td></tr></table></figure>

<p>對其内部sections進行檢視。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># readelf -S libdynamicprocess.so </span></span><br><span class="line">There are 28 section headers, starting at offset 0x18c0:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .note.gnu.build-i NOTE             00000000000001c8  000001c8</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 2] .gnu.hash         GNU_HASH         00000000000001f0  000001f0</span><br><span class="line">       000000000000003c  0000000000000000   A       3     0     8</span><br><span class="line">  [ 3] .dynsym           DYNSYM           0000000000000230  00000230</span><br><span class="line">       0000000000000168  0000000000000018   A       4     1     8</span><br><span class="line">  [ 4] .dynstr           STRTAB           0000000000000398  00000398</span><br><span class="line">       00000000000000c4  0000000000000000   A       0     0     1</span><br><span class="line">  [ 5] .gnu.version      VERSYM           000000000000045c  0000045c</span><br><span class="line">       000000000000001e  0000000000000002   A       3     0     2</span><br><span class="line">  [ 6] .gnu.version_r    VERNEED          0000000000000480  00000480</span><br><span class="line">       0000000000000020  0000000000000000   A       4     1     8</span><br><span class="line">  [ 7] .rela.dyn         RELA             00000000000004a0  000004a0</span><br><span class="line">       00000000000000c0  0000000000000018   A       3     0     8</span><br><span class="line">  [ 8] .rela.plt         RELA             0000000000000560  00000560</span><br><span class="line">       0000000000000048  0000000000000018  AI       3    22     8</span><br><span class="line">  [ 9] .init             PROGBITS         00000000000005a8  000005a8</span><br><span class="line">       000000000000001a  0000000000000000  AX       0     0     4</span><br><span class="line">  [10] .plt              PROGBITS         00000000000005d0  000005d0</span><br><span class="line">       0000000000000040  0000000000000010  AX       0     0     16</span><br><span class="line">  [11] .plt.got          PROGBITS         0000000000000610  00000610</span><br><span class="line">       0000000000000010  0000000000000000  AX       0     0     8</span><br><span class="line">  [12] .text             PROGBITS         0000000000000620  00000620</span><br><span class="line">       0000000000000122  0000000000000000  AX       0     0     16</span><br><span class="line">  [13] .fini             PROGBITS         0000000000000744  00000744</span><br><span class="line">       0000000000000009  0000000000000000  AX       0     0     4</span><br><span class="line">  [14] .eh_frame_hdr     PROGBITS         0000000000000750  00000750</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     4</span><br><span class="line">  [15] .eh_frame         PROGBITS         0000000000000770  00000770</span><br><span class="line">       0000000000000064  0000000000000000   A       0     0     8</span><br><span class="line">  [16] .init_array       INIT_ARRAY       0000000000200df8  00000df8</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [17] .fini_array       FINI_ARRAY       0000000000200e00  00000e00</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [18] .jcr              PROGBITS         0000000000200e08  00000e08</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [19] .data.rel.ro      PROGBITS         0000000000200e10  00000e10</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [20] .dynamic          DYNAMIC          0000000000200e18  00000e18</span><br><span class="line">       00000000000001c0  0000000000000010  WA       4     0     8</span><br><span class="line">  [21] .got              PROGBITS         0000000000200fd8  00000fd8</span><br><span class="line">       0000000000000028  0000000000000008  WA       0     0     8</span><br><span class="line">  [22] .got.plt          PROGBITS         0000000000201000  00001000</span><br><span class="line">       0000000000000030  0000000000000008  WA       0     0     8</span><br><span class="line">  [23] .bss              NOBITS           0000000000201030  00001030</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     1</span><br><span class="line">  [24] .comment          PROGBITS         0000000000000000  00001030</span><br><span class="line">       000000000000002d  0000000000000001  MS       0     0     1</span><br><span class="line">  [25] .symtab           SYMTAB           0000000000000000  00001060</span><br><span class="line">       0000000000000570  0000000000000018          26    44     8</span><br><span class="line">  [26] .strtab           STRTAB           0000000000000000  000015d0</span><br><span class="line">       00000000000001f5  0000000000000000           0     0     1</span><br><span class="line">  [27] .shstrtab         STRTAB           0000000000000000  000017c5</span><br><span class="line">       00000000000000f5  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure>

<p>之後.so文件同樣可鏈入目標文件（可重定位文件）中去編譯出來。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">                             形態2                形態1                形態3</span><br><span class="line">[root@learn ~]<span class="comment"># gcc -o dynamiccreateprocess createprocess.o -L. -l dynamicprocess</span></span><br></pre></td></tr></table></figure>

<p>運行結果，運行時需要手動指定load的路徑。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># export LD_LIBRARY_PATH=.</span></span><br><span class="line">[root@learn ~]<span class="comment"># ./dynamiccreateprocess </span></span><br><span class="line">total 228</span><br><span class="line">-rw-r--r--. 1 root root 231449 Jun 22 05:36 redhat.repo</span><br><span class="line">[root@learn ~]<span class="comment"># readelf -S dynamiccreateprocess </span></span><br><span class="line">There are 31 section headers, starting at offset 0x1940:</span><br><span class="line"></span><br><span class="line">Section Headers:</span><br><span class="line">  [Nr] Name              Type             Address           Offset</span><br><span class="line">       Size              EntSize          Flags  Link  Info  Align</span><br><span class="line">  [ 0]                   NULL             0000000000000000  00000000</span><br><span class="line">       0000000000000000  0000000000000000           0     0     0</span><br><span class="line">  [ 1] .interp           PROGBITS         0000000000400238  00000238 &lt;--- ld-linux.so</span><br><span class="line">       000000000000001c  0000000000000000   A       0     0     1         負責運行時進行鏈接</span><br><span class="line">  [ 2] .note.ABI-tag     NOTE             0000000000400254  00000254</span><br><span class="line">       0000000000000020  0000000000000000   A       0     0     4</span><br><span class="line">  [ 3] .note.gnu.build-i NOTE             0000000000400274  00000274</span><br><span class="line">       0000000000000024  0000000000000000   A       0     0     4</span><br><span class="line">  [ 4] .gnu.hash         GNU_HASH         0000000000400298  00000298</span><br><span class="line">       0000000000000038  0000000000000000   A       5     0     8</span><br><span class="line">  [ 5] .dynsym           DYNSYM           00000000004002d0  000002d0</span><br><span class="line">       00000000000000d8  0000000000000018   A       6     1     8</span><br><span class="line">  [ 6] .dynstr           STRTAB           00000000004003a8  000003a8</span><br><span class="line">       0000000000000080  0000000000000000   A       0     0     1</span><br><span class="line">  [ 7] .gnu.version      VERSYM           0000000000400428  00000428</span><br><span class="line">       0000000000000012  0000000000000002   A       5     0     2</span><br><span class="line">  [ 8] .gnu.version_r    VERNEED          0000000000400440  00000440</span><br><span class="line">       0000000000000020  0000000000000000   A       6     1     8</span><br><span class="line">  [ 9] .rela.dyn         RELA             0000000000400460  00000460</span><br><span class="line">       0000000000000018  0000000000000018   A       5     0     8</span><br><span class="line">  [10] .rela.plt         RELA             0000000000400478  00000478</span><br><span class="line">       0000000000000030  0000000000000018  AI       5    24     8</span><br><span class="line">  [11] .init             PROGBITS         00000000004004a8  000004a8</span><br><span class="line">       000000000000001a  0000000000000000  AX       0     0     4</span><br><span class="line">  [12] .plt              PROGBITS         00000000004004d0  000004d0  &lt;---過程鏈接表 PLT</span><br><span class="line">       0000000000000030  0000000000000010  AX       0     0     16   Procedure Linkage Table，</span><br><span class="line">  [13] .plt.got          PROGBITS         0000000000400500  00000500</span><br><span class="line">       0000000000000008  0000000000000000  AX       0     0     8</span><br><span class="line">  [14] .text             PROGBITS         0000000000400510  00000510</span><br><span class="line">       00000000000001b2  0000000000000000  AX       0     0     16</span><br><span class="line">  [15] .fini             PROGBITS         00000000004006c4  000006c4</span><br><span class="line">       0000000000000009  0000000000000000  AX       0     0     4</span><br><span class="line">  [16] .rodata           PROGBITS         00000000004006d0  000006d0</span><br><span class="line">       0000000000000028  0000000000000000   A       0     0     8</span><br><span class="line">  [17] .eh_frame_hdr     PROGBITS         00000000004006f8  000006f8</span><br><span class="line">       0000000000000034  0000000000000000   A       0     0     4</span><br><span class="line">  [18] .eh_frame         PROGBITS         0000000000400730  00000730</span><br><span class="line">       00000000000000f4  0000000000000000   A       0     0     8</span><br><span class="line">  [19] .init_array       INIT_ARRAY       0000000000600e00  00000e00</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [20] .fini_array       FINI_ARRAY       0000000000600e08  00000e08</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [21] .jcr              PROGBITS         0000000000600e10  00000e10</span><br><span class="line">       0000000000000008  0000000000000000  WA       0     0     8</span><br><span class="line">  [22] .dynamic          DYNAMIC          0000000000600e18  00000e18</span><br><span class="line">       00000000000001e0  0000000000000010  WA       6     0     8</span><br><span class="line">  [23] .got              PROGBITS         0000000000600ff8  00000ff8</span><br><span class="line">       0000000000000008  0000000000000008  WA       0     0     8</span><br><span class="line">  [24] .got.plt          PROGBITS         0000000000601000  00001000  &lt;--- 全局偏移量表 GOT</span><br><span class="line">       0000000000000028  0000000000000008  WA       0     0     8      Global Offset Table    </span><br><span class="line">  [25] .data             PROGBITS         0000000000601028  00001028</span><br><span class="line">       0000000000000004  0000000000000000  WA       0     0     1</span><br><span class="line">  [26] .bss              NOBITS           000000000060102c  0000102c</span><br><span class="line">       0000000000000004  0000000000000000  WA       0     0     1</span><br><span class="line">  [27] .comment          PROGBITS         0000000000000000  0000102c</span><br><span class="line">       000000000000002d  0000000000000001  MS       0     0     1</span><br><span class="line">  [28] .symtab           SYMTAB           0000000000000000  00001060</span><br><span class="line">       0000000000000600  0000000000000018          29    47     8</span><br><span class="line">  [29] .strtab           STRTAB           0000000000000000  00001660</span><br><span class="line">       00000000000001cf  0000000000000000           0     0     1</span><br><span class="line">  [30] .shstrtab         STRTAB           0000000000000000  0000182f</span><br><span class="line">       000000000000010c  0000000000000000           0     0     1</span><br><span class="line">Key to Flags:</span><br><span class="line">  W (write), A (alloc), X (execute), M (merge), S (strings), I (info),</span><br><span class="line">  L (link order), O (extra OS processing required), G (group), T (TLS),</span><br><span class="line">  C (compressed), x (unknown), o (OS specific), E (exclude),</span><br><span class="line">  l (large), p (processor specific)</span><br></pre></td></tr></table></figure>

<p>工作流程（編譯時建立PLT代替去找，PLT因爲GOT告知，因此會問GOT，GOT引路讓PLT去加載ld-linux.so直接在内存中找），之所以必須PLT去找因爲其作用為存放stub代碼，GOT存放so對應的真實代碼地址。</p>
<p>dynamiccreateprocess→ PLT⇋GOT→ld-linux.so→libdynamicprocess.so(create_process)</p>
<blockquote>
<p>它们是怎么工作的，使得程序运行的时候，可以将 so 文件动态链接到进程空间的呢？dynamiccreateprocess 这个程序要调用 libdynamicprocess.so 里的 create_process 函数。由于是运行时才去找，编译的时候，压根不知道这个函数在哪里，所以就在 PLT 里面建立一项 PLT[x]。这一项也是一些代码，有点像一个本地的代理，在二进制程序里面，不直接调用 create_process 函数，而是调用 PLT[x]里面的代理代码，这个代理代码会在运行的时候找真正的 create_process 函数。去哪里找代理代码呢？这就用到了 GOT，这里面也会为 create_process 函数创建一项 GOT[y]。这一项是运行时 create_process 函数在内存中真正的地址。如果这个地址在 dynamiccreateprocess 调用 PLT[x]里面的代理代码，代理代码调用 GOT 表中对应项 GOT[y]，调用的就是加载到内存中的 libdynamicprocess.so 里面的 create_process 函数了。但是 GOT 怎么知道的呢？对于 create_process 函数，GOT 一开始就会创建一项 GOT[y]，但是这里面没有真正的地址，因为它也不知道，但是它有办法，它又回调 PLT，告诉它，你里面的代理代码来找我要 create_process 函数的真实地址，我不知道，你想想办法吧。PLT 这个时候会转而调用 PLT[0]，也即第一项，PLT[0]转而调用 GOT[2]，这里面是 ld-linux.so 的入口函数，这个函数会找到加载到内存中的 libdynamicprocess.so 里面的 create_process 函数的地址，然后把这个地址放在 GOT[y]里面。下次，PLT[x]的代理函数就能够直接调用了。</p>
</blockquote>
<h2 id="0x01-執行程序的主體：load-elf-binary等函數"><a href="#0x01-執行程序的主體：load-elf-binary等函數" class="headerlink" title="0x01 執行程序的主體：load_elf_binary等函數"></a>0x01 執行程序的主體：load_elf_binary等函數</h2><hr>
<p>系統中大體通過以下的調用順序執行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sys_execve-&gt;do_execve-&gt;do_execveat_common-&gt;exec_binprm-&gt;search_binary_handler。</span><br></pre></td></tr></table></figure>

<p>而exec函數的命名還遵循以下規則：</p>
<blockquote>
<ul>
<li>包含 p 的函数（execvp, execlp）会在 PATH 路径下面寻找程序；</li>
<li>不包含 p 的函数需要输入程序的全路径；</li>
<li>包含 v 的函数（execv, execvp, execve）以数组的形式接收参数；</li>
<li>包含 l 的函数（execl, execlp, execle）以列表的形式接收参数；</li>
<li>包含 e 的函数（execve, execle）以数组的形式接收环境变量。</li>
</ul>
</blockquote>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/execnamerule.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/execnamerule.jpg"></p>
<h2 id="0x02-執行函數的主體：進程"><a href="#0x02-執行函數的主體：進程" class="headerlink" title="0x02 執行函數的主體：進程"></a>0x02 執行函數的主體：進程</h2><hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@deployer ~]<span class="comment"># ps -ef</span></span><br><span class="line">           進程 父進程        發起地             無括號，用戶態，父進程為1，systemd init進程</span><br><span class="line">                             問號為後臺          中括號，内核態，父進程為2，kthreadd内核綫程</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0  2018 ?        00:00:29 /usr/lib/systemd/systemd --system --deserialize 21</span><br><span class="line">root         2     0  0  2018 ?        00:00:00 [kthreadd]</span><br><span class="line">root         3     2  0  2018 ?        00:00:00 [ksoftirqd/0]</span><br><span class="line">root         5     2  0  2018 ?        00:00:00 [kworker/0:0H]</span><br><span class="line">root         9     2  0  2018 ?        00:00:40 [rcu_sched]</span><br><span class="line">......</span><br><span class="line">root       337     2  0  2018 ?        00:00:01 [kworker/3:1H]</span><br><span class="line">root       380     1  0  2018 ?        00:00:00 /usr/lib/systemd/systemd-udevd</span><br><span class="line">root       415     1  0  2018 ?        00:00:01 /sbin/auditd</span><br><span class="line">root       498     1  0  2018 ?        00:00:03 /usr/lib/systemd/systemd-logind</span><br><span class="line">......</span><br><span class="line">root       852     1  0  2018 ?        00:06:25 /usr/sbin/rsyslogd -n</span><br><span class="line">root      2580     1  0  2018 ?        00:00:00 /usr/sbin/sshd -D</span><br><span class="line">root     29058     2  0 Jan03 ?        00:00:01 [kworker/1:2]</span><br><span class="line">root     29672     2  0 Jan04 ?        00:00:09 [kworker/2:1]</span><br><span class="line">root     30467     1  0 Jan06 ?        00:00:00 /usr/sbin/crond -n</span><br><span class="line">root     31574     2  0 Jan08 ?        00:00:01 [kworker/u128:2]</span><br><span class="line">......</span><br><span class="line">root     32792  2580  0 Jan10 ?        00:00:00 sshd: root@pts/0</span><br><span class="line">root     32794 32792  0 Jan10 pts/0    00:00:00 -bash</span><br><span class="line">root     32901 32794  0 00:01 pts/0    00:00:00 ps -ef</span><br></pre></td></tr></table></figure>

<h2 id="0x03-結語"><a href="#0x03-結語" class="headerlink" title="0x03 結語"></a>0x03 結語</h2><hr>
<p>終於啃完進程了，耗時好幾天，果然寫博客方便整理思路。</p>
<ol>
<li>ELF的三種形態，.o , 二進制文件, .so ，.a只是.o的簡單歸檔。</li>
<li>既然ELF是被執行的主體，自然系統調用到最後需要load_elf_binary函數。</li>
<li>而在系統層面，用戶態的祖宗進程和内核態的祖宗進程分別以自己的方式進行函數的調用。</li>
</ol>
<p>個人學習筆記，如果有誤，歡迎指正。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>趣談Linux操作系統筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>關於iptables與firewalld趣事</title>
    <url>/Ops/2020-06-25-Funny-With-firewalld-but-not-iptables.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/firewall.jpg" width=50% /></center>

<p>本文旨在記錄解決關於iptables和firewalld的一個<del><font color=#808080>奇葩</font></del>需求。</p>
<a id="more"></a>

<h2 id="事情起因"><a href="#事情起因" class="headerlink" title="事情起因"></a>事情起因</h2><hr>
<p>遇到一個<strong>非常重要的人</strong>問我不得不答的以下三個問題。</p>
<ol>
<li>讓某一些端口只能被某一些IP地址所訪問。</li>
<li>在達成1的同時，除1以外的任何端口外不做任何限制，均可被所有IP地址訪問。</li>
<li>iptables -A INPUT -i lo -j ACCEPT的影響是什麽</li>
</ol>
<h2 id="事情經過"><a href="#事情經過" class="headerlink" title="事情經過"></a>事情經過</h2><hr>
<h3 id="firewalld部分"><a href="#firewalld部分" class="headerlink" title="firewalld部分"></a>firewalld部分</h3><p>問題1和2咋一看，似乎應該選擇trusted zone，firewalld裏唯一一個默認放行所有端口的zone。但實驗下來，trusted zone下并不能再做黑名單的過濾，遂放棄。（如有錯誤，請斧正）</p>
<p>因此解決問題的思路轉爲，使用public zone，然後通過端口添加，放行全部協議，然後在rich rule中增添端口限制。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=1-65535/tcp</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=1-65535/udp</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --permanent --zone=public --add-rich-rule=<span class="string">"rule family="</span>ipv4<span class="string">" source NOT address="</span>192.168.99.99<span class="string">" port port="</span>22<span class="string">" protocol="</span>tcp<span class="string">" reject"</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="iptables部分"><a href="#iptables部分" class="headerlink" title="iptables部分"></a>iptables部分</h3><p>該命令配置的是loopback端口，作用於127.0.0.1環迴地址的規則，正常情況下與其他的iptables規則互不影響，於是可以通過以下方法來更直觀地瞭解這個情況。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># iptables -nvL</span></span><br><span class="line">Chain INPUT (policy ACCEPT 1021 packets, 124K bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">    0     0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0           </span><br><span class="line">   34  4493 ACCEPT     tcp  --  *      *       192.168.99.99        0.0.0.0/0            tcp dpt:22</span><br><span class="line">   20  1200 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class="line">    0     0 ACCEPT     tcp  --  *      *       192.168.99.4         0.0.0.0/0            tcp dpt:22</span><br><span class="line">    0     0 REJECT     tcp  --  *      *       192.168.99.4         0.0.0.0/0            tcp dpt:22 reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 521 packets, 51006 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination  </span><br><span class="line">[root@localhost ~]<span class="comment"># ssh root@127.0.0.1                                              &lt;------目的地址使用127.0.0.1</span></span><br><span class="line">The authenticity of host <span class="string">'127.0.0.1 (127.0.0.1)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:cEB3EJMdhfTrMJhyP8b3jMgv1jLzR42Y45N6SsCLmes.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>127.0.0.1<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">root@127.0.0.1'</span>s password: </span><br><span class="line">Activate the web console with: systemctl <span class="built_in">enable</span> --now cockpit.socket</span><br><span class="line"></span><br><span class="line">Last login: Tue Jun 23 22:31:35 2020 from ::1</span><br><span class="line">[root@localhost ~]<span class="comment"># iptables -nvL</span></span><br><span class="line">Chain INPUT (policy ACCEPT 1025 packets, 125K bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">   47  7746 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0       &lt;------可以看到流經情況    </span><br><span class="line">   34  4493 ACCEPT     tcp  --  *      *       192.168.99.99        0.0.0.0/0            tcp dpt:22</span><br><span class="line">   20  1200 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class="line">    0     0 ACCEPT     tcp  --  *      *       192.168.99.4         0.0.0.0/0            tcp dpt:22</span><br><span class="line">    0     0 REJECT     tcp  --  *      *       192.168.99.4         0.0.0.0/0            tcp dpt:22 reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 569 packets, 58858 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination  </span><br><span class="line">[root@localhost ~]<span class="comment"># curl http://127.0.0.1                                           &lt;-----觸發x2</span></span><br><span class="line">curl: (7) Failed to connect to 127.0.0.1 port 80: Connection refused</span><br><span class="line">[root@localhost ~]<span class="comment"># iptables -nvL</span></span><br><span class="line">Chain INPUT (policy ACCEPT 1094 packets, 135K bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line">  176 18806 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0       &lt;------成功x2   </span><br><span class="line">   34  4493 ACCEPT     tcp  --  *      *       192.168.99.99        0.0.0.0/0            tcp dpt:22</span><br><span class="line">   20  1200 DROP       tcp  --  *      *       0.0.0.0/0            0.0.0.0/0            tcp dpt:22</span><br><span class="line">    0     0 ACCEPT     tcp  --  *      *       192.168.99.4         0.0.0.0/0            tcp dpt:22</span><br><span class="line">    0     0 REJECT     tcp  --  *      *       192.168.99.4         0.0.0.0/0            tcp dpt:22 reject-with icmp-port-unreachable</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination         </span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT 712 packets, 71120 bytes)</span><br><span class="line"> pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><hr>
<p>firewalld還是蠻好用的，有時候想東西得反過來想。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Networking </tag>
        <tag>Firewalld </tag>
        <tag>Iptables </tag>
      </tags>
  </entry>
  <entry>
    <title>如何檢查Linux網卡驅動</title>
    <url>/Ops/2020-12-16-How-to-check-Network-card-firmware-in-Linux.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/PCIENetworkcard.png" width=50% /></center>

<p>本文簡單記錄檢查Linux驅動來源以及相關信息。</p>
<a id="more"></a>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>衆所周知，每個不同Linux發行版維持著不同版本的Kernel分支，而其内部驅動的集成度，在不同時期也不一樣。當問題出現時，檢查驅動的信息，尋求相應的支持/答案，顯得十分必要。本文演示的例子是RHEL 7。</p>
<h2 id="0x01-正文"><a href="#0x01-正文" class="headerlink" title="0x01 正文"></a>0x01 正文</h2><p>首先使用sosreport收集系統信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sosreport</span></span><br><span class="line"></span><br><span class="line">sosreport (version 3.9)</span><br><span class="line"></span><br><span class="line">This <span class="built_in">command</span> will collect diagnostic and configuration information from</span><br><span class="line">this Red Hat Enterprise Linux system and installed applications.   </span><br><span class="line"></span><br><span class="line">An archive containing the collected information will be generated <span class="keyword">in</span></span><br><span class="line">/var/tmp/sos.pd1lwm and may be provided to a Red Hat support</span><br><span class="line">representative.</span><br><span class="line"></span><br><span class="line">Any information provided to Red Hat will be treated <span class="keyword">in</span> accordance with</span><br><span class="line">the published support policies at:</span><br><span class="line"> </span><br><span class="line">  https://access.redhat.com/support/</span><br><span class="line"></span><br><span class="line">The generated archive may contain data considered sensitive and its</span><br><span class="line">content should be reviewed by the originating organization before being</span><br><span class="line">passed to any third party.</span><br><span class="line"></span><br><span class="line">No changes will be made to system configuration.</span><br><span class="line"></span><br><span class="line">Press ENTER to <span class="built_in">continue</span>, or CTRL-C to quit.</span><br><span class="line"></span><br><span class="line">Please enter the <span class="keyword">case</span> id that you are generating this report <span class="keyword">for</span> []:</span><br><span class="line"></span><br><span class="line"> Setting up archive ...</span><br><span class="line"> Setting up plugins ...</span><br><span class="line"></span><br><span class="line">Creating compressed archive...</span><br><span class="line"></span><br><span class="line">Your sosreport has been generated and saved <span class="keyword">in</span>:</span><br><span class="line">  /var/tmp/sosreport-rhel7-2020-12-16-teqlkzl.tar.xz</span><br><span class="line"></span><br><span class="line"> Size   13.69MiB</span><br><span class="line"> Owner  root</span><br><span class="line"> md5    73bf64534498f5e97959e52a59217233</span><br><span class="line"></span><br><span class="line">Please send this file to your support representative.</span><br></pre></td></tr></table></figure>

<p>然後解壓</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /var/tmp/</span></span><br><span class="line"><span class="comment"># tar -Jxvf sosreport-rhel7-2020-12-16-teqlkzl.tar.xz</span></span><br></pre></td></tr></table></figure>

<p>從PCI總綫上去檢查設備型號。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep -EH 'Ethernet|Network' sosreport-*/lspci                                                                               </span></span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/lspci:03:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/lspci:04:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/lspci:05:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/lspci:06:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller [10ec:8168] (rev 15)</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/lspci:08:00.0 Network controller [0280]: Intel Corporation Wi-Fi 6 AX200 [8086:2723] (rev 1a)</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/lspci:09:00.0 Ethernet controller [0200]: Realtek Semiconductor Co., Ltd. RTL8125 2.5GbE Controller [10ec:8125] (rev 04)</span><br></pre></td></tr></table></figure>

<p>接著檢查它們的驅動情況。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep -E 'driver|version|bus-info' sosreport*/sos_commands/networking/ethtool_-i_e*</span></span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp3s0:driver: r8168</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp3s0:version: 8.048.00-NAPI</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp3s0:firmware-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp3s0:expansion-rom-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp3s0:bus-info: 0000:03:00.0</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp4s0:driver: r8168</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp4s0:version: 8.048.00-NAPI</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp4s0:firmware-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp4s0:expansion-rom-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp4s0:bus-info: 0000:04:00.0</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp5s0:driver: r8168</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp5s0:version: 8.048.00-NAPI</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp5s0:firmware-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp5s0:expansion-rom-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp5s0:bus-info: 0000:05:00.0</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp6s0:driver: r8168</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp6s0:version: 8.048.00-NAPI</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp6s0:firmware-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp6s0:expansion-rom-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp6s0:bus-info: 0000:06:00.0</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp9s0:driver: r8125</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp9s0:version: 9.003.05-NAPI</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp9s0:firmware-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp9s0:expansion-rom-version:</span><br><span class="line">sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/networking/ethtool_-i_enp9s0:bus-info: 0000:09:00.0</span><br><span class="line"><span class="comment"># grep -E 'driver|version|bus-info' sosreport*/sos_commands/networking/ethtool_-i_w*</span></span><br><span class="line">driver: iwlwifi</span><br><span class="line">version: 3.10.0-1160.6.1.el7.x86_64</span><br><span class="line">firmware-version: 48.4fa0041f.0</span><br><span class="line">expansion-rom-version:</span><br><span class="line">bus-info: 0000:08:00.0</span><br></pre></td></tr></table></figure>

<p>然後檢查驅動的來源情況。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># grep -E 'r8168|iwlwifi|8125' -A9 sosreport-rhel7-2020-12-16-teqlkzl/sos_commands/kernel/modinfo_ALL_MODULES</span></span><br><span class="line">filename:       /lib/modules/3.10.0-1160.6.1.el7.x86_64/kernel/drivers/net/wireless/intel/iwlwifi/iwlwifi.ko.xz</span><br><span class="line">license:        GPL</span><br><span class="line">author:         Copyright(c) 2003- 2015 Intel Corporation &lt;linuxwifi@intel.com&gt;</span><br><span class="line">description:    Intel(R) Wireless WiFi driver <span class="keyword">for</span> Linux</span><br><span class="line">firmware:       iwlwifi-100-5.ucode</span><br><span class="line">firmware:       iwlwifi-1000-5.ucode</span><br><span class="line">firmware:       iwlwifi-135-6.ucode</span><br><span class="line">firmware:       iwlwifi-105-6.ucode</span><br><span class="line">firmware:       iwlwifi-2030-6.ucode</span><br><span class="line">firmware:       iwlwifi-2000-6.ucode</span><br><span class="line">firmware:       iwlwifi-5150-2.ucode</span><br><span class="line">firmware:       iwlwifi-5000-5.ucode</span><br><span class="line">firmware:       iwlwifi-6000g2b-6.ucode</span><br><span class="line">firmware:       iwlwifi-6000g2a-6.ucode</span><br><span class="line">firmware:       iwlwifi-6050-5.ucode</span><br><span class="line">firmware:       iwlwifi-6000-6.ucode</span><br><span class="line">firmware:       iwlwifi-7265D-29.ucode</span><br><span class="line">firmware:       iwlwifi-7265-17.ucode</span><br><span class="line">firmware:       iwlwifi-3168-29.ucode</span><br><span class="line">firmware:       iwlwifi-3160-17.ucode</span><br><span class="line">firmware:       iwlwifi-7260-17.ucode</span><br><span class="line">firmware:       iwlwifi-8265-36.ucode</span><br><span class="line">firmware:       iwlwifi-8000C-36.ucode</span><br><span class="line">firmware:       iwlwifi-9260-th-b0-jf-b0-46.ucode</span><br><span class="line">firmware:       iwlwifi-9000-pu-b0-jf-b0-46.ucode</span><br><span class="line">firmware:       iwlwifi-ty-a0-gf-a0-48.ucode</span><br><span class="line">firmware:       iwlwifi-so-a0-gf-a0-48.ucode</span><br><span class="line">firmware:       iwlwifi-so-a0-hr-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-so-a0-jf-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-cc-a0-48.ucode</span><br><span class="line">firmware:       iwlwifi-QuQnj-b0-jf-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-QuZ-a0-jf-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-QuZ-a0-hr-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-Qu-b0-jf-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-Qu-c0-hr-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-QuQnj-a0-hr-a0-48.ucode</span><br><span class="line">firmware:       iwlwifi-QuQnj-b0-hr-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-Qu-b0-hr-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-QuQnj-f0-hr-a0-48.ucode</span><br><span class="line">firmware:       iwlwifi-Qu-a0-jf-b0-48.ucode</span><br><span class="line">firmware:       iwlwifi-Qu-a0-hr-a0-48.ucode</span><br><span class="line">retpoline:      Y</span><br><span class="line">rhelversion:    7.9</span><br><span class="line">srcversion:     7AF1DC6F8F3C429A27DEBB1</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00008086d00007AF0sv*sd00000A10bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00008086d00007AF0sv*sd00000510bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00008086d00007AF0sv*sd00000310bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00008086d00007AF0sv*sd00000090bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00008086d00007A70sv*sd00000A10bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00008086d00007A70sv*sd00000510bc*sc*i*</span><br><span class="line">--</span><br><span class="line">filename:       /lib/modules/3.10.0-1160.6.1.el7.x86_64/weak-updates/r8125/r8125.ko</span><br><span class="line">version:        9.003.05-NAPI</span><br><span class="line">license:        GPL</span><br><span class="line">description:    Realtek RTL8125 2.5Gigabit Ethernet driver</span><br><span class="line">author:         Realtek and the Linux r8125 crew &lt;netdev@vger.kernel.org&gt;</span><br><span class="line">retpoline:      Y</span><br><span class="line">rhelversion:    7.8</span><br><span class="line">srcversion:     1F956BA08266DA84517213A</span><br><span class="line"><span class="built_in">alias</span>:          pci:v000010ECd00003000sv*sd*bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v000010ECd00008125sv*sd*bc*sc*i*</span><br><span class="line">depends:</span><br><span class="line">vermagic:       3.10.0-1127.el7.x86_64 SMP mod_unload modversions</span><br><span class="line">signer:         The ELRepo Project (http://elrepo.org): ELRepo.org Secure Boot Key</span><br><span class="line">sig_key:        F3:65:AD:34:81:A7:B2:0E:34:27:B6:1B:2A:26:63:5B:83:FE:42:7B</span><br><span class="line">sig_hashalgo:   sha256</span><br><span class="line">sig_hashalgo:   sha256</span><br><span class="line">parm:           speed_mode:force phy operation. Deprecated by ethtool (8). (uint)</span><br><span class="line">parm:           duplex_mode:force phy operation. Deprecated by ethtool (8). (uint)</span><br><span class="line">parm:           autoneg_mode:force phy operation. Deprecated by ethtool (8). (uint)</span><br><span class="line">parm:           advertising_mode:force phy operation. Deprecated by ethtool (8). (uint)</span><br><span class="line">--</span><br><span class="line">filename:       /lib/modules/3.10.0-1160.6.1.el7.x86_64/weak-updates/r8168/r8168.ko</span><br><span class="line">version:        8.048.00-NAPI</span><br><span class="line">license:        GPL</span><br><span class="line">description:    RealTek RTL-8168 Gigabit Ethernet driver</span><br><span class="line">author:         Realtek and the Linux r8168 crew &lt;netdev@vger.kernel.org&gt;</span><br><span class="line">retpoline:      Y</span><br><span class="line">rhelversion:    7.7</span><br><span class="line">srcversion:     5ECBBFD13C1086105CAF750</span><br><span class="line"><span class="built_in">alias</span>:          pci:v00001186d00004300sv00001186sd00004B10bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v000010ECd00002600sv*sd*bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v000010ECd00002502sv*sd*bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v000010ECd00008161sv*sd*bc*sc*i*</span><br><span class="line"><span class="built_in">alias</span>:          pci:v000010ECd00008168sv*sd*bc*sc*i*</span><br><span class="line">depends:</span><br><span class="line">--</span><br><span class="line">filename:       /lib/modules/3.10.0-1160.6.1.el7.x86_64/kernel/drivers/net/wireless/intel/iwlwifi/mvm/iwlmvm.ko.xz</span><br><span class="line">license:        GPL</span><br><span class="line">author:         Copyright(c) 2003- 2015 Intel Corporation &lt;linuxwifi@intel.com&gt;</span><br><span class="line">description:    The new Intel(R) wireless AGN driver <span class="keyword">for</span> Linux</span><br><span class="line">retpoline:      Y</span><br><span class="line">rhelversion:    7.9</span><br><span class="line">srcversion:     C54E61FAAB55BA2A52ED85E</span><br><span class="line">depends:        iwlwifi,mac80211,cfg80211</span><br><span class="line">intree:         Y</span><br><span class="line">vermagic:       3.10.0-1160.6.1.el7.x86_64 SMP mod_unload modversions</span><br><span class="line">signer:         Red Hat Enterprise Linux kernel signing key</span><br><span class="line">sig_key:        3F:FB:02:6D:AD:EF:6E:0B:C4:0</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>從上述的singer就可以得知它們的倉庫來源。</p>
<h2 id="0x02-總結"><a href="#0x02-總結" class="headerlink" title="0x02 總結"></a>0x02 總結</h2><p>事實上，安裝來自第三方驅動的方法林林總總（二進制，RPM或自定義脚本），而紅帽提供的驅動内置于Kernel，因此卸載它們的方法顯而易見就是安裝全新内核。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>RHEL </tag>
      </tags>
  </entry>
  <entry>
    <title>趣談Linux操作系統筆記II（之剖析系統綫程）</title>
    <url>/Ops/2020-06-29-Funny-With-Linux-II-about-multi-tasks.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>

<p>本文旨在剖析线程的5个W和1个H。</p>
<a id="more"></a>

<h2 id="0x00-什么是线程-what-and-why"><a href="#0x00-什么是线程-what-and-why" class="headerlink" title="0x00 什么是线程(what and why?)"></a>0x00 什么是线程(what and why?)</h2><hr>
<p>线程常常与进程一起谈及，可通过以下解释它们的关系：</p>
<blockquote>
<p><strong>进程相当于一个项目，而线程则是为了完成项目需求，而建立的一个个开发任务。</strong></p>
</blockquote>
<p>因此，当开发任务间无先后次序时，拆分出支线来方便并发，可以使效率up up（科学的分工，符合<a href="https://zh.wikipedia.org/zh-tw/%E5%B8%95%E7%B4%AF%E6%89%98%E6%B3%95%E5%88%99" target="_blank" rel="noopener"><strong>宇宙法則</strong></a>）。</p>
<h2 id="0x01-如何创建线程-how"><a href="#0x01-如何创建线程-how" class="headerlink" title="0x01 如何创建线程(how?)"></a>0x01 如何创建线程(how?)</h2><hr>
<p>创建前，先了解调用线程的必经步骤。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/howtaskwork.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/howtaskwork.jpg"></p>
<p>根据流程图，构建与之对应的测试代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM_OF_TASKS 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">downloadfile</span><span class="params">(<span class="keyword">void</span> *filename)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"I am downloading the file %s!\n"</span>, (<span class="keyword">char</span> *)filename);</span><br><span class="line">   sleep(<span class="number">10</span>);</span><br><span class="line">   <span class="keyword">long</span> downloadtime = rand()%<span class="number">100</span>;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"I finish downloading the file within %d minutes!\n"</span>, downloadtime);</span><br><span class="line">   <span class="comment">//次线程结束并返回随机生成的downloadtime</span></span><br><span class="line">   pthread_exit((<span class="keyword">void</span> *)downloadtime); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function">   <span class="comment">//声明数组</span></span></span><br><span class="line">   char files[NUM_OF_TASKS][20]=&#123;"file1.avi","file2.rmvb","file3.mp4","file4.wmv","file5.flv"&#125;; </span><br><span class="line">   <span class="comment">//声明该数组为线程对象</span></span><br><span class="line">   <span class="keyword">pthread_t</span> threads[NUM_OF_TASKS];                                    </span><br><span class="line">   <span class="keyword">int</span> rc;</span><br><span class="line">   <span class="keyword">int</span> t;</span><br><span class="line">   <span class="keyword">int</span> downloadtime;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//设置线程属性</span></span><br><span class="line">   <span class="keyword">pthread_attr_t</span> thread_attr;                                         </span><br><span class="line">   <span class="comment">//初始化线程</span></span><br><span class="line">   pthread_attr_init(&amp;thread_attr);                                   </span><br><span class="line">   <span class="comment">//设置其属性为主线程等待子线程，并获取其退出状态方便调试</span></span><br><span class="line">   pthread_attr_setdetachstate(&amp;thread_attr,PTHREAD_CREATE_JOINABLE);  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;NUM_OF_TASKS;t++)&#123;</span><br><span class="line">     <span class="comment">//打印</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"creating thread %d, please help me to download %s\n"</span>, t+<span class="number">1</span>, files[t]);</span><br><span class="line">	 <span class="comment">//创建并开启线程 &amp;thread_attr, 然后指定子线程的函数 downloadfie</span></span><br><span class="line">     rc = pthread_create(&amp;threads[t], &amp;thread_attr, downloadfile, (<span class="keyword">void</span> *)files[t]); </span><br><span class="line">     <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR; return code from pthread_create() is %d\n"</span>, rc);</span><br><span class="line">       <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//回收线程属性</span></span><br><span class="line">   pthread_attr_destroy(&amp;thread_attr);  </span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;NUM_OF_TASKS;t++)&#123;</span><br><span class="line">     <span class="comment">//等待线程结束，并取得返回的downloadtime数值</span></span><br><span class="line">     pthread_join(threads[t],(<span class="keyword">void</span>**)&amp;downloadtime);  </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"Thread %d downloads the file %s in %d minutes.\n"</span>,t+<span class="number">1</span>,files[t],downloadtime);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//主线程结束</span></span><br><span class="line">   pthread_exit(<span class="literal">NULL</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对代码进行编译，多次运行观察线程的随机创建（线程创建全靠资源动态分配）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># gcc download.c -lpthread -o download.out</span></span><br><span class="line">[root@learn ~]<span class="comment"># ./download.out </span></span><br><span class="line">creating thread 1, please <span class="built_in">help</span> me to download file1.avi</span><br><span class="line">creating thread 2, please <span class="built_in">help</span> me to download file2.rmvb</span><br><span class="line">creating thread 3, please <span class="built_in">help</span> me to download file3.mp4</span><br><span class="line">creating thread 4, please <span class="built_in">help</span> me to download file4.wmv</span><br><span class="line">creating thread 5, please <span class="built_in">help</span> me to download file5.flv</span><br><span class="line">I am downloading the file file2.rmvb!</span><br><span class="line">I am downloading the file file4.wmv!</span><br><span class="line">I am downloading the file file5.flv!</span><br><span class="line">I am downloading the file file3.mp4!</span><br><span class="line">I am downloading the file file1.avi!</span><br><span class="line">I finish downloading the file within 83 minutes!</span><br><span class="line">I finish downloading the file within 86 minutes!</span><br><span class="line">I finish downloading the file within 77 minutes!</span><br><span class="line">I finish downloading the file within 15 minutes!</span><br><span class="line">I finish downloading the file within 93 minutes!</span><br><span class="line">Thread 1 downloads the file file1.avi <span class="keyword">in</span> 93 minutes.</span><br><span class="line">Thread 2 downloads the file file2.rmvb <span class="keyword">in</span> 86 minutes.</span><br><span class="line">Thread 3 downloads the file file3.mp4 <span class="keyword">in</span> 15 minutes.</span><br><span class="line">Thread 4 downloads the file file4.wmv <span class="keyword">in</span> 83 minutes.</span><br><span class="line">Thread 5 downloads the file file5.flv <span class="keyword">in</span> 77 minutes.</span><br><span class="line">[root@learn ~]<span class="comment"># ./download.out </span></span><br><span class="line">creating thread 1, please <span class="built_in">help</span> me to download file1.avi</span><br><span class="line">creating thread 2, please <span class="built_in">help</span> me to download file2.rmvb</span><br><span class="line">I am downloading the file file1.avi!</span><br><span class="line">creating thread 3, please <span class="built_in">help</span> me to download file3.mp4</span><br><span class="line">I am downloading the file file2.rmvb!</span><br><span class="line">creating thread 4, please <span class="built_in">help</span> me to download file4.wmv</span><br><span class="line">I am downloading the file file3.mp4!</span><br><span class="line">creating thread 5, please <span class="built_in">help</span> me to download file5.flv</span><br><span class="line">I am downloading the file file4.wmv!</span><br><span class="line">I am downloading the file file5.flv!</span><br><span class="line">I finish downloading the file within 83 minutes!</span><br><span class="line">I finish downloading the file within 86 minutes!</span><br><span class="line">I finish downloading the file within 77 minutes!</span><br><span class="line">I finish downloading the file within 15 minutes!</span><br><span class="line">I finish downloading the file within 93 minutes!</span><br><span class="line">Thread 1 downloads the file file1.avi <span class="keyword">in</span> 83 minutes.</span><br><span class="line">Thread 2 downloads the file file2.rmvb <span class="keyword">in</span> 86 minutes.</span><br><span class="line">Thread 3 downloads the file file3.mp4 <span class="keyword">in</span> 93 minutes.</span><br><span class="line">Thread 4 downloads the file file4.wmv <span class="keyword">in</span> 15 minutes.</span><br><span class="line">Thread 5 downloads the file file5.flv <span class="keyword">in</span> 77 minutes.</span><br></pre></td></tr></table></figure>

<h2 id="0x02-线程的数据-when-and-where"><a href="#0x02-线程的数据-when-and-where" class="headerlink" title="0x02 线程的数据(when and where?)"></a>0x02 线程的数据(when and where?)</h2><hr>
<p>了解完并发多线程的运作模式和优势，接着是线程对<strong>三种不同位置类别数据</strong>的处理方式。</p>
<h3 id="线程栈上的本地数据"><a href="#线程栈上的本地数据" class="headerlink" title="线程栈上的本地数据"></a>线程栈上的本地数据</h3><p>默认被赋予了每个线程8MB的线程栈空间，用于存储其中的局部变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># ulimit -a</span></span><br><span class="line">core file size          (blocks, -c) 0</span><br><span class="line">data seg size           (kbytes, -d) unlimited</span><br><span class="line">scheduling priority             (-e) 0</span><br><span class="line">file size               (blocks, -f) unlimited</span><br><span class="line">pending signals                 (-i) 7144</span><br><span class="line">max locked memory       (kbytes, -l) 64</span><br><span class="line">max memory size         (kbytes, -m) unlimited</span><br><span class="line">open files                      (-n) 1024</span><br><span class="line">pipe size            (512 bytes, -p) 8</span><br><span class="line">POSIX message queues     (bytes, -q) 819200</span><br><span class="line">real-time priority              (-r) 0</span><br><span class="line">stack size              (kbytes, -s) 8192            &lt;&lt;&lt;</span><br><span class="line">cpu time               (seconds, -t) unlimited</span><br><span class="line">max user processes              (-u) 7144</span><br><span class="line">virtual memory          (kbytes, -v) unlimited</span><br><span class="line">file locks                      (-x) unlimited</span><br></pre></td></tr></table></figure>

<p>而内存中线程栈间有用小块区域来隔离各自空间，当被踏入则会引发<a href="https://baike.baidu.com/item/%E6%AE%B5%E9%94%99%E8%AF%AF" target="_blank" rel="noopener">段错误</a><strong><em><a href="https://en.wikipedia.org/wiki/Segmentation_fault" target="_blank" rel="noopener">(Segmentation fault)</a></em></strong>。</p>
<p>可以通过函数pthread_attr_t来修改单个线程栈大小，或者通过ulimit -s来进行全局修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ulimit</span> -s 16384</span><br></pre></td></tr></table></figure>

<h3 id="进程中共享的全局数据"><a href="#进程中共享的全局数据" class="headerlink" title="进程中共享的全局数据"></a>进程中共享的全局数据</h3><p>线程在读取进程中共享的全局数据时，引入互斥锁<strong>Mutex(Mutual Exclusion)</strong>来避免数据不一，需要<strong>等待互斥锁[(pthread_mutex_lock()]</strong> 或<strong>尝试互斥锁[pthread_mutex_trylock()]</strong> 來保证独占。 前者需要一直等待，后者则可以根据没抢到的提示佛系抢占。</p>
<ul>
<li><p>无条件变量的等待互斥锁</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/howmutexwork.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/howmutexwork.jpg"></p>
<p>  <strong>有无锁的情况对比，可帮助明白锁的重要性。</strong></p>
<p>  <strong>无互斥锁</strong>，受多线程影响的全局变量<strong>(money_of_tom + money_of_jerry)</strong>：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   [root@learn ~]<span class="comment"># cat mutex.c </span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line">   <span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">   <span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">#define NUM_OF_TASKS 5</span></span><br><span class="line">   </span><br><span class="line">   int money_of_tom = 100;</span><br><span class="line">   int money_of_jerry = 100;</span><br><span class="line">   //暂不启用mutex</span><br><span class="line">   //pthread_mutex_t g_money_lock;</span><br><span class="line">   </span><br><span class="line">//创建子线程用于执行金额转账</span><br><span class="line">   void *transfer(void *notused)   </span><br><span class="line">   &#123;</span><br><span class="line">     pthread_t tid = pthread_self();</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"Thread %u is transfering money!\n"</span>, (unsigned int)tid);</span><br><span class="line">     //暂不启用mutex</span><br><span class="line">     //pthread_mutex_lock(&amp;g_money_lock);</span><br><span class="line">     sleep(rand()%10);</span><br><span class="line">     money_of_tom+=10;</span><br><span class="line">     sleep(rand()%10);</span><br><span class="line">     money_of_jerry-=10;</span><br><span class="line">     //暂不启用mutex</span><br><span class="line">     //pthread_mutex_unlock(&amp;g_money_lock);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"Thread %u finish transfering money!\n"</span>, (unsigned int)tid);</span><br><span class="line">     pthread_exit((void *)0);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">//主线程负责输出总额，子线程负责交易细节</span><br><span class="line">   int main(int argc, char *argv[])  </span><br><span class="line">   &#123;</span><br><span class="line">     pthread_t threads[NUM_OF_TASKS];</span><br><span class="line">     int rc;</span><br><span class="line">     int t;</span><br><span class="line">     //暂不启用mutex</span><br><span class="line">     //pthread_mutex_init(&amp;g_money_lock, NULL);</span><br><span class="line">   </span><br><span class="line">     <span class="keyword">for</span>(t=0;t&lt;NUM_OF_TASKS;t++)&#123;</span><br><span class="line">    //创建子线程开启转账</span><br><span class="line">       rc = pthread_create(&amp;threads[t], NULL, transfer, NULL); </span><br><span class="line">       <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"ERROR; return code from pthread_create() is %d\n"</span>, rc);</span><br><span class="line">         <span class="built_in">exit</span>(-1);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">for</span>(t=0;t&lt;18;t++)&#123;</span><br><span class="line">       //暂不启用mutex</span><br><span class="line">       //pthread_mutex_lock(&amp;g_money_lock);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"money_of_tom + money_of_jerry = %d\n"</span>, money_of_tom + money_of_jerry);</span><br><span class="line">	//随机输出时间</span><br><span class="line">       sleep(rand()%3);  </span><br><span class="line">       //暂不启用mutex</span><br><span class="line">       //pthread_mutex_unlock(&amp;g_money_lock);</span><br><span class="line">     &#125;</span><br><span class="line">     //暂不启用mutex</span><br><span class="line">     //pthread_mutex_destroy(&amp;g_money_lock);</span><br><span class="line">     pthread_exit(NULL);</span><br><span class="line">   &#125;</span><br><span class="line">   [root@learn ~]<span class="comment"># gcc mutex.c -lpthread -o before.out</span></span><br><span class="line">   [root@learn ~]<span class="comment"># ./before.out </span></span><br><span class="line">   Thread 4143912704 is transfering money!</span><br><span class="line">   Thread 4135520000 is transfering money!</span><br><span class="line">   Thread 4152305408 is transfering money!</span><br><span class="line">   Thread 4127127296 is transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   Thread 4118734592 is transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   Thread 4118734592 finish transfering money!</span><br><span class="line">   Thread 4143912704 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 220</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   Thread 4127127296 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 220</span><br><span class="line">   Thread 4152305408 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   Thread 4135520000 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   [root@learn ~]<span class="comment"># ./before.out </span></span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   Thread 4152305408 is transfering money!</span><br><span class="line">   Thread 4135520000 is transfering money!</span><br><span class="line">   Thread 4118734592 is transfering money!</span><br><span class="line">   Thread 4143912704 is transfering money!</span><br><span class="line">   Thread 4127127296 is transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   Thread 4143912704 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 240</span><br><span class="line">   Thread 4127127296 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   money_of_tom + money_of_jerry = 230</span><br><span class="line">   Thread 4152305408 finish transfering money!</span><br><span class="line">   Thread 4135520000 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 210</span><br><span class="line">   Thread 4118734592 finish transfering money!</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br><span class="line">   money_of_tom + money_of_jerry = 200</span><br></pre></td></tr></table></figure>

<p>  <strong>有互斥锁</strong>，受多线程影响的全局变量<strong>(money_of_tom + money_of_jerry)</strong>：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> [root@learn ~]<span class="comment"># cat mutex.c </span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"> <span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"> <span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">#define NUM_OF_TASKS 5</span></span><br><span class="line"> </span><br><span class="line"> int money_of_tom = 100;</span><br><span class="line"> int money_of_jerry = 100;</span><br><span class="line"> //第一次运行去掉下面这行</span><br><span class="line"> pthread_mutex_t g_money_lock;</span><br><span class="line"> </span><br><span class="line"> void *transfer(void *notused)</span><br><span class="line"> &#123;</span><br><span class="line">   pthread_t tid = pthread_self();</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Thread %u is transfering money!\n"</span>, (unsigned int)tid);</span><br><span class="line">//开始转账前，等待互斥锁独占共享变量</span><br><span class="line">   pthread_mutex_lock(&amp;g_money_lock);   </span><br><span class="line">   sleep(rand()%10);</span><br><span class="line">   money_of_tom+=10;</span><br><span class="line">   sleep(rand()%10);</span><br><span class="line">   money_of_jerry-=10;</span><br><span class="line">//完成转账后，释放互斥锁</span><br><span class="line">   pthread_mutex_unlock(&amp;g_money_lock);  </span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"Thread %u finish transfering money!\n"</span>, (unsigned int)tid);</span><br><span class="line">   pthread_exit((void *)0);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> int main(int argc, char *argv[])</span><br><span class="line"> &#123;</span><br><span class="line">   pthread_t threads[NUM_OF_TASKS];</span><br><span class="line">   int rc;</span><br><span class="line">   int t;</span><br><span class="line">//开始创建线程前，初始化一个互斥锁 &amp;g_money_lock</span><br><span class="line">   pthread_mutex_init(&amp;g_money_lock, NULL); </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">for</span>(t=0;t&lt;NUM_OF_TASKS;t++)&#123;</span><br><span class="line">     rc = pthread_create(&amp;threads[t], NULL, transfer, NULL);</span><br><span class="line">     <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"ERROR; return code from pthread_create() is %d\n"</span>, rc);</span><br><span class="line">       <span class="built_in">exit</span>(-1);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span>(t=0;t&lt;100;t++)&#123;</span><br><span class="line">     //开始打印共享变量前，等待互斥锁独占共享变量</span><br><span class="line">     pthread_mutex_lock(&amp;g_money_lock);   </span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"money_of_tom + money_of_jerry = %d\n"</span>, money_of_tom + money_of_jerry);</span><br><span class="line">     sleep(rand()%10);</span><br><span class="line">     //完成输出后解锁</span><br><span class="line">     pthread_mutex_unlock(&amp;g_money_lock);  </span><br><span class="line">   &#125;</span><br><span class="line">   //全部完成后，销毁锁</span><br><span class="line">   pthread_mutex_destroy(&amp;g_money_lock); </span><br><span class="line">   pthread_exit(NULL);</span><br><span class="line"> &#125;</span><br><span class="line"> [root@learn ~]<span class="comment"># gcc mutex.c -lpthread -o after.out</span></span><br><span class="line"> [root@learn ~]<span class="comment"># ./after.out </span></span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> Thread 4152305408 is transfering money!</span><br><span class="line"> Thread 4143912704 is transfering money!</span><br><span class="line"> Thread 4118734592 is transfering money!</span><br><span class="line"> Thread 4135520000 is transfering money!</span><br><span class="line"> Thread 4127127296 is transfering money!</span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> ...</span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> Thread 4135520000 finish transfering money!</span><br><span class="line"> Thread 4152305408 finish transfering money!</span><br><span class="line"> Thread 4143912704 finish transfering money!</span><br><span class="line"> Thread 4118734592 finish transfering money!</span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> ...</span><br><span class="line"> money_of_tom + money_of_jerry = 200</span><br><span class="line"> Thread 4127127296 finish transfering money!</span><br></pre></td></tr></table></figure>
</li>
<li><p>有条件变量的等待互斥锁</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/howmutexworkwithcondtionvar.jpeg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/howmutexworkwithcondtionvar.jpeg"></p>
<p>  根据流程图，构建与之对应的测试代码。</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@learn ~]<span class="comment"># cat varmutex.c</span></span><br><span class="line"><span class="comment">#include &lt;pthread.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#define NUM_OF_TASKS 3</span></span><br><span class="line"><span class="comment">#define MAX_TASK_QUEUE 11</span></span><br><span class="line"></span><br><span class="line">char tasklist[MAX_TASK_QUEUE]=<span class="string">"ABCDEFGHIJ"</span>;  //声明含十个任务的数组</span><br><span class="line">int head = 0;</span><br><span class="line">int tail = 0;</span><br><span class="line"></span><br><span class="line">int quit = 0;</span><br><span class="line"></span><br><span class="line">pthread_mutex_t g_task_lock;                // 声明互斥锁 g_task_lock</span><br><span class="line">pthread_cond_t g_task_cv;                   // 声明条件变量 g_task_cv</span><br><span class="line"></span><br><span class="line">void *coder(void *notused)                  // 定义子线程工作内容</span><br><span class="line">&#123;</span><br><span class="line">  pthread_t tid = pthread_self();           // 声明子线程的tid</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!quit)&#123;                            //  反运算符，≠0为假，=0则真</span><br><span class="line"></span><br><span class="line">    pthread_mutex_lock(&amp;g_task_lock);       // 等待互斥锁</span><br><span class="line">    <span class="keyword">while</span>(tail == head)&#123;                    // 仅所有task完成后，tail==head</span><br><span class="line">      <span class="keyword">if</span>(quit)&#123;                             // 如果收到quit信号退出</span><br><span class="line">        pthread_mutex_unlock(&amp;g_task_lock); // 释放互斥锁</span><br><span class="line">        pthread_exit((void *)0);            // 退出线程</span><br><span class="line">      &#125;</span><br><span class="line">      // 打印等待线程</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"No task now! Thread %u is waiting!\n"</span>, (unsigned int)tid);  </span><br><span class="line">      // 一直等待条件变量和互斥锁的入参将自动抢锁。</span><br><span class="line">      pthread_cond_wait(&amp;g_task_cv, &amp;g_task_lock); </span><br><span class="line">      //线程id开始执行线程</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Have task now! Thread %u is grabing the task !\n"</span>, (unsigned int)tid); </span><br><span class="line">    &#125;</span><br><span class="line">    char task = tasklist[head++];          // 推进已完成head</span><br><span class="line">    pthread_mutex_unlock(&amp;g_task_lock);    // 释放整个子线程的互斥锁</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Thread %u has a task %c now!\n"</span>, (unsigned int)tid, task); //  获得任务</span><br><span class="line">    sleep(5);                              // 摸鱼五秒后打印完成    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Thread %u finish the task %c!\n"</span>, (unsigned int)tid, task);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pthread_exit((void *)0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])            // 定义主线程工作内容 </span><br><span class="line">&#123;</span><br><span class="line">  pthread_t threads[NUM_OF_TASKS];          // 声明线程。其中包含十个任务数组</span><br><span class="line">  int rc;</span><br><span class="line">  int t;</span><br><span class="line"></span><br><span class="line">  pthread_mutex_init(&amp;g_task_lock, NULL);   // 初始化互斥锁</span><br><span class="line">  pthread_cond_init(&amp;g_task_cv, NULL);      // 初始化条件变量</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(t=0;t&lt;NUM_OF_TASKS;t++)&#123;  </span><br><span class="line">    // 创建无属性线程，调用coder之后就继续往下。</span><br><span class="line">    rc = pthread_create(&amp;threads[t], NULL, coder, NULL); </span><br><span class="line">    <span class="keyword">if</span> (rc)&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"ERROR; return code from pthread_create() is %d\n"</span>, rc);</span><br><span class="line">      <span class="built_in">exit</span>(-1);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sleep(5);  // 等待五秒避免与子进程请求互斥锁的冲突。</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(t=1;t&lt;=4;t++)&#123;</span><br><span class="line">    pthread_mutex_lock(&amp;g_task_lock);      // 等待互斥锁</span><br><span class="line">    tail+=t;                               // 标志待完成位为1开始标记，2，3，4</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I am Boss, I assigned %d tasks, I notify all coders!\n"</span>, t); // 打印发布任务数</span><br><span class="line">    pthread_cond_broadcast(&amp;g_task_cv);    // 使用pthread_cond_broadcast通知所有线程的条件变量</span><br><span class="line">    pthread_mutex_unlock(&amp;g_task_lock);    // 吊销发布任务的互斥锁</span><br><span class="line">    sleep(20);                             // 并等待20秒后继续发布任务</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pthread_mutex_lock(&amp;g_task_lock);        // 请求互斥锁</span><br><span class="line">  quit = 1;                                // 不为0，停止子线程创建</span><br><span class="line">  pthread_cond_broadcast(&amp;g_task_cv);      // 并通知现有线程</span><br><span class="line">  pthread_mutex_unlock(&amp;g_task_lock);      // 释放互斥锁</span><br><span class="line"></span><br><span class="line">  pthread_mutex_destroy(&amp;g_task_lock);     // 销毁互斥锁</span><br><span class="line">  pthread_cond_destroy(&amp;g_task_cv);        // 销毁条件变量</span><br><span class="line">  pthread_exit(NULL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@learn ~]<span class="comment"># gcc varmutex.c -lpthread -o varmutex.out</span></span><br><span class="line">[root@learn ~]<span class="comment"># ./varmutex.out</span></span><br><span class="line">//招聘三个员工，一开始没有任务，大家睡大觉</span><br><span class="line">No task now! Thread 3491833600 is waiting!</span><br><span class="line">No task now! Thread 3483440896 is waiting!</span><br><span class="line">No task now! Thread 3475048192 is waiting!</span><br><span class="line">//老板开始分配任务了，第一批任务就一个，告诉三个员工醒来抢任务</span><br><span class="line">I am Boss, I assigned 1 tasks, I notify all coders!</span><br><span class="line">//员工一先发现有任务了，开始抢任务</span><br><span class="line">Have task now! Thread 3491833600 is grabing the task !</span><br><span class="line">//员工一抢到了任务A，开始干活</span><br><span class="line">Thread 3491833600 has a task A now! </span><br><span class="line">//员工二也发现有任务了，开始抢任务，不好意思，就一个任务，让人家抢走了，接着等吧</span><br><span class="line">Have task now! Thread 3483440896 is grabing the task!</span><br><span class="line">No task now! Thread 3483440896 is waiting!</span><br><span class="line">//员工三也发现有任务了，开始抢任务，你比员工二还慢，接着等吧</span><br><span class="line">Have task now! Thread 3475048192 is grabing the task !</span><br><span class="line">No task now! Thread 3475048192 is waiting!</span><br><span class="line">//员工一把任务做完了，又没有任务了，接着等待</span><br><span class="line">Thread 3491833600 finish the task A !</span><br><span class="line">No task now! Thread 3491833600 is waiting!</span><br><span class="line">//老板又有新任务了，这次是两个任务，叫醒他们</span><br><span class="line">I am Boss, I assigned 2 tasks, I notify all coders!</span><br><span class="line">//这次员工二比较积极，先开始抢，并且抢到了任务B</span><br><span class="line">Have task now! Thread 3483440896 is grabing the task !</span><br><span class="line">Thread 3483440896 has a task B now! </span><br><span class="line">//这次员工三也聪明了，赶紧抢，要不然没有年终奖了，终于抢到了任务C</span><br><span class="line">Have task now! Thread 3475048192 is grabing the task !</span><br><span class="line">Thread 3475048192 has a task C now! </span><br><span class="line">//员工一上次抢到了，这次抢的慢了，没有抢到，是不是飘了</span><br><span class="line">Have task now! Thread 3491833600 is grabing the task !</span><br><span class="line">No task now! Thread 3491833600 is waiting!</span><br><span class="line">//员工二做完了任务B，没有任务了，接着等待</span><br><span class="line">Thread 3483440896 finish the task B !</span><br><span class="line">No task now! Thread 3483440896 is waiting!</span><br><span class="line">//员工三做完了任务C，没有任务了，接着等待</span><br><span class="line">Thread 3475048192 finish the task C !</span><br><span class="line">No task now! Thread 3475048192 is waiting!</span><br><span class="line">//又来任务了，这次是三个任务，人人有份</span><br><span class="line">I am Boss, I assigned 3 tasks, I notify all coders!</span><br><span class="line">//员工一抢到了任务D，员工二抢到了任务E，员工三抢到了任务F</span><br><span class="line">Have task now! Thread 3491833600 is grabing the task !</span><br><span class="line">Thread 3491833600 has a task D now! </span><br><span class="line">Have task now! Thread 3483440896 is grabing the task !</span><br><span class="line">Thread 3483440896 has a task E now! </span><br><span class="line">Have task now! Thread 3475048192 is grabing the task !</span><br><span class="line">Thread 3475048192 has a task F now! </span><br><span class="line">//三个员工都完成了，然后都又开始等待</span><br><span class="line">Thread 3491833600 finish the task D !</span><br><span class="line">Thread 3483440896 finish the task E !</span><br><span class="line">Thread 3475048192 finish the task F !</span><br><span class="line">No task now! Thread 3491833600 is waiting!</span><br><span class="line">No task now! Thread 3483440896 is waiting!</span><br><span class="line">No task now! Thread 3475048192 is waiting!</span><br><span class="line">//公司活越来越多了，来了四个任务，赶紧干呀</span><br><span class="line">I am Boss, I assigned 4 tasks, I notify all coders!</span><br><span class="line">//员工一抢到了任务G，员工二抢到了任务H，员工三抢到了任务I</span><br><span class="line">Have task now! Thread 3491833600 is grabing the task !</span><br><span class="line">Thread 3491833600 has a task G now! </span><br><span class="line">Have task now! Thread 3483440896 is grabing the task !</span><br><span class="line">Thread 3483440896 has a task H now! </span><br><span class="line">Have task now! Thread 3475048192 is grabing the task !</span><br><span class="line">Thread 3475048192 has a task I now! </span><br><span class="line">//员工一和员工三先做完了，发现还有一个任务开始抢</span><br><span class="line">Thread 3491833600 finish the task G !</span><br><span class="line">Thread 3475048192 finish the task I !</span><br><span class="line">//员工三没抢到，接着等</span><br><span class="line">No task now! Thread 3475048192 is waiting!</span><br><span class="line">//员工一抢到了任务J，多做了一个任务</span><br><span class="line">Thread 3491833600 has a task J now! </span><br><span class="line">//员工二这才把任务H做完，黄花菜都凉了，接着等待吧</span><br><span class="line">Thread 3483440896 finish the task H !</span><br><span class="line">No task now! Thread 3483440896 is waiting!</span><br><span class="line">//员工一做完了任务J，接着等待</span><br><span class="line">Thread 3491833600 finish the task J !</span><br><span class="line">No task now! Thread 3491833600 is waiting!</span><br></pre></td></tr></table></figure>

<h3 id="线程的私有数据"><a href="#线程的私有数据" class="headerlink" title="线程的私有数据"></a>线程的私有数据</h3><p>与本地数据的区别在于，前者只是局部变量，私有数据是于线程创建的全局变量，亦非进程的全局变量。</p>
<h4 id="創建key对应的value"><a href="#創建key对应的value" class="headerlink" title="創建key对应的value"></a>創建key对应的value</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_setspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key, <span class="keyword">const</span> <span class="keyword">void</span> *value)</span></span></span><br></pre></td></tr></table></figure>

<h4 id="获得key对应的value"><a href="#获得key对应的value" class="headerlink" title="获得key对应的value"></a>获得key对应的value</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">pthread_getspecific</span><span class="params">(<span class="keyword">pthread_key_t</span> key)</span></span></span><br></pre></td></tr></table></figure>

<h2 id="0x03-结语"><a href="#0x03-结语" class="headerlink" title="0x03 结语"></a>0x03 结语</h2><hr>
<ol>
<li><p>主要阐述了三部分，what and why，how，when and where 。</p>
</li>
<li><p>当中how通过代码样例，示范了创建线程的步骤，创建并运行了一个多线程样例随机运行的情况。</p>
</li>
<li><p>在when and where中，通过比较，得出互斥锁对于保护线程操作数据的必要性。</p>
</li>
<li><p>之后在三种不同的线程数据中，重点解剖了有无变量控制下的互斥锁工作过程。</p>
</li>
<li><p>以下是总结贴图。</p>
<p> <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/summarytasks.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/summarytasks.png"></p>
</li>
<li><p>个人学习笔记，欢迎斧正。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>趣談Linux操作系統筆記</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Windows中正確地使用“真正的”Linux</title>
    <url>/Dev/2020-09-13-How-to-work-with-Unreliable-MS.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/terminalworkstation.png" width=50% /></center>

<p>本文简单介绍我的环境setup，随缘更新。</p>
<a id="more"></a>
<h2 id="0x00-初衷"><a href="#0x00-初衷" class="headerlink" title="0x00 初衷"></a>0x00 初衷</h2><p>出于种种原因，需要在Win10中的terminal中使用一個“完整版”的Linux。众所周知，WSL就是个残废，于是有了本文。</p>
<p>本文采用的方案則是：Windows Terminal  + Terminal settings + wsl + VMware VM + VMware自启脚本，实现开机自启no gui的ubuntu 18.04，其后运行terminal的時候无感知对该vm发起ssh。</p>
<h2 id="0x01-设置VMware虚拟机"><a href="#0x01-设置VMware虚拟机" class="headerlink" title="0x01 设置VMware虚拟机"></a>0x01 设置VMware虚拟机</h2><ul>
<li>我下载的是Desktop版，安装时选择Mini版本，时区选择HongKong，最后skip。</li>
</ul>
<p>（可以选中国时区，可以裝完，没想到还是有147个包，所以还是skip吧。</p>
<ul>
<li>配置桥接网络静态IP 192.168.99.96。</li>
</ul>
<h2 id="0x02-设置WSL"><a href="#0x02-设置WSL" class="headerlink" title="0x02 设置WSL"></a>0x02 设置WSL</h2><p>其实这一步不是必须，但是经过测试，powershell或者cmd在结束连接后，会在下一次连接时出現令人菲姐的[?1;0c符号，因<del>强迫症</del>而改用wsl.exe进行跳板连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Win10安装Ubuntu子系统教程（附安装图形化界面） - Windows10.Pro</span><br><span class="line">https:&#x2F;&#x2F;windows10.pro&#x2F;bash-on-ubuntu-on-windows&#x2F;</span><br></pre></td></tr></table></figure>

<p>之后在wsl中生成wsl公私钥并传送給VMware.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh-keygen -t rsa -b 2048 -C "m4d3bug@wsl"</span></span><br><span class="line"><span class="comment"># ssh-copy-id m4d3bug@192.168.99.96</span></span><br></pre></td></tr></table></figure>

<h2 id="0x03-设置Windows-Terminal"><a href="#0x03-设置Windows-Terminal" class="headerlink" title="0x03 设置Windows Terminal"></a>0x03 设置Windows Terminal</h2><ul>
<li><p><a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701" target="_blank" rel="noopener">下载</a>，安裝。下面是它的配置文件。（ctrl + ,）</p>
</li>
<li><p>由于Terminal默认启动powershell，需要修改default的guid，使其自动连接。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// This file was initially generated by Windows Terminal 1.0.1401.0</span><br><span class="line">// It should still be usable <span class="keyword">in</span> newer versions, but newer versions might have additional</span><br><span class="line">// settings, <span class="built_in">help</span> text, or changes that you will not see unless you clear this file</span><br><span class="line">// and <span class="built_in">let</span> us generate a new one <span class="keyword">for</span> you.</span><br><span class="line"></span><br><span class="line">// To view the default settings, hold <span class="string">"alt"</span> <span class="keyword">while</span> clicking on the <span class="string">"Settings"</span> button.</span><br><span class="line">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"<span class="variable">$schema</span>"</span>: <span class="string">"https://aka.ms/terminal-profiles-schema"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"defaultProfile"</span>: <span class="string">"&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;"</span>,</span><br><span class="line"></span><br><span class="line">    // You can add more global application settings here.</span><br><span class="line">    // To learn more about global settings, visit https://aka.ms/terminal-global-settings</span><br><span class="line"></span><br><span class="line">    // If enabled, selections are automatically copied to your clipboard.</span><br><span class="line">    <span class="string">"copyOnSelect"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // If enabled, formatted data is also copied to your clipboard</span><br><span class="line">    <span class="string">"copyFormatting"</span>: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    // A profile specifies a <span class="built_in">command</span> to execute paired with information about how it should look and feel.</span><br><span class="line">    // Each one of them will appear <span class="keyword">in</span> the <span class="string">'New Tab'</span> dropdown,</span><br><span class="line">    //   and can be invoked from the commandline with `wt.exe -p xxx`</span><br><span class="line">    // To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span><br><span class="line">    <span class="string">"profiles"</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"defaults"</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            // Put settings here that you want to apply to all profiles.</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"list"</span>:</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"guid"</span>: <span class="string">"&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;"</span>,</span><br><span class="line">                <span class="string">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"Ubuntu-18.04"</span>,</span><br><span class="line">                <span class="string">"source"</span>: <span class="string">"Windows.Terminal.Wsl"</span>,</span><br><span class="line">                <span class="string">"commandline"</span>: <span class="string">"wsl.exe ssh -X m4d3bug@192.168.99.96"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"guid"</span>: <span class="string">"&#123;a8202b0e-781a-5dab-98e2-e9d469a63619&#125;"</span>,</span><br><span class="line">                <span class="string">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"CentOS8"</span>,</span><br><span class="line">                <span class="string">"source"</span>: <span class="string">"Windows.Terminal.Wsl"</span>,</span><br><span class="line">                <span class="string">"commandline"</span>: <span class="string">"wsl.exe ssh -X m4d3bug@192.168.99.93"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // Make changes here to the powershell.exe profile.</span><br><span class="line">                <span class="string">"guid"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"WSL"</span>,</span><br><span class="line">                //<span class="string">"commandline"</span>: <span class="string">"powershell.exe wsl.exe ssh -X m4d3bug@192.168.99.96"</span>,</span><br><span class="line">                <span class="string">"commandline"</span>: <span class="string">"powershell.exe wsl.exe"</span>,</span><br><span class="line">                <span class="string">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                // Make changes here to the cmd.exe profi le.</span><br><span class="line">                <span class="string">"guid"</span>: <span class="string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"CMD"</span>,</span><br><span class="line">                <span class="string">"commandline"</span>: <span class="string">"cmd.exe"</span>,</span><br><span class="line">                <span class="string">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"guid"</span>: <span class="string">"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;"</span>,</span><br><span class="line">                <span class="string">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="string">"name"</span>: <span class="string">"Azure Cloud Shell"</span>,</span><br><span class="line">                <span class="string">"source"</span>: <span class="string">"Windows.Terminal.Azure"</span></span><br><span class="line">        &#125;,</span><br><span class="line">            </span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // Add custom color schemes to this array.</span><br><span class="line">    // To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span><br><span class="line">    <span class="string">"schemes"</span>: [],</span><br><span class="line"></span><br><span class="line">    // Add custom keybindings to this array.</span><br><span class="line">    // To unbind a key combination from your defaults.json, <span class="built_in">set</span> the <span class="built_in">command</span> to <span class="string">"unbound"</span>.</span><br><span class="line">    // To learn more about keybindings, visit https://aka.ms/terminal-keybindings</span><br><span class="line">    <span class="string">"keybindings"</span>:</span><br><span class="line">    [</span><br><span class="line">        // Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V <span class="keyword">in</span> your defaults.json.</span><br><span class="line">    // These two lines additionally <span class="built_in">bind</span> them to Ctrl+C and Ctrl+V.</span><br><span class="line">        // To learn more about selection, visit https://aka.ms/terminal-selection</span><br><span class="line">        &#123; <span class="string">"command"</span>: &#123;<span class="string">"action"</span>: <span class="string">"copy"</span>, <span class="string">"singleLine"</span>: <span class="literal">false</span> &#125;, <span class="string">"keys"</span>: <span class="string">"ctrl+c"</span> &#125;,</span><br><span class="line">    &#123; <span class="string">"command"</span>: <span class="string">"paste"</span>, <span class="string">"keys"</span>: <span class="string">"ctrl+v"</span> &#125;,</span><br><span class="line"></span><br><span class="line">        // Press Ctrl+Shift+F to open the search box</span><br><span class="line">        &#123; <span class="string">"command"</span>: <span class="string">"find"</span>, <span class="string">"keys"</span>: <span class="string">"ctrl+shift+f"</span> &#125;,</span><br><span class="line"></span><br><span class="line">        // Press Alt+Shift+D to open a new pane.</span><br><span class="line">        // - <span class="string">"split"</span>: <span class="string">"auto"</span> makes this pane open <span class="keyword">in</span> the direction that provides the most surface area.</span><br><span class="line">        // - <span class="string">"splitMode"</span>: <span class="string">"duplicate"</span> makes the new pane use the focused pane<span class="string">'s profile.</span></span><br><span class="line"><span class="string">        // To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line"><span class="string">        &#123; "command": &#123; "action": "splitPane", "split": "auto", "splitMode": "duplicate" &#125;, "keys": "alt+shift+d" &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="0x04-VMware-VM开机自启"><a href="#0x04-VMware-VM开机自启" class="headerlink" title="0x04 VMware VM开机自启"></a>0x04 VMware VM开机自启</h2><ul>
<li><p>创建脚本，注意替换自己的路径以及双引号</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files (x86)\VMware\VMware Workstation\vmrun.exe&quot; start &quot;G:\Virtual Machines\ubuntu18.madebug.net\ubuntu18.madebug.net.vmx&quot; nogui</span><br></pre></td></tr></table></figure>
</li>
<li><p>之后保存在以下路径：</p>
  <figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">C:<span class="symbol">\P</span>rogramData<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\S</span>tart Menu<span class="symbol">\P</span>rograms<span class="symbol">\S</span>tartUp</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="0x05-个人Ubuntu的使用设置"><a href="#0x05-个人Ubuntu的使用设置" class="headerlink" title="0x05 个人Ubuntu的使用设置"></a>0x05 个人Ubuntu的使用设置</h2><ul>
<li><p>关闭sudo的密码验证</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo visudo </span><br><span class="line">26 %sudo   ALL=(ALL:ALL) NOPASSWD:ALL</span><br><span class="line">$ sudo hostnamectl <span class="built_in">set</span>-hostname ubuntu18.madebug.net</span><br><span class="line">$ sudo vim /etc/hosts</span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">127.0.0.1       ubuntu18</span><br><span class="line">127.0.0.1       ubuntu18.madebug.net</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝fish</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install fish</span><br></pre></td></tr></table></figure>
</li>
<li><p>安裝omf</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -x http://192.168.99.99:1081 -L https://get.oh-my.fish | fish</span><br><span class="line">$ chsh -s /usr/bin/fish</span><br></pre></td></tr></table></figure>
</li>
<li><p>为m4d3bug的fish shell和root的bash shell设置proxy</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   $ cat /etc/profile.d/bash_proxy.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">   <span class="keyword">function</span> <span class="function"><span class="title">proxy_off</span></span>() &#123;</span><br><span class="line">        <span class="built_in">unset</span> HTTP_PROXY</span><br><span class="line">        <span class="built_in">unset</span> HTTPS_PROXY</span><br><span class="line">        <span class="built_in">unset</span> FTP_PROXY</span><br><span class="line">        <span class="built_in">unset</span> SOCKS5_PORXY</span><br><span class="line">        <span class="built_in">unset</span> http_proxy</span><br><span class="line">        <span class="built_in">unset</span> https_proxy</span><br><span class="line">        <span class="built_in">unset</span> ftp_proxy</span><br><span class="line">        <span class="built_in">unset</span> socks5_proxy</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="function"><span class="title">proxy_on</span></span>() &#123;</span><br><span class="line">        <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">        <span class="built_in">export</span> MY_PROXY_URL=<span class="string">"http://192.168.99.99:1081"</span></span><br><span class="line">        <span class="built_in">export</span> HTTP_PROXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> HTTPS_PROXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> FTP_PROXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> SOCKS5_PORXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> http_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> https_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> ftp_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> socks5_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">   &#125;</span><br><span class="line">   $ cat /etc/fish/conf.d/proxy.fish</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">   <span class="keyword">function</span> proxy_off</span><br><span class="line">        <span class="built_in">set</span> -e HTTP_PROXY</span><br><span class="line">        <span class="built_in">set</span> -e HTTPS_PROXY</span><br><span class="line">        <span class="built_in">set</span> -e FTP_PROXY</span><br><span class="line">        <span class="built_in">set</span> -e SOCKS5_PORXY</span><br><span class="line">        <span class="built_in">set</span> -e http_proxy</span><br><span class="line">        <span class="built_in">set</span> -e https_proxy</span><br><span class="line">        <span class="built_in">set</span> -e ftp_proxy</span><br><span class="line">        <span class="built_in">set</span> -e socks5_proxy</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"已关闭代理"</span></span><br><span class="line">   end</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> proxy_on</span><br><span class="line">        <span class="built_in">export</span> no_proxy=<span class="string">"localhost,127.0.0.1,localaddress,.localdomain.com"</span></span><br><span class="line">        <span class="built_in">export</span> MY_PROXY_URL=<span class="string">"http://192.168.99.99:1081"</span></span><br><span class="line">        <span class="built_in">export</span> HTTP_PROXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> HTTPS_PROXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> FTP_PROXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> SOCKS5_PORXY=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> http_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> https_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> ftp_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">export</span> socks5_proxy=<span class="variable">$MY_PROXY_URL</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">"已开启代理"</span></span><br><span class="line">   end</span><br><span class="line">   $ npm config <span class="built_in">set</span> proxy http://192.168.99.99:1081</span><br><span class="line">   $ npm config <span class="built_in">set</span> https-proxy http://192.168.99.99:1081</span><br><span class="line">   $ git config --global http.proxy http://192.168.99.99:1081</span><br><span class="line">   $ git config --global https.proxy http://192.168.99.99:1081</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置bash prompt，root用红色提示</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ubuntu</span><br><span class="line"><span class="comment"># cat &gt;&gt; .profile &lt;&lt; EOF</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prompt_color_on</span></span> ()&#123;</span><br><span class="line">        <span class="keyword">if</span> [ $(id -u) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#               export PROMPT='%F&#123;10&#125;%n@%m%f:%F&#123;12&#125;%~%f%# '</span></span><br><span class="line">                <span class="built_in">export</span> PROMPT=<span class="string">"%F&#123;135&#125;%n%f@%F&#123;166&#125;%m%f %F&#123;118&#125;%~%f %# "</span></span><br><span class="line">                <span class="built_in">export</span> PS1=<span class="string">'\[\e[01;31m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\w\[\e[00m\]\# '</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">#               export PROMPT='%F&#123;10&#125;%n@%m%f:%F&#123;12&#125;%~%f\$ '</span></span><br><span class="line">                <span class="built_in">export</span> PROMPT=<span class="string">"%F&#123;135&#125;%n%f@%F&#123;166&#125;%m%f %F&#123;118&#125;%~%f %$ "</span></span><br><span class="line">                <span class="built_in">export</span> PS1=<span class="string">'\[\e[01;32m\]\u@\h\[\e[00m\]:\[\e[01;34m\]\w\[\e[00m\]\$ '</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$BASH_VERSION</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        prompt_color_on</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        prompt_color_on</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">CentOS</span><br><span class="line"><span class="comment"># cat &gt;&gt; /etc/profile.d/prompt.sh &lt;&lt; EOF</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">prompt_color_on</span></span> ()&#123;</span><br><span class="line">        <span class="keyword">if</span> [ $(id -u) -eq 0 ]; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#                export PROMPT='%F&#123;10&#125;%n@%m%f:%F&#123;12&#125;%~%f%# '</span></span><br><span class="line"><span class="comment">#                export PROMPT="%F&#123;135&#125;%n%f@%F&#123;166&#125;%m%f %F&#123;118&#125;%~%f \# "</span></span><br><span class="line">                <span class="built_in">export</span> PS1=<span class="string">'[\[\e[01;31m\]\u@\h\[\e[01;31m\] \[\e[01;31m\]\w\[\e[00m\]]# '</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"><span class="comment">#                export PROMPT='%F&#123;10&#125;%n@%m%f:%F&#123;12&#125;%~%f\$ '</span></span><br><span class="line"><span class="comment">#                export PROMPT="%F&#123;135&#125;%n%f@%F&#123;166&#125;%m%f %F&#123;118&#125;%~%f %$ "</span></span><br><span class="line">                <span class="built_in">export</span> PS1=<span class="string">'[\[\e[01;32m\]\u@\h\[\e[00m\] \[\e[01;34m\]\w\[\e[00m\]\$ '</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$BASH_VERSION</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        prompt_color_on</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">        prompt_color_on</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置byobu</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install byobu -y</span><br><span class="line">$ byobu-select-backend</span><br><span class="line">1 tmux</span><br><span class="line">$ byobu-enable</span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/43920548" target="_blank" rel="noopener">设置虚拟机共享宿主机目录</a>，能share自然不copy。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/sharewithVM.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/sharewithVM.png"></p>
<h2 id="0x06-设置x11转发"><a href="#0x06-设置x11转发" class="headerlink" title="0x06 设置x11转发"></a>0x06 设置x11转发</h2><p><a href="https://superuser.com/questions/1332709/setting-up-x11-forwarding-over-ssh-on-windows-10-subsystem-for-linux" target="_blank" rel="noopener">xorg - Setting up X11 forwarding over SSH on Windows 10 Subsystem for Linux? - Super User</a></p>
<h2 id="0x07-结语"><a href="#0x07-结语" class="headerlink" title="0x07 结语"></a>0x07 结语</h2><p>摆脱wsl一大步</p>
<h2 id="0x08-更新"><a href="#0x08-更新" class="headerlink" title="0x08 更新"></a>0x08 更新</h2><p>2021/07/10 真的有更新，换成Ubuntu20.04了，并且把fish换成了zsh，配置文件直接拷了kali的出来，高亮插件和自动补全的都有。 并且设定了新的自动挂载分享文件。</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.host:/         /mnt/hgfs               fuse.vmhgfs-fuse allow_other,defaults,nonempty   0       0</span><br></pre></td></tr></table></figure></code></pre><h2 id="0x09-鸣谢"><a href="#0x09-鸣谢" class="headerlink" title="0x09 鸣谢"></a>0x09 鸣谢</h2><ul>
<li><a href="https://ywnz.com/linuxjc/2024.html" target="_blank" rel="noopener">Ubuntu Server 18.04下sudo速度很慢原因及解决办法_Linux教程_云网牛站</a></li>
<li><a href="https://windows10.pro/bash-on-ubuntu-on-windows/" target="_blank" rel="noopener">Win10安装Ubuntu子系统教程（附安装图形化界面） - Windows10.Pro</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/36200924?group_id=973992048701894656" target="_blank" rel="noopener">[18.04/美化] 总结一下Ubuntu安装完之后都会做的事情 - 知乎</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43920548" target="_blank" rel="noopener">[VMware]主机与虚拟机共享文件 - 知乎</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1666878" target="_blank" rel="noopener">Windows 开机自启 VMware 虚拟机 - 云+社区 - 腾讯云</a></li>
<li><a href="https://github.com/oh-my-fish/oh-my-fish](https://github.com/oh-my-fish/oh-my-fish)" target="_blank" rel="noopener">oh-my-fish/oh-my-fish: The Fish Shell Framework</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/51008087" target="_blank" rel="noopener">你不需要花哨的命令提示符 - 知乎</a></li>
<li><a href="https://stackoverflow.com/questions/30447631/fish-shell-eq-and-a-in-if-statement" target="_blank" rel="noopener">git - fish shell -eq and -a in if statement - Stack Overflow</a></li>
<li><a href="https://stackoverflow.com/questions/30703860/how-do-i-unset-a-variable-in-the-fish-shell" target="_blank" rel="noopener">How do I unset a variable in the fish shell? - Stack Overflow</a></li>
</ul>
]]></content>
      <categories>
        <category>Dev </category>
      </categories>
      <tags>
        <tag>Ubuntu </tag>
        <tag>fish </tag>
        <tag>MicroSoft</tag>
        <tag>WSL </tag>
        <tag>Proxy </tag>
        <tag>VMware </tag>
        <tag>Nodejs </tag>
        <tag>npm </tag>
        <tag>Windows </tag>
        <tag>byobu </tag>
        <tag>apt </tag>
        <tag>bash </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(Controller模型)</title>
    <url>/Ops/2022-02-19-K8s-Controller-explaination.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/operator-controller-reconciliation.jpeg" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Q：何为Controller？</p>
<a id="more"></a>

<p>A：把K8s想象成大吊臂，Container是一个个集装箱，Pod是对Container的吊环。Controller就是大吊臂的各种工作逻辑。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">它们都归kube-controller-manager管</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> kubernetes/pkg/controller/</span><br><span class="line">$ ls -d */              </span><br><span class="line">deployment/             job/                    podautoscaler/          </span><br><span class="line">cloud/                  disruption/             namespace/              </span><br><span class="line">replicaset/             serviceaccount/         volume/</span><br><span class="line">cronjob/                garbagecollector/       nodelifecycle/          replication/            statefulset/            daemon/</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="0x01-Controller工作原理"><a href="#0x01-Controller工作原理" class="headerlink" title="0x01 Controller工作原理"></a>0x01 Controller工作原理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">  实际状态 := 获取集群中对象X的实际状态（Actual State） &lt;---kubelet汇报 / etcd / Controller自己收集</span><br><span class="line">  期望状态 := 获取集群中对象X的期望状态（Desired State）&lt;---Yaml文件的定义 / </span><br><span class="line">  <span class="keyword">if</span> 实际状态 == 期望状态&#123;</span><br><span class="line">    什么都不做</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    执行编排动作，将实际状态调整为期望状态</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Control loop: 整个Controller的工作过程其实分为三步。用Deployment举例<ul>
<li>获取实际状态，读etcd然后统计其个数。</li>
<li>获取期望状态，关注Replicas字段。</li>
<li>调谐（Reconcile），循环（Reconcile Loop / Sync Loop）确定编排动作（创建 / 删除）。</li>
</ul>
</li>
</ul>
<p>上述过程，充分体现“声明式”，“面向API对象编程”。</p>
<h2 id="0x02-Controller的对象"><a href="#0x02-Controller的对象" class="headerlink" title="0x02 Controller的对象"></a>0x02 Controller的对象</h2><p>Controller自身是个对象，但是对象也有对象。</p>
<p>画个楚河汉界。一图胜千言。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1                   </span><br><span class="line">kind: Deployment                        </span><br><span class="line">metadata:                               </span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  replicas: 2           ^^^ Controller的定义（期望状态</span><br><span class="line">----------------------------自制分割线用于界限-----------------------------</span><br><span class="line">  template:             vvv Controller的对象（被控制对象模版PodTemplate</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>简单介绍了Controller，它的概念，工作原理，还有它的对象。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Controller </tag>
      </tags>
  </entry>
  <entry>
    <title>基於Zerotier搭建&quot;跨供應商&quot;的K8S集群带阻嘗試</title>
    <url>/Ops/2020-06-21-Kubernetes-Dislikes-ZeroTier.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/kubernetes%26zerotier.png" width=50% /></center>

<p>本文旨在嘗試驗證自己的一個<del><font color=#808080>奇葩</font></del>想法。</p>
<a id="more"></a>

<h2 id="0x00-機器情況"><a href="#0x00-機器情況" class="headerlink" title="0x00 機器情況"></a>0x00 機器情況</h2><hr>
<table>
<thead>
<tr>
<th>供應商</th>
<th>規格</th>
<th>機房位置</th>
</tr>
</thead>
<tbody><tr>
<td>騰訊雲</td>
<td>2C8G</td>
<td>中國上海</td>
</tr>
<tr>
<td>搬瓦工</td>
<td>2C2G</td>
<td>美國洛杉磯</td>
</tr>
<tr>
<td>Ucloud</td>
<td>1C1G</td>
<td>中國香港</td>
</tr>
</tbody></table>
<h2 id="0x01-ZeroTier部分"><a href="#0x01-ZeroTier部分" class="headerlink" title="0x01 ZeroTier部分"></a>0x01 ZeroTier部分</h2><hr>
<h3 id="加入ZeroTier組網"><a href="#加入ZeroTier組網" class="headerlink" title="加入ZeroTier組網"></a>加入ZeroTier組網</h3><h4 id="安裝軟體"><a href="#安裝軟體" class="headerlink" title="安裝軟體"></a>安裝軟體</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl -s https://install.zerotier.com/ | sudo bash</span></span><br></pre></td></tr></table></figure>

<h4 id="加入網絡"><a href="#加入網絡" class="headerlink" title="加入網絡"></a>加入網絡</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># zerotier-cli join xxxxxxxxxxxxxxxx</span></span><br></pre></td></tr></table></figure>

<h4 id="機器網絡狀況"><a href="#機器網絡狀況" class="headerlink" title="機器網絡狀況"></a>機器網絡狀況</h4><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/machinesNetworks.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/machinesNetworks.png"></p>
<h4 id="寫入靜態IP-和hostname"><a href="#寫入靜態IP-和hostname" class="headerlink" title="寫入靜態IP 和hostname"></a>寫入靜態IP 和hostname</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &gt;&gt; /etc/hosts &lt;&lt; EOF</span></span><br><span class="line">10.9.8.118 master.m4d3bug.com master </span><br><span class="line">10.9.8.65  node1.m4d3bug.com  node1</span><br><span class="line">10.9.8.129 node2.m4d3bug.com  node2</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># hostnamectl set-hostname xxx.m4d3bug.com</span></span><br></pre></td></tr></table></figure>

<h2 id="0x02-K8S-部分"><a href="#0x02-K8S-部分" class="headerlink" title="0x02 K8S 部分"></a>0x02 K8S 部分</h2><hr>
<h3 id="系統預設定"><a href="#系統預設定" class="headerlink" title="系統預設定"></a>系統預設定</h3><h4 id="確保selinux為寬容模式"><a href="#確保selinux為寬容模式" class="headerlink" title="確保selinux為寬容模式"></a>確保selinux為寬容模式</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># setenforce 0</span></span><br><span class="line">setenforce: SELinux is disabled</span><br></pre></td></tr></table></figure>

<h4 id="關閉firewalld"><a href="#關閉firewalld" class="headerlink" title="關閉firewalld"></a>關閉firewalld</h4><p>云供應商們基本都關掉了，所以沒什麽回顯。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># systemctl disable firewalld</span></span><br><span class="line"><span class="comment"># systemctl stop firewalld</span></span><br></pre></td></tr></table></figure>

<h4 id="选择性關閉swap"><a href="#选择性關閉swap" class="headerlink" title="选择性關閉swap"></a>选择性關閉swap</h4><p>在master節點以外操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># swapoff -a</span></span><br><span class="line"><span class="comment"># vi /etc/fstab</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># disable swap line</span></span><br><span class="line"><span class="comment">#/swap none swap sw 0 0</span></span><br><span class="line"><span class="comment"># mount -a</span></span><br></pre></td></tr></table></figure>

<h4 id="設置并啓用内核參數"><a href="#設置并啓用内核參數" class="headerlink" title="設置并啓用内核參數"></a>設置并啓用内核參數</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &lt;&lt;EOF &gt; /etc/sysctl.d/k8s.conf</span></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># modprobe br_netfilter</span></span><br><span class="line"><span class="comment"># sysctl -p /etc/sysctl.d/k8s.conf</span></span><br></pre></td></tr></table></figure>

<h3 id="開始安裝"><a href="#開始安裝" class="headerlink" title="開始安裝"></a>開始安裝</h3><h4 id="安裝Docker軟體"><a href="#安裝Docker軟體" class="headerlink" title="安裝Docker軟體"></a>安裝Docker軟體</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># yum install -y docker-ce docker-ce-cli containerd.io</span></span><br><span class="line"><span class="comment"># docker -v </span></span><br><span class="line">Docker version 19.03.12, build 48a66213fe</span><br><span class="line"><span class="comment"># systemctl start docker</span></span><br><span class="line"><span class="comment"># systemctl enable docker</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure>

<h4 id="加入代理設定到Docker中"><a href="#加入代理設定到Docker中" class="headerlink" title="加入代理設定到Docker中"></a>加入代理設定到Docker中</h4><p>順便説一嘴，可以在ZeroTier組網裏起一個代理。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mkdir /usr/lib/systemd/system/docker.service.d</span></span><br><span class="line"><span class="comment"># cat &gt;&gt; /usr/lib/systemd/system/docker.service.d/http-proxy.conf &lt;&lt; EOF</span></span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">"HTTP_PROXY=http://10.9.8.10:1081/"</span></span><br><span class="line">Environment=<span class="string">"HTTPS_PROXY=http://10.9.8.10:1081/"</span></span><br><span class="line">Environment=<span class="string">"NO_PROXY=localhost,localhost.localdomain,localhost4,localhost4.localdomain4,10.0.0.0/8"</span></span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">    <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">    <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="comment"># systemctl daemon-reload</span></span><br><span class="line"><span class="comment"># systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<h4 id="加入谷歌倉庫"><a href="#加入谷歌倉庫" class="headerlink" title="加入谷歌倉庫"></a>加入谷歌倉庫</h4><p>同樣加入ZeroTier中的代理地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat &lt;&lt;'EOF' &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg</span><br><span class="line">proxy=http://10.9.8.10:1081</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="獲得必須的軟體及鏡像"><a href="#獲得必須的軟體及鏡像" class="headerlink" title="獲得必須的軟體及鏡像"></a>獲得必須的軟體及鏡像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install kubeadm kubelet kubectl</span></span><br><span class="line"><span class="comment">#  rpm -qa |grep kube*</span></span><br><span class="line">kubectl-1.18.8-0.x86_64</span><br><span class="line">kubernetes-cni-0.8.6-0.x86_64</span><br><span class="line">kubeadm-1.18.8-0.x86_64</span><br><span class="line">kubelet-1.18.8-0.x86_64</span><br><span class="line"><span class="comment"># systemctl enable kubelet</span></span><br><span class="line"><span class="comment"># kubeadm config images pull</span></span><br></pre></td></tr></table></figure>

<p>master節點只是一隻小鷄鷄，所以就不關它的swap了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># vim &#x2F;etc&#x2F;sysconfig&#x2F;kubelet</span><br><span class="line">KUBELET_EXTRA_ARGS&#x3D;--fail-swap-on&#x3D;false</span><br></pre></td></tr></table></figure>

<h4 id="安裝集群"><a href="#安裝集群" class="headerlink" title="安裝集群"></a>安裝集群</h4><p>在v1.8.0之後的版本，kubeadm提供了一種<a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">分階段的構建方式</a>，構建etcd是其中的一個phase，在啓動前我們需要對其中的參數進行修改。</p>
<ul>
<li><p>定制該版本的kubeadm-config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm config print init-defaults  &gt; kubeadm-config.yaml</span></span><br><span class="line"><span class="comment"># vim kubeadm-config.yaml</span></span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">bootstrapTokens:</span><br><span class="line">- groups:</span><br><span class="line">  - system:bootstrappers:kubeadm:default-node-token</span><br><span class="line">  token: abcdef.0123456789abcdef</span><br><span class="line">  ttl: 24h0m0s</span><br><span class="line">  usages:</span><br><span class="line">  - signing</span><br><span class="line">  - authentication</span><br><span class="line">kind: InitConfiguration</span><br><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 10.9.8.118             &lt;---網卡ip</span><br><span class="line">  bindPort: 6443</span><br><span class="line">nodeRegistration:</span><br><span class="line">  criSocket: /var/run/dockershim.sock</span><br><span class="line">  name: master.m4d3bug.com</span><br><span class="line">  taints:</span><br><span class="line">  - effect: NoSchedule</span><br><span class="line">    key: node-role.kubernetes.io/master</span><br><span class="line">---</span><br><span class="line">apiServer:</span><br><span class="line">  timeoutForControlPlane: 4m0s</span><br><span class="line">apiVersion: kubeadm.k8s.io/v1beta2</span><br><span class="line">certificatesDir: /etc/kubernetes/pki</span><br><span class="line">clusterName: kubernetes</span><br><span class="line">controllerManager: &#123;&#125;</span><br><span class="line">dns:</span><br><span class="line">  <span class="built_in">type</span>: CoreDNS</span><br><span class="line">etcd:</span><br><span class="line">  <span class="built_in">local</span>:</span><br><span class="line">    dataDir: /var/lib/etcd</span><br><span class="line">imageRepository: k8s.gcr.io</span><br><span class="line">kind: ClusterConfiguration</span><br><span class="line">kubernetesVersion: v1.18.0</span><br><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br><span class="line">  podSubnet: 10.244.0.0/16                 &lt;---pod子網範圍</span><br><span class="line">scheduler: &#123;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>preflight階段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init phase preflight --config kubeadm-config.yaml --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Swap</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>kubelet-start階段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init phase kubelet-start --config kubeadm-config.yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cert階段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init phase certs all --config kubeadm-config.yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>kubeconfig階段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init phase kubeconfig all --config kubeadm-config.yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>control-plane階段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init phase control-plane all --config kubeadm-config.yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>etcd 階段 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubeadm init phase etcd local --config kubeadm-config.yaml</span></span><br><span class="line"><span class="comment"># vim /etc/kubernetes/manifests/etcd.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubeadm.kubernetes.io/etcd.advertise-client-urls: https://10.9.8.118:2379</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    component: etcd</span><br><span class="line">    tier: control-plane</span><br><span class="line">  name: etcd</span><br><span class="line">  namespace: kube-system</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - <span class="built_in">command</span>:</span><br><span class="line">    - etcd</span><br><span class="line">    - --advertise-client-urls=https://10.9.8.118:2379</span><br><span class="line">    - --cert-file=/etc/kubernetes/pki/etcd/server.crt</span><br><span class="line">    - --client-cert-auth=<span class="literal">true</span></span><br><span class="line">    - --data-dir=/var/lib/etcd</span><br><span class="line">    - --initial-advertise-peer-urls=https://10.9.8.118:2380</span><br><span class="line">    - --initial-cluster=master.m4d3bug.com=https://10.9.8.118:2380</span><br><span class="line">    - --key-file=/etc/kubernetes/pki/etcd/server.key</span><br><span class="line">    - --listen-client-urls=https://0.0.0.0:2379        &lt;--- 改爲0.0.0.0</span><br><span class="line">    - --listen-metrics-urls=http://127.0.0.1:2381</span><br><span class="line">    - --listen-peer-urls=https://0.0.0.0:2380          &lt;--- 改爲0.0.0.0</span><br><span class="line">    - --name=master.m4d3bug.com</span><br><span class="line">    - --peer-cert-file=/etc/kubernetes/pki/etcd/peer.crt</span><br><span class="line">    - --peer-client-cert-auth=<span class="literal">true</span></span><br><span class="line">    - --peer-key-file=/etc/kubernetes/pki/etcd/peer.key</span><br><span class="line">    - --peer-trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    - --snapshot-count=10000</span><br><span class="line">    - --trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br><span class="line">    image: k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    livenessProbe:</span><br><span class="line">      failureThreshold: 8</span><br><span class="line">      httpGet:</span><br><span class="line">        host: 127.0.0.1</span><br><span class="line">        path: /health</span><br><span class="line">        port: 2381</span><br><span class="line">        scheme: HTTP</span><br><span class="line">      initialDelaySeconds: 15</span><br><span class="line">      timeoutSeconds: 15</span><br><span class="line">    name: etcd</span><br><span class="line">    resources: &#123;&#125;</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - mountPath: /var/lib/etcd</span><br><span class="line">      name: etcd-data</span><br><span class="line">    - mountPath: /etc/kubernetes/pki/etcd</span><br><span class="line">      name: etcd-certs</span><br><span class="line">  hostNetwork: <span class="literal">true</span></span><br><span class="line">  priorityClassName: system-cluster-critical</span><br><span class="line">  volumes:</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /etc/kubernetes/pki/etcd</span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: etcd-certs</span><br><span class="line">  - hostPath:</span><br><span class="line">      path: /var/lib/etcd</span><br><span class="line">      <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">    name: etcd-data</span><br><span class="line">status: &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># echo "export KUBECONFIG=/etc/kubernetes/admin.conf" &gt;&gt; ~/.bash_profile</span></span><br><span class="line"><span class="comment"># source ~/.bash_profile</span></span><br><span class="line"><span class="comment"># kubectl apply -f /etc/kubernetes/manifests/etcd.yaml</span></span><br><span class="line"><span class="comment"># kubeadm init --skip-phases=preflight,certs,kubeconfig,kubelet-start,control-plane,etcd --config kubeadm-config.yaml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>之後就如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.9.8.118:6443 --token abcdef.0123456789abcdef \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:f14e90eda52b285b41ddb5d34a4dcf21f55ed66831015c4ca1a996cf17754143</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署flannel </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span></span><br><span class="line"><span class="comment"># kubectl apply -f kube-flannel.yml</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="排障"><a href="#排障" class="headerlink" title="排障"></a>排障</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看pod日志</span><br><span class="line"><span class="comment"># kubectl --namespace kube-system logs kube-controller-manager-master.m4d3bug.com</span></span><br><span class="line">查看pod的過程</span><br><span class="line"><span class="comment"># kubectl describe pod kube-controller-manager-master.m4d3bug.com --namespace=kube-system</span></span><br><span class="line">打印加入的命令</span><br><span class="line"><span class="comment"># kubeadm token create --print-join-command</span></span><br><span class="line">重置集群</span><br><span class="line"><span class="comment"># kubeadm reset</span></span><br><span class="line"><span class="comment"># ifconfig cni0 down</span></span><br><span class="line"><span class="comment"># ip link delete cni0</span></span><br><span class="line"><span class="comment"># ifconfig flannel.1 down</span></span><br><span class="line"><span class="comment"># ip link delete flannel.1</span></span><br><span class="line"><span class="comment"># rm -rf /var/lib/cni/</span></span><br><span class="line"><span class="comment"># rm -rf /var/lib/etcd</span></span><br><span class="line"><span class="comment"># rm -rf /etc/cni/net.d</span></span><br></pre></td></tr></table></figure>

<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><hr>
<p>一套下來，UDP的通信可靠性還是名不虛傳，除非等待HTTP3.0/quic協議普及吧，這樣子運營商也許就不會對UDP那麽狠了，所以奉勸各位還是別折騰這條路了，後面或許會嘗試使用<a href="https://feisky.xyz/posts/2015-03-02-setting-up-gre-for-kubernetes/" target="_blank" rel="noopener">GRE方式</a>來再嘗試一次。以下是部署后情況：</p>
<p>可以見到，即使加入成功也都是充斥著大量因爲timeout造成的failed的信息在其中。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/failedzerotier.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/failedzerotier.png"></p>
<p>其後，通過睡了一覺，白天時分，QOS緩和的時候，順利將剩下搬瓦工節點加入。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/k8s-status.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/k8s-status.png"></p>
<p>但也證明，SDN跨運營商，以node為最小單位組建K8S集群是可行的，但是需要💰。因此不難理解爲什麽現在混合雲架構都是傾向于以一個帶master節點集群為最小單位組建集群。<del><font color=#808080>或許可以試試每個節點都是單master的去污點化部署。</font></del></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/k8scurl.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/k8scurl.png"></p>
<h2 id="鳴謝"><a href="#鳴謝" class="headerlink" title="鳴謝"></a>鳴謝</h2><hr>
<ul>
<li><a href="https://zhangguanzhang.github.io/2018/09/24/k8s-some-vpc-cluster/" target="_blank" rel="noopener">跨VPC或者跨云供应商搭建K8S集群正确姿势</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/106793809" target="_blank" rel="noopener">跨VPC或者跨云供应商搭建K8S集群正确姿势-番外篇</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/74134318" target="_blank" rel="noopener">Kubernetes——部署基于公网的k8s集群</a></li>
<li><a href="https://developer.aliyun.com/article/763983" target="_blank" rel="noopener">使用 kubeadm 快速部署 K8S V1.18</a></li>
<li><a href="http://www.zsythink.net/archives/1199/" target="_blank" rel="noopener">iptables详解（1）：iptables概念</a></li>
<li><a href="https://mp.weixin.qq.com/s/PD1CCkKZgtZD7pAZEqF-rw" target="_blank" rel="noopener">10 分钟部署一个 Kubernetes 集群</a></li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Network </tag>
        <tag>UDP </tag>
        <tag>P2P </tag>
        <tag>Zerotier </tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能調優實戰筆記I</title>
    <url>/Ops/2019-09-01-Linux-Performance-Tuning-study-notes-I.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>

<a id="more"></a>

<h2 id="0x00-什么是性能问题"><a href="#0x00-什么是性能问题" class="headerlink" title="0x00 什么是性能问题"></a>0x00 什么是性能问题</h2><hr>
<p>性能问题的本质，就是系统资源已经达到瓶颈，但请求的处理却还不够快，无法支撑更多的请求。</p>
<p>性能分析的本质，就是找出应用或系统的瓶颈，并设法去避免或者缓解它们。</p>
<h2 id="0x01-不同侧分析问题的次序"><a href="#0x01-不同侧分析问题的次序" class="headerlink" title="0x01 不同侧分析问题的次序"></a>0x01 不同侧分析问题的次序</h2><hr>
<center><font size="5"><B>↓从应用侧（吞吐量，延迟……）↓</B></font></center>

<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20200411112804.png" width=60% /></center>

<center><font size="5"><B>↑从系统侧（CPU, 内存……）↑</B></font></center>

<h2 id="0x02-Linux各方面相关的工具"><a href="#0x02-Linux各方面相关的工具" class="headerlink" title="0x02 Linux各方面相关的工具"></a>0x02 Linux各方面相关的工具</h2><hr>
<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20200411112954.png" width=120% /></center>

<h2 id="0x03-Linux调优的脑图"><a href="#0x03-Linux调优的脑图" class="headerlink" title="0x03 Linux调优的脑图"></a>0x03 Linux调优的脑图</h2><hr>
<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20200411113050.png" width=100% /></center>

<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04 结语"></a>0x04 结语</h2><hr>
<ul>
<li><em>High concurrency means a big throughput, and fast response means a small delay.</em> 高并發就是吞吐大，响应快就是延时小。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Performance Tuning </tag>
        <tag>Performance Analysis </tag>
        <tag>Linux性能調優實戰筆記 </tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能調優實戰筆記III（CPU上下文切換-上）</title>
    <url>/Ops/2021-02-22-Linux-Performance-Tuning-study-notes-III-part1.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>

<p>本文旨在剖析CPU上下文切換的五個W。</p>
<a id="more"></a>

<h2 id="0x00-概念-what-and-why"><a href="#0x00-概念-what-and-why" class="headerlink" title="0x00 概念(what and why?)"></a>0x00 概念(what and why?)</h2><hr>
<ul>
<li>Linux在支持遠超CPU數的任務時，背後在<strong>頻繁為任務輪流切換CPU</strong>。</li>
<li>每次切換均需Linux為CPU（<strong>保存/預設</strong>）<strong>CPU寄存器和程序計數器</strong><ul>
<li><strong>CPU寄存器：</strong>CPU内置高速小内存。</li>
<li><strong>程序計數器：</strong>CPU内置指令暫存器。</li>
</ul>
</li>
<li>誘發場景：<strong><a href="https://blog.madebug.net/Ops/2020-06-25-Funny-With-Linux-I-about-progress.html#0x02-%E5%9F%B7%E8%A1%8C%E5%87%BD%E6%95%B8%E7%9A%84%E4%B8%BB%E9%AB%94%EF%BC%9A%E9%80%B2%E7%A8%8B">進程</a>の上下文切換、<a href="https://blog.madebug.net/Ops/2020-06-29-Funny-With-Linux-II-about-multi-tasks.html">綫程</a>の上下文切換以及中斷の上下文切換。</strong></li>
</ul>
<h2 id="0x01-類型-who-when-and-where"><a href="#0x01-類型-who-when-and-where" class="headerlink" title="0x01 類型(who, when and where?)"></a>0x01 類型(who, when and where?)</h2><hr>
<h3 id="進程の上下文切換"><a href="#進程の上下文切換" class="headerlink" title="進程の上下文切換"></a>進程の上下文切換</h3><ul>
<li><p><a href="https://blog.madebug.net/Ops/2020-06-25-Funny-With-Linux-I-about-progress.html">進程通過執行函數去執行程序，是資源擁有的基本單位</a>，不再贅述。（who）</p>
</li>
<li><p>誘發進程“被”切換/釋放CPU上下文：(when)</p>
<ul>
<li>預定<strong>時間</strong>片耗盡。</li>
<li>系統<strong>資源</strong>不足。</li>
<li>調用sleep將<strong>自</strong>己主動<strong>挂</strong>起。</li>
<li><strong>優先更高</strong>優先級進程。</li>
<li><strong>硬件中斷</strong>，釋放CPU，轉向内核執行中斷。</li>
</ul>
</li>
<li><p>時而内核態，時而用戶態。(where)</p>
</li>
<li><p>進程内切換（特權模式切換）：(where)</p>
<ul>
<li>執行多個系統調用，一次系統調用，兩次CPU上下文切換（<strong>保存/預設</strong>）。</li>
</ul>
</li>
<li><p>進程間切換（進程上下文切換）：(where)</p>
<ul>
<li><p>進程切換前/後，需保存/預設【刷新】（内核狀態【堆棧、寄存器】、虛擬内存、棧、全局變量）。</p>
</li>
<li><p>虛擬内存刷新→TLB刷新其映射物理内存位置→内存變慢→其他共享緩存處理器。</p>
</li>
<li><p>如下所示：</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/switchcontentbetweenprogress.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/switchcontentbetweenprogress.png"></p>
</li>
</ul>
</li>
</ul>
<h3 id="綫程の上下文切換"><a href="#綫程の上下文切換" class="headerlink" title="綫程の上下文切換"></a>綫程の上下文切換</h3><ul>
<li><a href="https://blog.madebug.net/Ops/2020-06-29-Funny-With-Linux-II-about-multi-tasks.html">綫程是調度的基本單位</a>，不再贅述。（who）</li>
<li>誘發綫程“被”切換/釋放CPU上下文：（when, where）<ul>
<li>前後綫程分屬<strong>不同進程切換≈進程間上下文切換</strong></li>
<li>前後綫程均屬<strong>同一進程切換=一次CPU上下文切换</strong></li>
</ul>
</li>
<li>多綫程消耗＜&lt;多進程消耗</li>
</ul>
<h3 id="中斷の上下文切換"><a href="#中斷の上下文切換" class="headerlink" title="中斷の上下文切換"></a>中斷の上下文切換</h3><ul>
<li>同一CPU内，中斷處理比進程優先級更高。</li>
<li>中斷，先保存前面進程，后中斷目的進程。（一次保存，一次CPU上下文切換）</li>
</ul>
<h2 id="0x02-小結"><a href="#0x02-小結" class="headerlink" title="0x02 小結"></a>0x02 小結</h2><hr>
<ul>
<li>基本都是概念性東西。</li>
<li>切換過多往往是性能下降的元凶之一，也是負載升高的元凶。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Linux性能調優實戰筆記 </tag>
        <tag>CPU Content Switch </tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能調優實戰筆記III（CPU上下文切換-下）</title>
    <url>/Ops/2021-03-16-Linux-Performance-Tuning-study-notes-III-part2.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>

<p>本文旨在剖析CPU上下文切换的一个H。</p>
<a id="more"></a>

<h2 id="0x00-工具准备"><a href="#0x00-工具准备" class="headerlink" title="0x00 工具准备"></a>0x00 工具准备</h2><hr>
<ul>
<li><p>分析：vmstat、pidstat、watch</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum install procps-ng sysstat -y</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>压测：sysbench</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum-config-manager --enable epel</span></span><br><span class="line"><span class="comment"># yum install sysbench -y </span></span><br><span class="line"><span class="comment"># yum-config-manager --disable epel</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>监控对象：进程、线程、in列</p>
</li>
</ul>
<h2 id="0x01-如何分析-how"><a href="#0x01-如何分析-how" class="headerlink" title="0x01 如何分析(how?)"></a>0x01 如何分析(how?)</h2><hr>
<h3 id="事前介紹"><a href="#事前介紹" class="headerlink" title="事前介紹"></a>事前介紹</h3><ul>
<li><p><strong>vmstat</strong>（系统总体の上下文切换情况）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vmstat -wSm 1 6</span></span><br><span class="line">procs -----------------------memory---------------------- ---swap-- -----io---- -system-- --------cpu--------</span><br><span class="line"> r  b         swpd         free         buff        cache   si   so    bi    bo   <span class="keyword">in</span>   cs  us  sy  id  wa  st</span><br><span class="line"> 3  0            0         3697            2         2732    0    0    10    12   43   87   0   0 100   0   0</span><br><span class="line"> 1  0            0         3684            2         2745    0    0     0     0 4518  717  26  21  53   0   0</span><br><span class="line"> 1  0            0         3673            2         2757    0    0     0     0 4041  553  27  18  55   0   0</span><br><span class="line"> 0  0            0         3659            2         2769    0    0     0     0 4605  609  27  19  54   0   0</span><br><span class="line"> 1  0            0         3640            2         2785    0    0     0     0 1552  308  39  12  48   0   0</span><br><span class="line"> 1  0            0         3603            2         2822    0    0     0     0 1182  273  43   9  48   0   0</span><br></pre></td></tr></table></figure>

<ul>
<li>r列：就绪队列，<strong>运行&amp;等待的CPU</strong>进程数。</li>
<li>b列：不可中斷睡眠狀態的進程數。</li>
<li>in列：每秒中断次数。</li>
<li>cs列：每秒content switch次数变化。</li>
<li>us列、sy列：user及system层面的系统CPU使用率。</li>
</ul>
</li>
<li><p><strong>pidstat</strong>（进程の上下文切换情况）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pidstat -w -u 5</span></span><br><span class="line">Average:      UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">Average:        0       845    0.00    0.20    0.00    0.20     -  vmtoolsd</span><br><span class="line">Average:        0      1053    0.20    0.20    0.00    0.40     -  NetworkManager</span><br><span class="line">Average:        0      1366    0.00    0.20    0.00    0.20     -  rsyslogd</span><br><span class="line">Average:        0     20518    0.00    0.20    0.00    0.20     -  pidstat</span><br><span class="line">Average:        0     76678    0.20    0.20    0.00    0.40     -  tmux</span><br><span class="line"></span><br><span class="line">Average:      UID       PID   cswch/s nvcswch/s  Command</span><br><span class="line">Average:        0         1      1.00      0.00  systemd</span><br><span class="line">Average:        0         6      1.79      0.00  ksoftirqd/0</span><br><span class="line">Average:        0         7      1.59      0.00  migration/0</span><br><span class="line">Average:        0         9     33.86      0.00  rcu_sched</span><br><span class="line">Average:        0        11      0.40      0.00  watchdog/0</span><br><span class="line">Average:        0        12      0.40      0.00  watchdog/1</span><br><span class="line">Average:        0        13      2.59      0.00  migration/1</span><br><span class="line">Average:        0        14      2.79      0.00  ksoftirqd/1</span><br><span class="line">Average:        0        37      0.20      0.00  khugepaged</span><br><span class="line">Average:        0       511     19.92      0.00  xfsaild/dm-0</span><br><span class="line">Average:        0       595      0.20      0.00  systemd-journal</span><br><span class="line">Average:        0       845     11.95      0.00  vmtoolsd</span><br><span class="line">Average:        0       848      1.59      0.00  rngd</span><br><span class="line">Average:        0      1053      4.18      0.00  NetworkManager</span><br><span class="line">Average:        0      9445      0.20      0.00  goa-identity-se</span><br><span class="line">Average:        0      9535      1.00      0.00  gsd-color</span><br><span class="line">Average:        0      9670     10.16      0.00  vmtoolsd</span><br><span class="line">Average:        0      9766      0.20      0.00  fwupd</span><br><span class="line">Average:        0     16537      1.59      0.00  kworker/1:1</span><br><span class="line">Average:        0     20518      0.20      0.20  pidstat</span><br><span class="line">Average:        0     76190      1.20      0.00  kworker/u256:2</span><br><span class="line">Average:        0     76678      9.36      0.00  tmux</span><br><span class="line">Average:        0    107281      1.79      0.00  kworker/0:1</span><br></pre></td></tr></table></figure>

<ul>
<li>cswch/s：每秒自愿上下文切换，进程（资源耗尽）自愿进而上下文切换。</li>
<li>nvcswch/s：每秒非自愿上下文切换，进程因（优先级、时间片）因素被强制调度进而上下文切换。</li>
</ul>
</li>
<li><p><strong>watch</strong>（监控interrupts详情）</p>
</li>
<li><p><strong>sysbench</strong>（以10个线程运行5分钟的基准测试，模拟多线程切换的问题）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sysbench --threads=10 --max-time=300 threads run</span></span><br><span class="line">WARNING: --max-time is deprecated, use --time instead</span><br><span class="line">sysbench 1.0.17 (using system LuaJIT 2.0.4)</span><br><span class="line"></span><br><span class="line">Running the <span class="built_in">test</span> with following options:</span><br><span class="line">Number of threads: 10</span><br><span class="line">Initializing random number generator from current time</span><br><span class="line"></span><br><span class="line">Initializing worker threads...</span><br><span class="line"></span><br><span class="line">Threads started!</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><ul>
<li><p><strong>vmstat</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-w, --wide</span><br><span class="line">   Wide  output mode (useful <span class="keyword">for</span> systems with higher amount of memory, <span class="built_in">where</span> the default output mode suffers from unwanted column breakage).  The output is wider than 80 characters per</span><br><span class="line">   line.</span><br><span class="line">-S, --unit character</span><br><span class="line">   Switches outputs between 1000 (k), 1024 (K), 1000000 (m), or 1048576 (M) bytes.  Note this does not change the swap (si/so) or block (bi/bo) fields.</span><br><span class="line">-m, --slabs</span><br><span class="line">   Displays slabinfo.</span><br><span class="line"></span><br><span class="line"><span class="comment"># vmstat -wSm 1 6</span></span><br><span class="line">procs -----------------------memory---------------------- ---swap-- -----io---- -system-- --------cpu--------</span><br><span class="line"> r  b         swpd         free         buff        cache   si   so    bi    bo   <span class="keyword">in</span>   cs  us  sy  id  wa  st</span><br><span class="line"> 7  0            0          302            2         6118    0    0    10    36   44  103   0   0 100   0   0</span><br><span class="line">11  0            0          282            2         6138    0    0     0     0 2475 2262933  27  73   0   0   0</span><br><span class="line"> 8  0            0          266            2         6159    0    0     0     0 2173 1915515  35  65   1   0   0</span><br><span class="line"> 5  0            0          266            2         6159    0    0     0     0 2264 1983326  37  63   0   0   0</span><br><span class="line"> 6  0            0          265            2         6159    0    0     0     0 2284 1899297  33  67   1   0   0</span><br><span class="line"> 7  0            0          266            2         6159    0    0     0     0 2342 2126275  33  68   0   0   0</span><br></pre></td></tr></table></figure>

<ul>
<li><p>r列：远超实际CPU个数。</p>
</li>
<li><p>cs列：上升。</p>
</li>
<li><p>us列、sy列：系統cpu使用率飙升，user的cpu使用率无变化。</p>
</li>
<li><p>in列：同样飙升（本节最后分析）</p>
<p>結論：r↑ 就绪越多，cs↑上下文切换频繁，所以sy↑，CPU使用率飙升。</p>
</li>
</ul>
</li>
<li><p><strong>pidstat</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-u     Report CPU utilization.</span><br><span class="line">-w     Report task switching activity (kernels 2.6.23 and later only).  </span><br><span class="line">-t     Also display statistics <span class="keyword">for</span> threads associated with selected tasks.</span><br><span class="line"></span><br><span class="line"><span class="comment"># pidstat -w -u 1</span></span><br><span class="line">Linux 3.10.0-1160.el7.x86_64 (learning79.madebug.net) 03/14/2021 _x86_64_ (2 CPU)</span><br><span class="line"></span><br><span class="line">10:10:58 AM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">10:10:59 AM     0       845    0.00    1.00    0.00    1.00     1  vmtoolsd</span><br><span class="line">10:10:59 AM     0    114598   19.00  100.00    0.00  100.00     1  sysbench</span><br><span class="line">10:10:59 AM     0    114613    0.00    1.00    0.00    1.00     0  pidstat</span><br><span class="line"></span><br><span class="line">10:10:58 AM   UID       PID   cswch/s nvcswch/s  Command</span><br><span class="line">10:10:59 AM     0         1      1.00      0.00  systemd</span><br><span class="line">10:10:59 AM     0         6      2.00      0.00  ksoftirqd/0</span><br><span class="line">10:10:59 AM     0         7      1.00      0.00  migration/0</span><br><span class="line">10:10:59 AM     0         9     60.00      0.00  rcu_sched</span><br><span class="line">10:10:59 AM     0        13      1.00      0.00  migration/1</span><br><span class="line">10:10:59 AM     0       511     20.00      0.00  xfsaild/dm-0</span><br><span class="line">10:10:59 AM     0       845     11.00      0.00  vmtoolsd</span><br><span class="line">10:10:59 AM     0       848      1.00      0.00  rngd</span><br><span class="line">10:10:59 AM     0      1053      5.00      0.00  NetworkManager</span><br><span class="line">10:10:59 AM     0      9025      1.00      0.00  wpa_supplicant</span><br><span class="line">10:10:59 AM     0      9445      1.00      0.00  goa-identity-se</span><br><span class="line">10:10:59 AM     0      9535      1.00      0.00  gsd-color</span><br><span class="line">10:10:59 AM     0      9670      9.00      0.00  vmtoolsd</span><br><span class="line">10:10:59 AM     0     76190      1.00      0.00  kworker/u256:2</span><br><span class="line">10:10:59 AM     0     76483      6.00      0.00  sshd</span><br><span class="line">10:10:59 AM     0     76678     24.00      0.00  tmux</span><br><span class="line">10:10:59 AM     0    107281    157.00      0.00  kworker/0:1</span><br><span class="line">10:10:59 AM     0    112877      1.00      0.00  kworker/1:1</span><br><span class="line">10:10:59 AM     0    114613      1.00    143.00  pidstat</span><br><span class="line">10:10:59 AM     0    114627      3.00      1.00  byobu-status</span><br></pre></td></tr></table></figure>

<ul>
<li><p>sysbench的CPU使用率100%</p>
</li>
<li><p>pidstat的非自愿上下文切换频率到143</p>
</li>
<li><p>kworker/0:1的自愿上下文切换去到了157</p>
<ul>
<li><p>加上-t参数输出进程下线程的数据</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">10:44:12 PM     0     58152         -      6.00      0.00  kworker/1:0</span><br><span class="line">10:44:12 PM     0         -     58152      6.00      0.00  |__kworker/1:0</span><br><span class="line">10:44:12 PM     0         -     59224  67134.00 218954.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59225  54921.00 227870.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59226  60706.00 217821.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59227  52608.00 237218.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59228  45081.00 224735.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59229  48077.00 232958.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59230  64332.00 212784.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59231  40541.00 234529.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59232  54334.00 223209.00  |__sysbench</span><br><span class="line">10:44:12 PM     0         -     59233  47245.00 246611.00  |__sysbench</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>watch</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># watch -d cat /proc/interrupts</span></span><br><span class="line">Every 2.0s: cat /proc/interrupts      </span><br><span class="line">            CPU0       CPU1</span><br><span class="line">...</span><br><span class="line">RES:     976811    1022850   Rescheduling interrupts</span><br></pre></td></tr></table></figure>

<ul>
<li>从/proc/interrupts中读取中断内容。</li>
<li>/proc是虚拟文件系统，用于内核空间与用户空间之间的通信。</li>
<li>重调度中断（RES）占据极大份额，正在因为多任务频繁唤醒空闲CPU调度新任务执行。</li>
</ul>
</li>
</ul>
<h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><ul>
<li>上下文切换正常值取决于CPU性能。</li>
<li>10000≥x ≥100+算正常，＞10000或切换次数跨度很大，则可能出现性能问题。</li>
<li>cswch/s变大，进程等待资源，I /O问题。</li>
<li>nvcswch/s变大，进程被强制调度，CPU争抢，CPU问题。</li>
<li>in变大，CPU被中断处理程序占用，需查看/proc/interrupts来确定中断类型。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Linux性能調優實戰筆記 </tag>
        <tag>CPU Content Switch </tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能調優實戰筆記II</title>
    <url>/Ops/2019-09-02-Linux-Performance-Tuning-study-notes-II.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>       

<p>本文旨在阐述，关于平均负载的知识点</p>
<a id="more"></a>

<h2 id="0x00-什么是平均负载-Load-Averages"><a href="#0x00-什么是平均负载-Load-Averages" class="headerlink" title="0x00 什么是平均负载(Load Averages)"></a>0x00 什么是平均负载(Load Averages)</h2><hr>
<p>我们可以从uptime的manual中查看到以下讯息：</p>
<blockquote>
<p>man uptime<br>…<br>System load averages is the average number of processes that are either in a runnable or uninterruptable state. (平均负载：单位时间内，系统处于运行态和不可中断态的进程数。)<br>A process in a runnable state is either using the CPU or waiting to use the CPU.(运行态指正使用CPU或等待CPU。)<br>A process in uninterruptable state is waiting for some I/O access, eg waiting for disk.(不可中断态指正处于内核态关键流程，万不可打断，诸如等待磁盘I/O响应。“不可中断态指系统对进程和硬件设备的保护机制。”)<br>The averages are taken over the three time intervals.(参数取自三个时间间隔：1min、5min、15min)<br><strong>一直稳定：1min≈5min≈15min</strong><br><strong>过去高负：1min  &lt;&lt;  15min</strong><br><strong>目前高负：1min  &gt;&gt;  15min</strong><br>Load averages are not normalized for the number of CPUs in a system, so a load average of 1 means a single CPU system is loaded all the time while on a 4 CPU system it means it was idle 75% of the time.<br><strong>(平均负载未针对CPU个数调整，因为数值1在1个CPU和4个CPU的系统有不同的意味。)</strong><br><strong>当平均负载 = 1时：</strong><br><strong>这需要结合CPU数(CPU NUM = grep ‘model name’ /proc/cpuinfo | wc -l)来进行判断</strong><br><strong>- 1个CPU系统：满载</strong><br><strong>- 4个CPU系统：1/4满载</strong></p>
</blockquote>
<ul>
<li><p><strong>运行态(runnable)+不可中断态(uninterruptable)</strong></p>
<p>以下算式直观描述影响平均负载的可能因素(CPU占用，CPU等待，IO等待)：<br>平均负载升高不一定CPU升高，例如等待I/O</p>
<ul>
<li><em>System Load Averages ↑ = Using CPU ↑ + Waiting CPU + Waiting I/O</em></li>
<li><em>System Load Averages ↑ = Using CPU + Waiting CPU  ↑ + Waiting I/O</em></li>
<li><em>System Load Averages ↑ = Using CPU + Waiting CPU  + Waiting I/O ↑</em></li>
</ul>
</li>
<li><p><strong>可运行态的进程R：Running Runnable,不可中断态的进程D：Disk Sleep(uninterruptable sleep)</strong><br><strong>R+ = running↓ D+ = Disk Sleep(uninterruptable sleep)↓</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ps -aux</span><br><span class="line">USER        PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root      22417  0.0  0.3  39008  3628 pts&#x2F;0    R+   21:40   0:00 ps -aux</span><br><span class="line">root      22418  0.0  0.1  22016  1624 pts&#x2F;0    D+   21:40   0:00 -bash</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><strong>注意：平均负载应该小于CPU数的70%。</strong> </li>
</ul>
<h2 id="0x01-案例模拟"><a href="#0x01-案例模拟" class="headerlink" title="0x01 案例模拟"></a>0x01 案例模拟</h2><hr>
<h3 id="测试説明"><a href="#测试説明" class="headerlink" title="测试説明"></a>测试説明</h3><ul>
<li>测试工具：<a href="https://linux.die.net/man/1/stress" target="_blank" rel="noopener"><strong>stress</strong></a></li>
<li>分析工具：<a href="https://man7.org/linux/man-pages/man5/sysstat.5.html" target="_blank" rel="noopener"><strong>sysstat</strong></a> (仅使用 mpstat[CPU] 和 pidstat[pid])</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# screenfetch </span><br><span class="line">                   ..                    root@localhost</span><br><span class="line">                 .PLTJ.                  OS: CentOS </span><br><span class="line">                &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;                 Kernel: x86_64 Linux 3.10.0-957.21.3.el7.x86_64</span><br><span class="line">       KKSSV&#39; 4KKK LJ KKKL.&#39;VSSKK        Uptime: 48m</span><br><span class="line">       KKV&#39; 4KKKKK LJ KKKKAL &#39;VKK        Packages: 494</span><br><span class="line">       V&#39; &#39; &#39;VKKKK LJ KKKKV&#39; &#39; &#39;V        Shell: bash 4.2.46</span><br><span class="line">       .4MA.&#39; &#39;VKK LJ KKV&#39; &#39;.4Mb.        CPU: Intel Xeon E5-26xx v4 @ 2x 2.394GHz</span><br><span class="line">     . KKKKKA.&#39; &#39;V LJ V&#39; &#39;.4KKKKK .      GPU: cirrusdrmfb</span><br><span class="line">   .4D KKKKKKKA.&#39;&#39; LJ &#39;&#39;.4KKKKKKK FA.    RAM: 147MiB &#x2F; 7821MiB</span><br><span class="line">  &lt;QDD ++++++++++++  ++++++++++++ GFD&gt;  </span><br><span class="line">   &#39;VD KKKKKKKK&#39;.. LJ ..&#39;KKKKKKKK FV    </span><br><span class="line">     &#39; VKKKKK&#39;. .4 LJ K. .&#39;KKKKKV &#39;     </span><br><span class="line">        &#39;VK&#39;. .4KK LJ KKA. .&#39;KV&#39;        </span><br><span class="line">       A. . .4KKKK LJ KKKKA. . .4       </span><br><span class="line">       KKA. &#39;KKKKK LJ KKKKK&#39; .4KK       </span><br><span class="line">       KKSSA. VKKK LJ KKKV .4SSKK       </span><br><span class="line">                &lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;                </span><br><span class="line">                 &#39;MKKM&#39; </span><br><span class="line">                   &#39;&#39;</span><br><span class="line">[root@localhost ~]# wget http:&#x2F;&#x2F;download-ib01.fedoraproject.org&#x2F;pub&#x2F;fedora&#x2F;linux&#x2F;releases&#x2F;30&#x2F;Everything&#x2F;x86_64&#x2F;os&#x2F;Packages&#x2F;s&#x2F;sysstat-11.7.3-3.fc30.x86_64.rpm</span><br><span class="line">[root@localhost ~]# yum install -y stress sysstat-11.7.3-3.fc30.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="CPU占用（CPU密集型进程）"><a href="#CPU占用（CPU密集型进程）" class="headerlink" title="CPU占用（CPU密集型进程）"></a>CPU占用（CPU密集型进程）</h3><h4 id="Windows-1"><a href="#Windows-1" class="headerlink" title="Windows 1"></a>Windows 1</h4><p>  施加一个持续<strong>10min的一个CPU占用</strong>。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# stress --cpu 1 --timeout 600</span><br><span class="line">stress: info: [19751] dispatching hogs: 1 cpu, 0 io, 0 vm, 0 hd</span><br></pre></td></tr></table></figure>

<h4 id="Windows-2"><a href="#Windows-2" class="headerlink" title="Windows 2"></a>Windows 2</h4><p>  每两秒<strong>输出uptime</strong>命令的结果。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# watch -d uptime</span><br><span class="line">Every 2.0s: uptime                          Mon Sep  2 23:39:47 2019</span><br><span class="line"></span><br><span class="line">23:39:47 up  1:09,  4 users,  load average: 0.85, 0.68, 0.36</span><br></pre></td></tr></table></figure>

<h4 id="Windows-3"><a href="#Windows-3" class="headerlink" title="Windows 3"></a>Windows 3</h4><p>  使用mpstat来每5s输出，可以看到<strong>单个CPU使用率%usr列显着升高。</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  [root@localhost ~]# mpstat -P ALL 5</span><br><span class="line">                    v</span><br><span class="line">  11:41:18 PM  CPU %usr  %nice  %sys %iowait %irq  %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">  11:41:23 PM  all 50.15  0.00  0.20  0.10   0.00   0.10    0.00    0.00    0.00  49.45</span><br><span class="line">&gt;&gt;11:41:23 PM    0 100.00 0.00  0.00  0.00   0.00   0.00    0.00    0.00    0.00   0.00</span><br><span class="line">  11:41:23 PM    1  0.20  0.00  0.40  0.00   0.00   0.00    0.00    0.00    0.00  99.40</span><br><span class="line">  </span><br><span class="line">  11:41:23 PM  CPU %usr  %nice  %sys %iowait %irq  %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">  11:41:28 PM  all 50.25  0.00  0.30  0.00   0.00   0.00    0.00    0.00    0.00  49.45</span><br><span class="line">&gt;&gt;11:41:28 PM    0 94.81  0.00  0.20  0.00   0.00   0.00    0.00    0.00    0.00   4.99</span><br><span class="line">  11:41:28 PM    1  5.61  0.00  0.40  0.00   0.00   0.00    0.00    0.00    0.00  93.99</span><br><span class="line">  </span><br><span class="line">  11:41:28 PM  CPU %usr  %nice  %sys %iowait %irq  %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">  11:41:33 PM  all 50.25  0.00  0.20  0.10   0.00   0.00    0.00    0.00    0.00  49.45</span><br><span class="line">&gt;&gt;11:41:33 PM    0 98.60  0.00  0.00  0.00   0.00   0.00    0.00    0.00    0.00   1.40</span><br><span class="line">  11:41:33 PM    1  1.80  0.00  0.40  0.20   0.00   0.00    0.00    0.00    0.00  97.60 </span><br><span class="line">                    ^</span><br></pre></td></tr></table></figure>

<h4 id="Windows-4"><a href="#Windows-4" class="headerlink" title="Windows 4"></a>Windows 4</h4><p>  现在我们可以看见平均负载的<strong>升高是因为CPU被占用</strong>。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  [root@localhost ~]# pidstat -u 5</span><br><span class="line"></span><br><span class="line">  10:40:09 PM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command</span><br><span class="line">  10:40:14 PM     0      2853    0.20    0.20    0.00    0.40    0.40     0  YDService</span><br><span class="line">  10:40:14 PM     0      3303    0.00    0.20    0.00    0.00    0.20     0  sshd</span><br><span class="line">  10:40:14 PM     0      3750    0.40    0.40    0.00    0.00    0.80     0  barad_agent</span><br><span class="line">  10:40:14 PM     0      4179    0.20    0.00    0.00    0.00    0.20     0  watch</span><br><span class="line">&gt;&gt;10:40:14 PM     0     18043  100.00    0.00    0.00    0.00  100.00     1  stress</span><br></pre></td></tr></table></figure>

<h3 id="IO等待（I-O密集型进程）"><a href="#IO等待（I-O密集型进程）" class="headerlink" title="IO等待（I/O密集型进程）"></a>IO等待（I/O密集型进程）</h3><h4 id="Windows-1-1"><a href="#Windows-1-1" class="headerlink" title="Windows 1"></a>Windows 1</h4><p>  施加一个持续<strong>10分钟的io写入。</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# stress -i 1 --timeout 600</span><br><span class="line">stress: info: [15703] dispatching hogs: 0 cpu, 1 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>

<h4 id="Windows-2-1"><a href="#Windows-2-1" class="headerlink" title="Windows 2"></a>Windows 2</h4><p>  Load Average<strong>一分钟内数值飙升至1.06。</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# watch -d uptime</span><br><span class="line">Every 2.0s: uptime                           Tue Sep  3 21:34:11 2019</span><br><span class="line"></span><br><span class="line"> 21:34:11 up 6 min,  4 users,  load average: 1.05, 0.62, 0.27</span><br></pre></td></tr></table></figure>

<h4 id="Windows-3-1"><a href="#Windows-3-1" class="headerlink" title="Windows 3"></a>Windows 3</h4><p>  仅一个CPU的<strong>%iowait上升。</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  [root@localhost ~]# mpstat -P ALL 5 3</span><br><span class="line">                                       v</span><br><span class="line">  09:36:05 PM  CPU %usr %nice  %sys %iowait %irq  %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">  09:36:10 PM  all 0.50  0.00 29.03  21.27  0.00   0.00    0.00    0.00    0.00  49.19</span><br><span class="line">  09:36:10 PM    0 0.81  0.00 25.15  17.44  0.00   0.00    0.00    0.00    0.00  56.59</span><br><span class="line">&gt;&gt;09:36:10 PM    1 0.20  0.00 32.73  25.10  0.00   0.00    0.00    0.00    0.00  41.97</span><br><span class="line">  </span><br><span class="line">  09:36:10 PM  CPU %usr %nice  %sys %iowait %irq  %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">  09:36:15 PM  all 0.30  0.00 29.43  21.42  0.00   0.00    0.00    0.00    0.00  48.85</span><br><span class="line">  09:36:15 PM    0 0.40  0.00 20.61  15.15  0.00   0.00    0.00    0.00    0.00  63.84</span><br><span class="line">&gt;&gt;09:36:15 PM    1 0.00  0.00 38.29  27.58  0.00   0.00    0.00    0.00    0.00  34.13</span><br><span class="line">  </span><br><span class="line">  09:36:15 PM  CPU %usr %nice  %sys %iowait %irq  %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">  09:36:20 PM  all 0.30  0.00  28.61 21.54  0.00   0.00    0.00    0.00    0.00  49.54</span><br><span class="line">  09:36:20 PM    0 0.41  0.00  13.18  9.13  0.00   0.00    0.00    0.00    0.00  77.28</span><br><span class="line">&gt;&gt;09:36:20 PM    1 0.20  0.00  43.75 33.87  0.00   0.00    0.00    0.00    0.00  22.18</span><br><span class="line">                                       ^</span><br></pre></td></tr></table></figure>

<h4 id="Windows-4-1"><a href="#Windows-4-1" class="headerlink" title="Windows 4"></a>Windows 4</h4><p>  Load Average<strong>上升是因为等待I/O。</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  [root@localhost ~]# pidstat -u 5 1</span><br><span class="line">                                          V </span><br><span class="line">  10:37:29 PM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command</span><br><span class="line">  10:37:34 PM     0      1232    0.00    0.40    0.00    0.00    0.40     0  kworker&#x2F;0:1H</span><br><span class="line">  10:37:34 PM     0      2853    0.40    0.40    0.00    0.60    0.80     1  YDService</span><br><span class="line">  10:37:34 PM     0      3750    0.20    0.00    0.00    0.00    0.20     0  barad_agent</span><br><span class="line">  10:37:34 PM     0     16458    0.00    0.20    0.00    0.00    0.20     0  pidstat</span><br><span class="line">&gt;&gt;10:37:34 PM     0     17460    0.00   85.20    0.00    0.40   85.20     1  stress</span><br></pre></td></tr></table></figure>

<h3 id="CPU等待（大量进程）"><a href="#CPU等待（大量进程）" class="headerlink" title="CPU等待（大量进程）"></a>CPU等待（大量进程）</h3><h4 id="Windows-1-2"><a href="#Windows-1-2" class="headerlink" title="Windows 1"></a>Windows 1</h4>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# stress --cpu 8 --timeout 600</span><br><span class="line">stress: info: [9168] dispatching hogs: 8 cpu, 0 io, 0 vm, 0 hdd</span><br></pre></td></tr></table></figure>

<h4 id="Windows-2-2"><a href="#Windows-2-2" class="headerlink" title="Windows 2"></a>Windows 2</h4><p>  Load Average在<strong>一分钟内逼近10.00。</strong><br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# watch -d uptime</span><br><span class="line">Every 2.0s: uptime                            Tue Sep  3 22:08:46 2019</span><br><span class="line"></span><br><span class="line"> 22:08:46 up 41 min,  4 users,  load average: 9.34, 8.13, 4.66</span><br></pre></td></tr></table></figure></p>
<h4 id="Windows-3-2"><a href="#Windows-3-2" class="headerlink" title="Windows 3"></a>Windows 3</h4><p>  使用mpstat来每5s输出，可以看到<strong>全体CPU使用率%usr列显着升高。</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mpstat -P ALL 5 3</span><br><span class="line">                    v</span><br><span class="line">09:59:51 PM CPU   %usr %nice  %sys %iowait %irq %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">09:59:57 PM  all 99.70  0.00  0.20  0.10   0.00  0.10    0.00    0.00    0.00   0.00</span><br><span class="line">09:59:57 PM    0 99.80  0.00  0.20  0.00   0.00  0.00    0.00    0.00    0.00   0.00</span><br><span class="line">09:59:57 PM    1 99.80  0.00  0.20  0.00   0.00  0.00    0.00    0.00    0.00   0.00</span><br><span class="line"></span><br><span class="line">09:59:57 PM  CPU %usr  %nice  %sys %iowait %irq %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">10:00:02 PM  all 99.60  0.00  0.40  0.00   0.00  0.10    0.00    0.00    0.00   0.00</span><br><span class="line">10:00:02 PM    0 99.80  0.00  0.20  0.00   0.10  0.00    0.00    0.00    0.00   0.00</span><br><span class="line">10:00:02 PM    1 99.40  0.00  0.60  0.00   0.00  0.00    0.00    0.00    0.00   0.00</span><br><span class="line"></span><br><span class="line">10:00:02 PM  CPU %usr  %nice  %sys %iowait %irq %soft  %steal  %guest  %gnice  %idle</span><br><span class="line">10:00:07 PM  all 99.70  0.00  0.30  0.00   0.00  0.00    0.00    0.00    0.00   0.00</span><br><span class="line">10:00:07 PM    0 99.80  0.00  0.20  0.00   0.00  0.00    0.00    0.00    0.00   0.00</span><br><span class="line">10:00:07 PM    1 99.60  0.00  0.40  0.00   0.00  0.00    0.00    0.00    0.00   0.00</span><br><span class="line">                   ^</span><br></pre></td></tr></table></figure>

<h4 id="Windows-4-2"><a href="#Windows-4-2" class="headerlink" title="Windows 4"></a>Windows 4</h4><p>  pidstat来追踪进程，可以发现大量stress进程在抢占CPU。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  [root@localhost ~]# pidstat -u 5 1   </span><br><span class="line">                                                      </span><br><span class="line">  10:33:44 PM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command</span><br><span class="line">  10:33:49 PM     0      2774    0.00    0.20    0.00    0.00    0.20     1  auditd</span><br><span class="line">  10:33:49 PM     0      2853    0.20    0.20    0.00   74.45    0.40     1  YDService</span><br><span class="line">  10:33:49 PM     0     16458    0.00    0.20    0.00    0.20    0.20     0  pidstat</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16488   24.55    0.00    0.00   75.65   24.55     0  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16489   24.55    0.00    0.00   75.05   24.55     0  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16490   24.75    0.00    0.00   75.45   24.75     0  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16491   24.75    0.00    0.00   74.65   24.75     1  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16492   24.95    0.00    0.00   75.45   24.95     1  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16493   24.95    0.00    0.00   75.05   24.95     1  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16494   24.35    0.00    0.00   75.05   24.35     0  stress</span><br><span class="line">&gt;&gt;10:33:49 PM     0     16495   24.75    0.00    0.00   75.65   24.75     1  stress</span><br></pre></td></tr></table></figure>

<h2 id="0x02-结语"><a href="#0x02-结语" class="headerlink" title="0x02 结语"></a>0x02 结语</h2><hr>
<h3 id="Load-Averages-running-运行态-uninterruptable-不可中断态"><a href="#Load-Averages-running-运行态-uninterruptable-不可中断态" class="headerlink" title="Load Averages = running(运行态) + uninterruptable(不可中断态)"></a>Load Averages = running(运行态) + uninterruptable(不可中断态)</h3><ul>
<li><em>System Load Averages ↑ = Using CPU ↑ + Waiting CPU + Waiting I/O</em></li>
<li><em>System Load Averages ↑ = Using CPU + Waiting CPU  ↑ + Waiting I/O</em></li>
<li><em>System Load Averages ↑ = Using CPU + Waiting CPU  + Waiting I/O ↑</em></li>
</ul>
<h3 id="平均负载可以通过以下公式进行计算。"><a href="#平均负载可以通过以下公式进行计算。" class="headerlink" title="平均负载可以通过以下公式进行计算。"></a>平均负载可以通过以下公式进行计算。</h3><blockquote>
<p>load(t) = n+((load(t-1)-n)/e^(interval/(min*60)))<br>load(t): 平均负载的时间.<br>n: 运行态和不可中断态的线程数<br>interval: 计算间隔，RHEL是5秒<br>min: 负载的时长(分钟数)</p>
</blockquote>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Performance Tuning </tag>
        <tag>Performance Analysis </tag>
        <tag>Linux性能調優實戰筆記 </tag>
        <tag>Load Averages </tag>
        <tag>Sysstat </tag>
        <tag>Stress </tag>
      </tags>
  </entry>
  <entry>
    <title>Linux性能調優實戰筆記IV（CPU占用率）</title>
    <url>/Ops/2021-06-20-Linux-Performance-Tuning-study-notes-IV.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-tux-minimalism-4k-42-1280x800.jpg" width=50% /></center>

<p>本文旨在剖析系统CPU性能的指标：CPU使用率。</p>
<a id="more"></a>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>回顾前面，学习了以下描述系统情况的方式：</p>
<ul>
<li><a href="https://blog.madebug.net/Ops/2019-09-02-Linux-Performance-Tuning-study-notes-II.html">平均负载</a>：系统负载情况的反映。</li>
<li><a href="https://blog.madebug.net/Ops/2021-03-16-Linux-Performance-Tuning-study-notes-III-part1.html">上下文切换：</a> 系统性能缺口情况的反映。</li>
</ul>
<p>而描述CPU，可以直接使用CPU使用率。</p>
<h2 id="0x01-什么是CPU使用率"><a href="#0x01-什么是CPU使用率" class="headerlink" title="0x01 什么是CPU使用率"></a>0x01 什么是CPU使用率</h2><ol>
<li><p>Linux身为多任务操作系统，靠的是短时间片（CPU时间的最小单位）+调度器（轮流分配）。</p>
<ul>
<li><p>短时间片：事先约定来触发中断的节拍率（HZ），并使用Jiffies记录开机依赖节拍数。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/timer_list|grep -m1 -E '^jiffies'|cut -d" " -f2</span></span><br><span class="line">7604634289</span><br></pre></td></tr></table></figure>

<ul>
<li><p>节拍率（HZ）：不同发行版会有不同的内核预设值，<strong>意味每秒钟触发的时间中断次数。</strong></p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># grep 'CONFIG_HZ=' /boot/config-$(uname -r)</span></span><br><span class="line">CONFIG_HZ=1000</span><br><span class="line">ubuntu@localhost:~$ grep <span class="string">'CONFIG_HZ='</span> /boot/config-$(uname -r)</span><br><span class="line">CONFIG_HZ=250</span><br></pre></td></tr></table></figure>
</li>
<li><p>而用户空间往往使用的是USER_HZ，<a href="https://stackoverflow.com/questions/12480486/how-to-check-hz-in-the-terminal#:~:text=100-,Any%20of%20the%20compile,%24,-man" target="_blank" rel="noopener">任何运行时kernel的编译选项都可以使用getconf进行显示</a>，这个值被固定为100，也就是1秒中断100次。</p>
<blockquote>
<p>$ man 7 time<br>  …<br>  The software clock, HZ, and jiffies<br>  The accuracy of various system calls that set timeouts, (e.g., select(2), sigtimedwait(2)) and measure CPU time (e.g., getrusage(2)) is limited by the resolution of the software clock, a clock<br>  maintained by the kernel which measures time in jiffies. The size of a jiffy is determined by the value of the kernel constant HZ.<br>  The value of HZ varies across kernel versions and hardware platforms. On i386 the situation is as follows: on kernels up to and including 2.4.x, HZ was 100, giving a jiffy value of 0.01 seconds;<br>  starting with 2.6.0, HZ was raised to 1000, giving a jiffy of 0.001 seconds. Since kernel 2.6.13, the HZ value is a kernel configuration parameter and can be 100, 250 (the default) or 1000, yield‐<br>  ing a jiffies value of, respectively, 0.01, 0.004, or 0.001 seconds. Since kernel 2.6.20, a further frequency is available: 300, a number that divides evenly for the common video frame rates (PAL,<br>  25 HZ; NTSC, 30 HZ).<br>  The times(2) system call is a special case. It reports times with a granularity defined by the kernel constant USER_HZ. User-space applications can determine the value of this constant using<br>  sysconf(_SC_CLK_TCK).</p>
</blockquote>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># getconf CLK_TCK</span></span><br><span class="line">100</span><br><span class="line">ubuntu@localhost:~$ getconf CLK_TCK</span><br><span class="line">100</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Linux通过伪文件系统 /proc来向用户提供OS内部状态信息，而<strong>/proc/stat 提供了系统的CPU和系统任务统计信息</strong>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重点查看不同场景下CPU的累计节拍数。</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># cat /proc/stat |grep ^cpu</span></span><br><span class="line">cpu  34606696 176287 4467987 6580945956 1271138 0 43622 0 29486561 0   &lt;&lt;&lt; 总体累加值</span><br><span class="line">cpu0 595076 20722 276949 329973186 13384 0 13257 0 362976 0</span><br><span class="line">cpu1 1127636 67877 201993 328548578 930793 0 18742 0 756795 0</span><br><span class="line">cpu2 1263945 20524 166542 329398032 229204 0 34 0 1069117 0</span><br><span class="line">cpu3 2598239 8315 279844 328137468 39873 0 33 0 2418959 0</span><br><span class="line">cpu4 3152236 4124 276053 327627575 9873 0 16 0 2983401 0</span><br><span class="line">cpu5 3758087 1714 254151 327048933 4333 0 11 0 3607109 0</span><br><span class="line">cpu6 3694695 2045 240707 327126810 3759 0 17 0 3554974 0</span><br><span class="line">cpu7 3828972 4117 240018 326989822 3392 0 21 0 3688237 0</span><br><span class="line">cpu8 3905215 3004 243946 326913132 2545 0 7 0 3765278 0</span><br><span class="line">cpu9 4009330 1172 246768 326807704 2270 0 19 0 3870190 0</span><br><span class="line">cpu10 554056 9355 214524 330129039 442 0 11371 0 159670 0</span><br><span class="line">cpu11 533244 15006 200194 330390188 4311 0 1 0 187749 0</span><br><span class="line">cpu12 540121 6568 190984 330403882 545 0 2 0 203736 0</span><br><span class="line">cpu13 643304 2944 196357 330296946 338 0 2 0 345497 0</span><br><span class="line">cpu14 895960 1370 199230 330038803 260 0 1 0 620911 0</span><br><span class="line">cpu15 671360 1116 202075 330264781 374 0 2 0 370423 0</span><br><span class="line">cpu16 778120 3359 209582 330147575 276 0 3 0 463865 0</span><br><span class="line">cpu17 582231 757 203751 330350880 299 0 0 0 295223 0</span><br><span class="line">cpu18 836571 669 215387 330086448 291 0 3 0 495057 0</span><br><span class="line">cpu19 638288 1522 208925 330266164 24565 0 70 0 267386 0</span><br></pre></td></tr></table></figure>

<p>其含义：</p>
<blockquote>
<p>$ man proc<br>…<br>/proc/stat<br>kernel/system statistics. Varies with architecture. Common entries include:<br>cpu 3357 0 4313 1362393<br>The amount of time, measured in units of USER_HZ (1/100ths of a second on most architectures, use sysconf(_SC_CLK_TCK) to obtain the right value), that the system spent in various<br>states:<br>user (1) Time spent in user mode.<br>（缩写为us）用户态时间，不含nice，但包含guest。<br>nice (2) Time spent in user mode with low priority (nice).<br>（缩写为ni）低优先级用户态时间，取值范围-20 -19，数值越大优先级越低。<br>system (3) Time spent in system mode.<br>（缩写为sys）内核态CPU时间。<br>idle (4) Time spent in the idle task. This value should be USER_HZ times the second entry in the /proc/uptime pseudo-file.<br>（缩写为id）空闲时间，不含IO等待（iowait），/proc/uptime第二个值的100倍。<br>iowait (since Linux 2.5.41)<br>(5) Time waiting for I/O to complete.<br>（缩写为wa）,代表等待I/O的CPU时间。<br>irq (since Linux 2.6.0-test4)<br>(6) Time servicing interrupts.<br>（缩写为hi），代表硬中断的CPU时间。<br>softirq (since Linux 2.6.0-test4)<br>(7) Time servicing softirqs.<br>（缩写为si），代表软中断的CPU时间。<br>steal (since Linux 2.6.11)<br>(8) Stolen time, which is the time spent in other operating systems when running in a virtualized environment<br>（缩写为st），代表vm系统被其他vm抢占的CPU时间。<br>guest (since Linux 2.6.24)<br>(9) Time spent running a virtual CPU for guest operating systems under the control of the Linux kernel.<br>（缩写为guest），代表作为hypervisor运行虚拟机的CPU时间。<br>guest_nice (since Linux 2.6.33)<br>(10) Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel).<br>（缩写为gnice），代表作为低优先级运行虚拟机的时间。</p>
</blockquote>
</li>
<li><p>因此我们可以有了CPU使用率的计算公式：</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/CPUCalculationFormula-1.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/CPUCalculationFormula-1.jpg"></p>
<p>但是Linux开机很久以来的时间也纳入计算，明显没有意义，因此我们常用的是优化版：</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/CPUCalculationFormula-2.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/CPUCalculationFormula-2.jpg"></p>
<p>系统的角度考量的是/proc/stat , 而进程的角度考量的是/proc/[pid]/stat 。</p>
</li>
<li><p>而常见的分析工具<strong>top（3秒时间间隔）和ps（进程全生命周期）</strong>都可以帮我们计算好，我们只需要注意它们的时间间隔。</p>
</li>
</ol>
<h2 id="0x02-怎么查看CPU使用率"><a href="#0x02-怎么查看CPU使用率" class="headerlink" title="0x02 怎么查看CPU使用率"></a>0x02 怎么查看CPU使用率</h2><ul>
<li><p>top：</p>
<ul>
<li><p>系统的资源（总体CPU和内存）使用情况。</p>
</li>
<li><p>进程的资源（不区分用户态/内核态）使用情况。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top - 09:03:15 up 2 days,  8:11,  3 users,  load average: 0.00, 0.03, 0.05</span><br><span class="line">Tasks: 466 total,   1 running, 465 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.1 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 13172561+total, 12070921+free,  5016792 used,  5999608 buff/cache</span><br><span class="line">KiB Swap:  4194300 total,  4194300 free,        0 used. 12589456+avail Mem</span><br><span class="line">                                           （用户态%CPU+内核态%CPU）</span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                        2147 root      20   0 1462688  20152   5340 S   0.3  0.0   0:37.21 docker-containe</span><br><span class="line"> 3953 root      20   0   23164   2688   1312 S   0.3  0.0   5:00.06 tmux</span><br><span class="line">    1 root      20   0  191856   4860   2644 S   0.0  0.0   0:02.15 systemd</span><br><span class="line">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.01 kthreadd</span><br><span class="line">    4 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</span><br><span class="line">    6 root      20   0       0      0      0 S   0.0  0.0   0:01.66 ksoftirqd/0</span><br><span class="line">    7 root      rt   0       0      0      0 S   0.0  0.0   0:00.19 migration/0</span><br><span class="line">    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh</span><br><span class="line">    9 root      20   0       0      0      0 S   0.0  0.0   0:07.40 rcu_sched</span><br><span class="line">   10 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 lru-add-drain</span><br><span class="line">   11 root      rt   0       0      0      0 S   0.0  0.0   0:00.12 watchdog/0</span><br><span class="line">   12 root      rt   0       0      0      0 S   0.0  0.0   0:00.10 watchdog/1</span><br><span class="line">   13 root      rt   0       0      0      0 S   0.0  0.0   0:00.18 migration/1</span><br><span class="line">   14 root      20   0       0      0      0 S   0.0  0.0   0:00.27 ksoftirqd/1</span><br><span class="line">   16 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H</span><br><span class="line">   17 root      rt   0       0      0      0 S   0.0  0.0   0:00.10 watchdog/2</span><br><span class="line">   18 root      rt   0       0      0      0 S   0.0  0.0   0:00.53 migration/2</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>ps：进程的资源（区分用户态/内核态）使用情况。</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   [root@rhel7 ~]<span class="comment"># pidstat 1  5                                                                                                                                                                           </span></span><br><span class="line">Linux 3.10.0-1160.11.1.el7.x86_64   06/20/2021      _x86_64_        (20 CPU)</span><br><span class="line"></span><br><span class="line">                                  用户态 内核态  虚拟机    等待    总使用率</span><br><span class="line">                                              CPU使用率 CPU使用率</span><br><span class="line">   12:10:18 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">   12:10:19 AM  1000       206    0.00    6.00    0.00    0.00    6.00     0  tmux: server</span><br><span class="line">   12:10:19 AM  1000     17722    0.00    1.00    0.00    0.00    1.00     0  pidstat</span><br><span class="line"></span><br><span class="line">   12:10:19 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">   12:10:20 AM  1000       206    0.00    8.00    0.00    0.00    8.00     0  tmux: server</span><br><span class="line"></span><br><span class="line">   12:10:20 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">   12:10:21 AM  1000       206    1.00    6.00    0.00    0.00    7.00     0  tmux: server</span><br><span class="line"></span><br><span class="line">   12:10:21 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">   12:10:22 AM  1000       206    0.00   10.00    0.00    0.00   10.00     0  tmux: server</span><br><span class="line"></span><br><span class="line">   12:10:22 AM   UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command</span><br><span class="line">   12:10:23 AM  1000       206    0.00    7.00    0.00    0.00    7.00     0  tmux: server</span><br><span class="line"></span><br><span class="line">   Average:      UID       PID    %usr %system  %guest   %<span class="built_in">wait</span>    %CPU   CPU  Command       &lt;&lt;&lt;  5组平均值</span><br><span class="line">   Average:     1000       206    0.20    7.40    0.00    0.00    7.60     -  tmux: server</span><br><span class="line">   Average:     1000     17722    0.00    0.20    0.00    0.00    0.20     -  pidstat</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="0x03-CPU使用率过高怎么办？"><a href="#0x03-CPU使用率过高怎么办？" class="headerlink" title="0x03 CPU使用率过高怎么办？"></a>0x03 CPU使用率过高怎么办？</h2><h3 id="答：直接查找占用的函数进行优化。"><a href="#答：直接查找占用的函数进行优化。" class="headerlink" title="答：直接查找占用的函数进行优化。"></a>答：直接查找占用的函数进行优化。</h3><ul>
<li><p>GDB（中断程序进行调试）</p>
</li>
<li><p>perf（不中断程序进行调试）</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ perf top</span><br><span class="line">Samples: 2K of event <span class="string">'cycles'</span>, 4000 Hz, Event count (approx.): 1591275795 lost: 0/0 drop: 0/0</span><br><span class="line">共2k个CPU时钟事件 总事件数1591275795</span><br><span class="line">采样率     函数共享对象/类型           函数名，符号名</span><br><span class="line">Overhead  Shared Object              Symbol</span><br><span class="line">    5.45%  [kernel]                   [k] module_get_kallsym  </span><br><span class="line">    3.84%  [kernel]                   [k] page_fault</span><br><span class="line">    3.53%  libc-2.17.so               [.] __gconv_transform_utf8_internal</span><br><span class="line">    3.19%  libc-2.17.so               [.] __mbrtowc</span><br><span class="line">    2.55%  libc-2.17.so               [.] _int_malloc</span><br><span class="line">    2.06%  [kernel]                   [k] kallsyms_expand_symbol.constprop.1</span><br><span class="line">    2.01%  libc-2.17.so               [.] __GI_____strtoull_l_internal</span><br><span class="line">    1.74%  libc-2.17.so               [.] __strcmp_sse42</span><br><span class="line">    1.64%  [kernel]                   [k] format_decode</span><br><span class="line">    1.62%  libc-2.17.so               [.] _int_free</span><br><span class="line">    1.31%  [kernel]                   [k] __memcpy</span><br><span class="line">    1.23%  perf                       [.] __dso__load_kallsyms</span><br><span class="line">    1.21%  libc-2.17.so               [.] __strcpy_sse2_unaligned</span><br><span class="line">    1.20%  perf                       [.] rb_next</span><br><span class="line">    1.09%  [kernel]                   [k] vsnprintf</span><br><span class="line">    1.05%  libc-2.17.so               [.] __strlen_sse2_pminub</span><br><span class="line">    0.95%  libc-2.17.so               [.] malloc</span><br><span class="line">    0.90%  [kernel]                   [k] acpi_processor_ffh_cstate_enter</span><br><span class="line">    0.90%  [kernel]                   [k] delay_tsc</span><br><span class="line">    0.88%  perf                       [.] 0x00000000000d67a4</span><br><span class="line">    0.87%  libc-2.17.so               [.] __memcpy_sse2</span><br><span class="line">    0.86%  [kernel]                   [k] handle_mm_fault</span><br><span class="line">    0.83%  libc-2.17.so               [.] _IO_feof</span><br><span class="line">    0.82%  [kernel]                   [k] number.isra.2</span><br><span class="line">    0.72%  [kernel]                   [k] strnlen</span><br><span class="line">    0.70%  perf                       [.] rb_insert_color</span><br><span class="line">    0.63%  [kernel]                   [k] copy_page_rep</span><br><span class="line">    0.61%  libc-2.17.so               [.] __ctype_get_mb_cur_max</span><br><span class="line">    0.59%  libc-2.17.so               [.] _dl_addr</span><br><span class="line">    0.59%  [kernel]                   [k] string.isra.7</span><br><span class="line">    0.59%  [kernel]                   [k] strnlen_user</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="第一组示范："><a href="#第一组示范：" class="headerlink" title="第一组示范："></a>第一组示范：</h3><ul>
<li>环境准备：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --name nginx -p 10000:80 -itd docker.io/feisky/nginx</span><br><span class="line">$ docker run --name phpfpm -itd --network container:nginx docker.io/feisky/php-fpm</span><br></pre></td></tr></table></figure>

<ul>
<li>压测：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这里使用其他客户端配合</span><br><span class="line">$ curl http://192.168.99.79:10000/</span><br><span class="line">It works!</span><br><span class="line">$ ab -c 10 -n 10000 http://192.168.99.79:10000/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.99.79 (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.15.4</span><br><span class="line">Server Hostname:        192.168.99.79</span><br><span class="line">Server Port:            10000</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        9 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   144.878 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      1720000 bytes</span><br><span class="line">HTML transferred:       90000 bytes</span><br><span class="line">Requests per second:    69.02 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       144.878 [ms] (mean)</span><br><span class="line">Time per request:       14.488 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          11.59 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1   1.1      1      15</span><br><span class="line">Processing:    73  144   2.7    144     172</span><br><span class="line">Waiting:       73  143   2.7    144     171</span><br><span class="line">Total:         74  145   2.4    145     173</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    145</span><br><span class="line">  66%    145</span><br><span class="line">  75%    145</span><br><span class="line">  80%    145</span><br><span class="line">  90%    146</span><br><span class="line">  95%    147</span><br><span class="line">  98%    149</span><br><span class="line">  99%    151</span><br><span class="line"> 100%    173 (longest request)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># top</span></span><br><span class="line">top - 09:47:03 up 2 days,  8:55,  2 users,  load average: 1.85, 0.53, 0.22</span><br><span class="line">Tasks: 472 total,   6 running, 466 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s): 25.1 us,  0.0 sy,  0.0 ni, 74.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem : 13172561+total, 12010049+free,  5040968 used,  6584148 buff/cache</span><br><span class="line">KiB Swap:  4194300 total,  4194300 free,        0 used. 12585044+avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">6763 bin       20   0  336684   9364   1688 R 100.0  0.0   0:31.10 php-fpm                    </span><br><span class="line">6764 bin       20   0  336684   9360   1684 R 100.0  0.0   0:31.09 php-fpm </span><br><span class="line">6760 bin       20   0  336684   9364   1688 R  99.7  0.0   0:31.17 php-fpm</span><br><span class="line">6761 bin       20   0  336684   9364   1688 R  99.7  0.0   0:31.09 php-fpm</span><br><span class="line">6762 bin       20   0  336684   9360   1684 R  99.7  0.0   0:31.09 php-fpm</span><br></pre></td></tr></table></figure>

<h3 id="第一组分析"><a href="#第一组分析" class="headerlink" title="第一组分析"></a>第一组分析</h3><ol>
<li>初步分析：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">可以见到由于依赖路径不一，只能看到十六进制内容。</span><br><span class="line"></span><br><span class="line">Samples: 111K of event <span class="string">'cycles'</span>, 4000 Hz, Event count (approx.): 55131826469 lost: 0/0 drop: 0/0                                                                                                                </span><br><span class="line">    Children      Self  Shared Object       Symbol                                                                                                                                                                  </span><br><span class="line">+   14.35%     0.00%  [unknown]           [.] 0x6cb6258d4c544155</span><br><span class="line">+   14.35%     0.00%  libc-2.24.so        [.] 0x00007f10b557e2e1                                                                                 </span><br><span class="line">+   14.34%     0.00%  php-fpm             [.] 0x000055c8a0e6d642</span><br><span class="line">+   14.34%     0.00%  php-fpm             [.] 0x000055c8a0c1e6fc </span><br><span class="line">+   14.34%     0.00%  php-fpm             [.] 0x000055c8a0ccdf94</span><br><span class="line">+   14.34%     0.00%  php-fpm             [.] 0x000055c8a0d65323      </span><br><span class="line">+   13.50%     0.00%  php-fpm             [.] 0x000055c8a0d6496e</span><br><span class="line">+    4.71%     4.71%  libm-2.24.so        [.] 0x000000000002127e</span><br><span class="line">+    3.42%     3.42%  php-fpm             [.] 0x000000000094ede0</span><br><span class="line">+    2.61%     0.00%  php-fpm             [.] 0x000055c8a0d66a7c</span><br><span class="line">+    2.48%     2.48%  php-fpm             [.] 0x00000000008c4ae5</span><br><span class="line">+    2.24%     0.00%  php-fpm             [.] 0x000055c8a0e2fea3</span><br><span class="line">+    2.15%     2.15%  php-fpm             [.] 0x00000000008c4a6c</span><br><span class="line">+    2.03%     2.03%  php-fpm             [.] 0x00000000009513cc</span><br><span class="line">+    1.88%     1.88%  php-fpm             [.] 0x00000000008c4a64</span><br><span class="line">+    1.52%     1.52%  php-fpm             [.] 0x000000000098de23</span><br><span class="line">+    1.38%     1.38%  php-fpm             [.] 0x00000000008cda08</span><br><span class="line">+    1.06%     1.06%  php-fpm             [.] 0x00000000008c297a</span><br><span class="line">+    1.06%     1.06%  php-fpm             [.] 0x00000000008c296e</span><br><span class="line">+    1.01%     1.01%  php-fpm             [.] 0x00000000008cd720</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>保存一个进程的记录，拷贝进入容器内分析：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># perf record -g -p 6763</span></span><br><span class="line">[ perf record: Woken up 240 <span class="built_in">times</span> to write data ]</span><br><span class="line">[ perf record: Captured and wrote 59.857 MB perf.data (512079 samples) ]</span><br><span class="line">[root@rhel7 ~]<span class="comment"># docker cp perf.data phpfpm:/tmp</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># docker exec -it phpfpm bash</span></span><br><span class="line">root@d5bdfeec83b1:/app<span class="comment"># cd /tmp</span></span><br><span class="line">root@d5bdfeec83b1:/tmp<span class="comment"># apt update &amp;&amp; apt install linux-perf linux-tools procps -y</span></span><br><span class="line">Hit:1 http://security.debian.org stretch/updates InRelease</span><br><span class="line">Ign:2 http://httpredir.debian.org/debian stretch InRelease</span><br><span class="line">Hit:3 http://httpredir.debian.org/debian stretch Release</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">51 packages can be upgraded. Run <span class="string">'apt list --upgradable'</span> to see them.</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">procps is already the newest version (2:3.3.12-3+deb9u1).</span><br><span class="line">linux-perf is already the newest version (4.9+80+deb9u13).</span><br><span class="line">linux-tools is already the newest version (4.9+80+deb9u13).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 51 not upgraded.</span><br><span class="line">root@d5bdfeec83b1:/tmp<span class="comment"># perf_4.9 report</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>光标选中后回车进入，逐一检视← →</li>
</ol>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/calltrace.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/calltrace.jpg"></p>
<ol start="4">
<li>基本得出结果了，源码核实一下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># docker cp phpfpm:/app .</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># grep sqrt -r app/</span></span><br><span class="line">app/index.php:  <span class="variable">$x</span> += sqrt(<span class="variable">$x</span>);</span><br><span class="line">[root@rhel7 ~]<span class="comment"># cat app/index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line">// <span class="built_in">test</span> only.</span><br><span class="line"><span class="variable">$x</span> = 0.0001;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt;= 1000000; <span class="variable">$i</span>++) &#123;</span><br><span class="line">  <span class="variable">$x</span> += sqrt(<span class="variable">$x</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It works!"</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>修复</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~/app]<span class="comment"># cat index.php</span></span><br><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"It works!"</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>测试一下修复结果</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># docker rm -f nginx phpfpm</span></span><br><span class="line">nginx</span><br><span class="line">phpfpm</span><br><span class="line">[root@rhel7 ~]<span class="comment"># docker run --name nginx -p 10000:80 -itd docker.io/feisky/nginx:cpu-fix</span></span><br><span class="line">Unable to find image <span class="string">'feisky/nginx:cpu-fix'</span> locally</span><br><span class="line">cpu-fix: Pulling from feisky/nginx</span><br><span class="line">a5a6f2f73cd8: Pull complete</span><br><span class="line">67da5fbcb7a0: Pull complete</span><br><span class="line">e82455fa5628: Pull complete</span><br><span class="line">97fea4312924: Pull complete</span><br><span class="line">3faf3e92e113: Pull complete</span><br><span class="line">Digest: sha256:a02d81e93c29d0196293556723cfbcb7fa94b9761b01f4fc9f1b2a6291295dd9</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> feisky/nginx:cpu-fix</span><br><span class="line">9027bc69836a6764847b305e2e1a826711c5736fac720cd8b8b66a9e36684a8a</span><br><span class="line">[root@rhel7 ~]<span class="comment"># docker run --name phpfpm -itd --network container:nginx docker.io/feisky/php-fpm:cpu-fix </span></span><br><span class="line">Unable to find image <span class="string">'feisky/php-fpm:cpu-fix'</span> locally</span><br><span class="line">cpu-fix: Pulling from feisky/php-fpm</span><br><span class="line">ad7b1e3e2409: Pull complete</span><br><span class="line">99184861b139: Pull complete</span><br><span class="line">e0a0d77439f2: Pull complete</span><br><span class="line">555d89a6180d: Pull complete</span><br><span class="line">189480ae9323: Pull complete</span><br><span class="line">a0fd9c448873: Pull complete</span><br><span class="line">542f27453920: Pull complete</span><br><span class="line">287f65539de5: Pull complete</span><br><span class="line">22f455c492a0: Pull complete</span><br><span class="line">14144598512d: Pull complete</span><br><span class="line">Digest: sha256:92147d37d143e2e122e8dceaa7466cd61d76b61601a82025ce6032d26d3c9a27</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> feisky/php-fpm:cpu-fix</span><br><span class="line">228cda70451e388447e9f5674d75ea0c80e820eec7f00152dc1a9344b67e39de</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ab -c 10 -n 10000 http://192.168.99.79:10000/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.99.79 (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.15.6</span><br><span class="line">Server Hostname:        192.168.99.79</span><br><span class="line">Server Port:            10000</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        9 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   2.755 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      1720000 bytes</span><br><span class="line">HTML transferred:       90000 bytes</span><br><span class="line">Requests per second:    3629.69 [<span class="comment">#/sec] (mean)      &lt;-------</span></span><br><span class="line">Time per request:       2.755 [ms] (mean)</span><br><span class="line">Time per request:       0.276 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          609.68 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        1    1   1.0      1      17</span><br><span class="line">Processing:     0    1   1.2      1      16</span><br><span class="line">Waiting:        0    1   1.1      1      16</span><br><span class="line">Total:          1    3   1.8      2      29</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      2</span><br><span class="line">  66%      3</span><br><span class="line">  75%      3</span><br><span class="line">  80%      3</span><br><span class="line">  90%      3</span><br><span class="line">  95%      5</span><br><span class="line">  98%      9</span><br><span class="line">  99%     13</span><br><span class="line"> 100%     29 (longest request)</span><br></pre></td></tr></table></figure>

<h3 id="第二组示范"><a href="#第二组示范" class="headerlink" title="第二组示范"></a>第二组示范</h3><ul>
<li>环境准备：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rm -f nginx phpfpm</span><br><span class="line">$ docker run --name nginx -p 10000:80 -itd feisky/nginx:sp</span><br><span class="line">$ docker run --name phpfpm -itd --network container:nginx feisky/php-fpm:sp</span><br></pre></td></tr></table></figure>

<ul>
<li>压测：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这里使用其他客户端配合</span><br><span class="line">$ curl http://192.168.99.40:10000/</span><br><span class="line">It works!</span><br><span class="line">$ ab -c 100 -n 1000 http://192.168.99.40:10000/        </span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1879490 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.99.40 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx/1.15.4</span><br><span class="line">Server Hostname:        192.168.99.40</span><br><span class="line">Server Port:            10000</span><br><span class="line"></span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        9 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   9.049 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      172000 bytes</span><br><span class="line">HTML transferred:       9000 bytes</span><br><span class="line">Requests per second:    110.51 [<span class="comment">#/sec] (mean)             &lt;----- </span></span><br><span class="line">Time per request:       904.876 [ms] (mean)</span><br><span class="line">Time per request:       9.049 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          18.56 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1   0.8      0       8</span><br><span class="line">Processing:    30  858 132.0    889    1020</span><br><span class="line">Waiting:       27  858 132.0    889    1020</span><br><span class="line">Total:         32  859 131.6    889    1023</span><br><span class="line">WARNING: The median and mean <span class="keyword">for</span> the initial connection time are not within a normal deviation</span><br><span class="line">        These results are probably not that reliable.</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    889</span><br><span class="line">  66%    900</span><br><span class="line">  75%    905</span><br><span class="line">  80%    910</span><br><span class="line">  90%    923</span><br><span class="line">  95%    934</span><br><span class="line">  98%    954</span><br><span class="line">  99%    964</span><br><span class="line"> 100%   1023 (longest request)</span><br></pre></td></tr></table></figure>

<p>换一个时间比较长的进行压测方便观察。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">$ ab -c <span class="number">5</span> -t <span class="number">600</span> http:<span class="comment">//192.168.99.40:10000/</span></span><br><span class="line">This <span class="keyword">is</span> ApacheBench, Version <span class="number">2.3</span> &lt;$Revision: <span class="number">1879490</span> $&gt;</span><br><span class="line">Copyright <span class="number">1996</span> Adam Twiss, Zeus Technology Ltd, http:<span class="comment">//www.zeustech.net/</span></span><br><span class="line">Licensed to The Apache Software Foundation, http:<span class="comment">//www.apache.org/</span></span><br><span class="line"></span><br><span class="line">Benchmarking <span class="number">192.168</span><span class="number">.99</span><span class="number">.40</span> (be patient)</span><br></pre></td></tr></table></figure>

<p>可以观察到处于R (Running) 的php-fpm 与 总running 数目有所出入, 而其他处于R的进程是stress</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># top</span></span><br><span class="line">top - 23:48:57 up  1:04,  3 users,  load average: 5.02, 2.00, 1.09</span><br><span class="line">Tasks: 313 total,   9 running, 303 sleeping,   0 stopped,   1 zombie</span><br><span class="line">%Cpu(s): 81.1 us, 13.8 sy,  0.0 ni,  2.2 id,  0.0 wa,  0.0 hi,  2.9 si,  0.0 st</span><br><span class="line">KiB Mem :  4026220 total,   738312 free,  1249376 used,  2038532 buff/cache</span><br><span class="line">KiB Swap:  2097148 total,  2097148 free,        0 used.  2461720 avail Mem</span><br><span class="line"></span><br><span class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">  3974 101       20   0   33092   2208    788 S   4.7  0.1   0:51.84 nginx</span><br><span class="line">101516 bin       20   0  336684   9608   1932 R   2.7  0.2   0:03.36 php-fpm</span><br><span class="line">101521 bin       20   0  336684   9624   1948 S   2.7  0.2   0:03.34 php-fpm</span><br><span class="line">101529 bin       20   0  336684   9604   1928 R   2.7  0.2   0:03.22 php-fpm</span><br><span class="line">101543 bin       20   0  336684   9600   1924 S   2.3  0.2   0:03.28 php-fpm</span><br><span class="line">101535 bin       20   0  336684   9600   1924 S   2.0  0.2   0:03.31 php-fpm</span><br><span class="line">  3628 root      20   0  677812  97988  31360 S   1.3  2.4   0:27.50 dockerd</span><br><span class="line">  3921 root      20   0  113364  12076   3676 S   1.0  0.3   0:13.47 containerd-shim</span><br><span class="line">     6 root      20   0       0      0      0 S   0.3  0.0   0:01.96 ksoftirqd/0</span><br><span class="line">     7 root      rt   0       0      0      0 S   0.3  0.0   0:00.29 migration/0</span><br><span class="line">     9 root      20   0       0      0      0 R   0.3  0.0   0:06.12 rcu_sched</span><br><span class="line">  3617 root      20   0  446044  44020  16136 S   0.3  1.1   0:14.64 containerd</span><br><span class="line">  4531 root      20   0  164236   2548   1612 R   0.3  0.1   0:00.08 top</span><br><span class="line"> 11479 bin       20   0    8176    864    104 R   0.3  0.0   0:00.01 stress</span><br><span class="line"> 11481 bin       20   0       0      0      0 R   0.3  0.0   0:00.01 stress</span><br></pre></td></tr></table></figure>

<p>pidstat不能抓到转瞬即逝的这些进程，我们转用pstree |grep stress</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">$</span> <span class="comment">watch</span> <span class="literal">-</span><span class="comment">d</span> <span class="literal">-</span><span class="comment">n</span> <span class="comment">1</span> <span class="comment">"pstree</span> <span class="comment">|grep</span> <span class="comment">stress"</span> </span><br><span class="line">    <span class="comment">|</span><span class="literal">-</span><span class="comment">docker</span><span class="literal">-</span><span class="comment">containe</span><span class="literal">-</span><span class="literal">+</span><span class="literal">-</span><span class="comment">php</span><span class="literal">-</span><span class="comment">fpm</span><span class="literal">-</span><span class="literal">+</span><span class="literal">-</span><span class="comment">php</span><span class="literal">-</span><span class="comment">fpm</span>--<span class="literal">-</span><span class="comment">sh</span>--<span class="literal">-</span><span class="comment">stress</span></span><br><span class="line"><span class="comment"></span>    <span class="comment">|</span> <span class="comment">|</span><span class="literal">-</span><span class="comment">3*</span><span class="title">[</span><span class="comment">php</span><span class="literal">-</span><span class="comment">fpm</span>--<span class="literal">-</span><span class="comment">sh</span>--<span class="literal">-</span><span class="comment">stress</span>--<span class="literal">-</span><span class="comment">stress</span><span class="title">]</span></span><br></pre></td></tr></table></figure>

<h3 id="第二组分析"><a href="#第二组分析" class="headerlink" title="第二组分析"></a>第二组分析</h3><ol>
<li><p>查找源码</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">$ docker cp phpfpm:/<span class="keyword">app</span> .</span><br><span class="line">$ grep stress -r <span class="keyword">app</span></span><br><span class="line"><span class="keyword">app</span>/index.php:<span class="comment">// fake I/O with stress (via write()/unlink()).</span></span><br><span class="line"><span class="keyword">app</span>/index.php:<span class="variable">$result</span> = exec(<span class="string">"/usr/local/bin/stress -t 1 -d 1 2&gt;&amp;1"</span>, <span class="variable">$output</span>, <span class="variable">$status</span>);</span><br><span class="line">$ <span class="keyword">cat</span> <span class="keyword">app</span>/index.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="comment">// fake I/O with stress (via write()/unlink()).</span></span><br><span class="line"><span class="variable">$result</span> = exec(<span class="string">"/usr/local/bin/stress -t 1 -d 1 2&gt;&amp;1"</span>, <span class="variable">$output</span>, <span class="variable">$status</span>);</span><br><span class="line"><span class="keyword">if</span> (isset(<span class="variable">$_GET</span>[<span class="string">"verbose"</span>]) &amp;&amp; <span class="variable">$_GET</span>[<span class="string">"verbose"</span>]==1 &amp;&amp; <span class="variable">$status</span> != 0) &#123;</span><br><span class="line">  echo <span class="string">"Server internal error: "</span>;</span><br><span class="line">  print_r(<span class="variable">$output</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  echo <span class="string">"It works!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过源码带的接口调试结果</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">看错误消息 mkstemp failed: Permission denied ，以及 failed run completed <span class="keyword">in</span> <span class="number">0</span>s。原来 stress 命令并没有成功，它因为权限问题失败退出了</span><br><span class="line">$ curl <span class="string">"http://192.168.99.40:10000?verbose=1"</span>                                                           </span><br><span class="line">Server <span class="built_in">int</span>ernal error: Array</span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; stress: info: [<span class="number">74139</span>] dispatching hogs: <span class="number">0</span> cpu, <span class="number">0</span> io, <span class="number">0</span> vm, <span class="number">1</span> hdd</span><br><span class="line">    [<span class="number">1</span>] =&gt; stress: FAIL: [<span class="number">74140</span>] (<span class="number">563</span>) mkstemp failed: Permission denied</span><br><span class="line">    [<span class="number">2</span>] =&gt; stress: FAIL: [<span class="number">74139</span>] (<span class="number">394</span>) &lt;-- worker <span class="number">74140</span> returned error <span class="number">1</span></span><br><span class="line">    [<span class="number">3</span>] =&gt; stress: WARN: [<span class="number">74139</span>] (<span class="number">396</span>) now reaping child worker processes</span><br><span class="line">    [<span class="number">4</span>] =&gt; stress: FAIL: [<span class="number">74139</span>] (<span class="number">400</span>) kill error: No such process</span><br><span class="line">    [<span class="number">5</span>] =&gt; stress: FAIL: [<span class="number">74139</span>] (<span class="number">451</span>) failed run completed <span class="keyword">in</span> <span class="number">0</span>s</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>perf分析</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">确保软连接开启</span><br><span class="line"><span class="meta"># sudo sysctl -w kernel.kptr_restrict=1</span></span><br><span class="line"><span class="meta"># perf record -g </span></span><br><span class="line"><span class="meta"># docker cp perf.data phpfpm:/tmp</span></span><br><span class="line"><span class="meta"># docker exec -it phpfpm bash</span></span><br><span class="line"><span class="meta"># cd /tmp</span></span><br><span class="line"><span class="meta"># apt update &amp;&amp; apt install linux-perf linux-tools procps -y</span></span><br><span class="line"><span class="meta"># perf_4.9 report</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>光标选中后回车进入，逐一检视← →</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/perfcalltrace.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/perfcalltrace.jpg"></p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><ul>
<li>从<code>/proc/stat</code>可以得知CPU使用率的类型，其排查思路如下：<ul>
<li>CPU和Nice升高，排查用户态进程。</li>
<li>系统CPU升高，排查内核线程或者系统调用。</li>
<li>I / O 等待CPU升高，排查系统存储。</li>
<li>软中断和硬中断升高，说明中断操作占用，排查内核中断服务程序。</li>
</ul>
</li>
<li>pidstat和top各有所长。</li>
<li>perf可以在不中断进程的情况下收集证据。</li>
<li>转瞬即逝的进程，不停地崩溃重启，也有可能影响性能表现，通过perf top来搭配观察。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Linux性能調優實戰筆記 </tag>
        <tag>CPU usage </tag>
      </tags>
  </entry>
  <entry>
    <title>如何為KVM限速</title>
    <url>/Ops/2020-11-30-Network-Qos-for-KVM.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/linux-kvm-1280x720.png" width=50% /></center>

<p>本文簡單實踐KVM的限速設置並檢驗。</p>
<a id="more"></a>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最開始時老生常談的網速轉換，本次目標是限速150Mbps，遵循以下公式：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">b <span class="keyword">is</span> bit, B <span class="keyword">is</span> Byte</span><br><span class="line"><span class="number">1</span> Mbps = <span class="number">0.125</span> MB/s = <span class="number">1024</span> kb/s = <span class="number">128</span> KB/s</span><br><span class="line"><span class="number">150</span> Mbps = <span class="number">18.75</span> MB/s = <span class="number">153600</span> kb/s = <span class="number">19200</span> KB/s</span><br></pre></td></tr></table></figure>

<p>爲什麽需要特別提及網速，因爲KVM的XML使用的是KB/s，測速軟件一般是 MB/s。</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">The units for average <span class="keyword">and</span> peak <span class="keyword">attributes</span> are kilobytes per second</span><br><span class="line"></span><br><span class="line"><span class="number">23.17</span>. Devices Red Hat Enterprise Linux <span class="number">7</span> | Red Hat Customer Portal</span><br><span class="line">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/<span class="number">7</span>/html/virtualization_deployment_and_administration_guide/sect-Manipulating_the_domain_xml-Devices#sect-Network_interfaces-Quality_of_service:~:text=The<span class="symbol">%20</span>units<span class="symbol">%20</span>for<span class="symbol">%20</span>average<span class="symbol">%20</span><span class="keyword">and</span><span class="symbol">%20</span>peak<span class="symbol">%20</span><span class="keyword">attributes</span><span class="symbol">%20</span>are<span class="symbol">%20</span>kilobytes<span class="symbol">%20</span>per<span class="symbol">%20</span>second</span><br></pre></td></tr></table></figure>

<h2 id="0x01-設置"><a href="#0x01-設置" class="headerlink" title="0x01 設置"></a>0x01 設置</h2><p>修改流程如下:</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">[root<span class="symbol">@rhel7</span> ~]<span class="meta"># virsh list</span></span><br><span class="line"> Id    Name                           State</span><br><span class="line">----------------------------------------------------</span><br><span class="line"> <span class="number">4</span>     rhel7<span class="number">.6</span>                        running</span><br><span class="line">[root<span class="symbol">@rhel7</span> ~]<span class="meta"># virsh edit rhel7.6</span></span><br><span class="line">....</span><br><span class="line">&lt;bandwidth&gt;</span><br><span class="line">    &lt;inbound average=<span class="string">'19200'</span> peak=<span class="string">'20000'</span>/&gt;</span><br><span class="line">    &lt;outbound average=<span class="string">'19200'</span> peak=<span class="string">'20000'</span>/&gt;</span><br><span class="line">&lt;/bandwidth&gt;</span><br><span class="line">:wq</span><br><span class="line">[root<span class="symbol">@rhel7</span> ~]<span class="meta"># virsh stop rhel7.6</span></span><br><span class="line">[root<span class="symbol">@rhel7</span> ~]<span class="meta"># virsh start rhel7.6</span></span><br></pre></td></tr></table></figure>

<h2 id="0x02-測試"><a href="#0x02-測試" class="headerlink" title="0x02 測試"></a>0x02 測試</h2><h3 id="使用iperf3測速"><a href="#使用iperf3測速" class="headerlink" title="使用iperf3測速"></a>使用iperf3測速</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">From the KVM host</span><br><span class="line">[<span class="symbol">root@</span>rhel7 ~]# iperf3 -i <span class="number">5</span> -t <span class="number">60</span> -c <span class="number">192.168</span><span class="number">.122</span><span class="number">.224</span>                                                                                                         </span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Client connecting to <span class="number">192.168</span><span class="number">.122</span><span class="number">.224</span>, TCP port <span class="number">5001</span></span><br><span class="line">TCP window size:  <span class="number">204</span> KByte (<span class="keyword">default</span>)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  <span class="number">3</span>] local <span class="number">192.168</span><span class="number">.122</span><span class="number">.1</span> port <span class="number">56482</span> connected with <span class="number">192.168</span><span class="number">.122</span><span class="number">.224</span> port <span class="number">5001</span></span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  <span class="number">3</span>]  <span class="number">0.0</span>- <span class="number">5.0</span> sec  <span class="number">89.1</span> MBytes   <span class="number">150</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>]  <span class="number">5.0</span><span class="number">-10.0</span> sec  <span class="number">87.2</span> MBytes   <span class="number">146</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">10.0</span><span class="number">-15.0</span> sec  <span class="number">87.8</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">15.0</span><span class="number">-20.0</span> sec  <span class="number">87.2</span> MBytes   <span class="number">146</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">20.0</span><span class="number">-25.0</span> sec  <span class="number">87.9</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">25.0</span><span class="number">-30.0</span> sec  <span class="number">87.2</span> MBytes   <span class="number">146</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">30.0</span><span class="number">-35.0</span> sec  <span class="number">87.8</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">35.0</span><span class="number">-40.0</span> sec  <span class="number">87.9</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">40.0</span><span class="number">-45.0</span> sec  <span class="number">87.2</span> MBytes   <span class="number">146</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">45.0</span><span class="number">-50.0</span> sec  <span class="number">87.8</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">50.0</span><span class="number">-55.0</span> sec  <span class="number">87.2</span> MBytes   <span class="number">146</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>] <span class="number">55.0</span><span class="number">-60.0</span> sec  <span class="number">87.8</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">3</span>]  <span class="number">0.0</span><span class="number">-60.0</span> sec  <span class="number">1.03</span> GBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line"></span><br><span class="line">To the KVM guest</span><br><span class="line">[<span class="symbol">root@</span>rhel76 ~]# iperf3 -i <span class="number">5</span> -s                                                                                                                              </span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Server listening on TCP port <span class="number">5001</span></span><br><span class="line">TCP window size: <span class="number">85.3</span> KByte (<span class="keyword">default</span>)</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">[  <span class="number">4</span>] local <span class="number">192.168</span><span class="number">.122</span><span class="number">.224</span> port <span class="number">5001</span> connected with <span class="number">192.168</span><span class="number">.122</span><span class="number">.1</span> port <span class="number">56482</span></span><br><span class="line">[ ID] Interval       Transfer     Bandwidth</span><br><span class="line">[  <span class="number">4</span>]  <span class="number">0.0</span>- <span class="number">5.0</span> sec  <span class="number">87.7</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>]  <span class="number">5.0</span><span class="number">-10.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">10.0</span><span class="number">-15.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">15.0</span><span class="number">-20.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">20.0</span><span class="number">-25.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">25.0</span><span class="number">-30.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">30.0</span><span class="number">-35.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">35.0</span><span class="number">-40.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">40.0</span><span class="number">-45.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">45.0</span><span class="number">-50.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">50.0</span><span class="number">-55.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>] <span class="number">55.0</span><span class="number">-60.0</span> sec  <span class="number">87.6</span> MBytes   <span class="number">147</span> Mbits/sec</span><br><span class="line">[  <span class="number">4</span>]  <span class="number">0.0</span><span class="number">-60.1</span> sec  <span class="number">1.03</span> GBytes   <span class="number">147</span> Mbits/sec</span><br></pre></td></tr></table></figure>

<h3 id="使用qperf"><a href="#使用qperf" class="headerlink" title="使用qperf"></a>使用qperf</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">From the KVM guest</span><br><span class="line">[<span class="symbol">root@</span>rhel76 ~]# qperf -ip <span class="number">19766</span> -t <span class="number">60</span> --use_bits_per_sec <span class="number">192.168</span><span class="number">.122</span><span class="number">.1</span> tcp_bw</span><br><span class="line">tcp_bw:</span><br><span class="line">	  bw  =  <span class="number">147</span> Mb/sec</span><br><span class="line"></span><br><span class="line">To the KVM host</span><br><span class="line">[<span class="symbol">root@</span>rhel7 ~]# qperf</span><br></pre></td></tr></table></figure>

<h2 id="0x03-結語"><a href="#0x03-結語" class="headerlink" title="0x03 結語"></a>0x03 結語</h2><p>XML修改后使用virsh reboot是不生效的。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Network </tag>
        <tag>KVM </tag>
      </tags>
  </entry>
  <entry>
    <title>抛磚引玉的一次HomeLab實踐</title>
    <url>/Ops/2020-11-29-Prompt-for-Build-Your-HomeLab.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/funwithduck.jpg" width=50% /></center>

<p>本文將阐述從HomeLab選型購買、裝機到系統安裝的一次完整的實踐。</p>
<a id="more"></a>

<h2 id="0x00-需求分析"><a href="#0x00-需求分析" class="headerlink" title="0x00 需求分析"></a>0x00 需求分析</h2><p>直接上需求</p>
<ul>
<li>低價</li>
<li>大内存，128 GiB起步</li>
<li>功耗低、靜音</li>
<li>Intel多核心CPU，滿足KVM虛擬機多開場景</li>
<li>保留顯卡升級通道</li>
<li>適配RHEL</li>
</ul>
<h2 id="0x01-硬件選購"><a href="#0x01-硬件選購" class="headerlink" title="0x01 硬件選購"></a>0x01 硬件選購</h2><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/HomeLabHardware.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/HomeLabHardware.png"></p>
<p>芯片：i9十代測試版QTB1，10C20T，定位是家用靜音低功耗，<br>主板：選擇了自帶wifi6的主板，搭配房間華爲wif6+ 使用，大小符合MATX大小。<br>散熱：i9 不講武德，不加散熱直接97℃，標配散熱。<br>内存：馬甲條子，容量和頻率+京東自營，要啥自行車。<br>固態：500GiB起步，本人機械硬盤絕緣體。<br>電源：500W夠用，600W合適，700W富裕。600W保留以後顯卡升級的功耗。<br>機箱：最便宜的就夠。<br>風扇：最便宜的就夠+1。</p>
<h2 id="0x02-上手安装"><a href="#0x02-上手安装" class="headerlink" title="0x02 上手安装"></a>0x02 上手安装</h2><h3 id="i9散熱不講武德"><a href="#i9散熱不講武德" class="headerlink" title="i9散熱不講武德"></a>i9散熱不講武德</h3><p><del><font color=#808080>(拍這個照片的時候我還發著不塗硅脂免得不好退貨這種白日夢，甚至塗了還不上散熱被熱熔了差點漏到芯片針脚。)</font></del></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/hothothot.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/hothothot.jpg"></p>
<h3 id="靈魂走綫"><a href="#靈魂走綫" class="headerlink" title="靈魂走綫"></a>靈魂走綫</h3><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/routingwithsoul.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/routingwithsoul.jpg"></p>
<h3 id="正面來一張"><a href="#正面來一張" class="headerlink" title="正面來一張"></a>正面來一張</h3><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/boxinside.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/boxinside.jpg"></p>
<h3 id="成品"><a href="#成品" class="headerlink" title="成品"></a>成品</h3><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/rhel7lab.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/rhel7lab.png"></p>
<h2 id="0x03-系統安裝"><a href="#0x03-系統安裝" class="headerlink" title="0x03 系統安裝"></a>0x03 系統安裝</h2><h3 id="簡單講一下遇到的坑和解決的方法"><a href="#簡單講一下遇到的坑和解決的方法" class="headerlink" title="簡單講一下遇到的坑和解決的方法"></a>簡單講一下遇到的坑和解決的方法</h3><h4 id="官方訂閲與epel第三方倉庫"><a href="#官方訂閲與epel第三方倉庫" class="headerlink" title="官方訂閲與epel第三方倉庫"></a>官方訂閲與epel第三方倉庫</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># subscription-manager repos --enable "rhel-*-server-rpms" --enable "rhel-*-server-extras-rpms" "rhel-*-optional-rpms" --enable "rhel-*-extras-rpms"  --enable "rhel-ha-for-rhel-*-server-rpms"</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="主板網卡驅動"><a href="#主板網卡驅動" class="headerlink" title="主板網卡驅動"></a>主板網卡驅動</h4><p>需手動配置靜態IP。</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># yum install https://mirror.rackspace.com/elrepo/elrepo/el7/x86_64/RPMS/kmod-r8125-9.003.05-1.el7_8.elrepo.x86_64.rpm</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># ethtool -i enp9s0</span></span><br><span class="line">driver: r8125</span><br><span class="line">version: 9.003.05-NAPI</span><br><span class="line">firmware-version:</span><br><span class="line">expansion-rom-version:</span><br><span class="line">bus-info: 0000:09:00.0</span><br><span class="line">supports-statistics: yes</span><br><span class="line">supports-test: no</span><br><span class="line">supports-eeprom-access: no</span><br><span class="line">supports-register-dump: yes</span><br><span class="line">supports-priv-flags: no</span><br></pre></td></tr></table></figure></code></pre><h4 id="安裝byobu"><a href="#安裝byobu" class="headerlink" title="安裝byobu"></a>安裝byobu</h4><p>右下角時間不顯示，更換老舊版本解決。</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># yum install https://rpmfind.net/linux/openmandriva/4.0/repository/x86_64/unsupported/release/byobu-5.43-2-omv4000.noarch.rpm</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="硬盤識別順序"><a href="#硬盤識別順序" class="headerlink" title="硬盤識別順序"></a>硬盤識別順序</h4><p>RHEL7識別硬盤系統有固定順序而不像RHEL8，而加裝的B/M key m.2只能在特定槽位被識別。硬盤擴容流程如下：</p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#直接用之前試裝RHEL8的操作步驟進行記錄，懶</span></span><br><span class="line"><span class="comment">#如果決定整盤擴容，分不分區都隨便。以下分區步驟僅做記錄，RHEL7上沒有分區。</span></span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME          MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda             8:0    0 238.5G  0 disk </span><br><span class="line">├─sda1          8:1    0   600M  0 part /boot/efi</span><br><span class="line">├─sda2          8:2    0     1G  0 part /boot</span><br><span class="line">└─sda3          8:3    0 236.9G  0 part </span><br><span class="line">  ├─rhel-root 253:0    0 182.9G  0 lvm  /</span><br><span class="line">  ├─rhel-swap 253:1    0     4G  0 lvm  </span><br><span class="line">  └─rhel-home 253:2    0    50G  0 lvm  /home</span><br><span class="line">nvme0n1       259:0    0 465.8G  0 disk                     &lt; --- 新盤</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># fdisk /dev/nvme0n1 </span></span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.32.1).</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">Device does not contain a recognized partition table.</span><br><span class="line">Created a new DOS disklabel with disk identifier 0xf65c9eab.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): </span><br><span class="line"></span><br><span class="line">Using default response p.</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-976773167, default 2048): </span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G,T,P&#125; (2048-976773167, default 976773167): </span><br><span class="line"></span><br><span class="line">Created a new partition 1 of <span class="built_in">type</span> <span class="string">'Linux'</span> and of size 465.8 GiB.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Hex code (<span class="built_in">type</span> L to list all codes): 8e</span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">'Linux'</span> to <span class="string">'Linux LVM'</span>.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line"></span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME          MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda             8:0    0 238.5G  0 disk </span><br><span class="line">├─sda1          8:1    0   600M  0 part /boot/efi</span><br><span class="line">├─sda2          8:2    0     1G  0 part /boot</span><br><span class="line">└─sda3          8:3    0 236.9G  0 part </span><br><span class="line">  ├─rhel-root 253:0    0 182.9G  0 lvm  /</span><br><span class="line">  ├─rhel-swap 253:1    0     4G  0 lvm  </span><br><span class="line">  └─rhel-home 253:2    0    50G  0 lvm  /home</span><br><span class="line">nvme0n1       259:0    0 465.8G  0 disk </span><br><span class="line">└─nvme0n1p1   259:2    0 465.8G  0 part </span><br><span class="line"></span><br><span class="line">lv在vg之上，vg在pv之上，直接pvcreate然後vgextend</span><br><span class="line"></span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># pvs</span></span><br><span class="line">  PV         VG   Fmt  Attr PSize    PFree</span><br><span class="line">  /dev/sda3  rhel lvm2 a--  &lt;236.89g    0 </span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># vgs</span></span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize    VFree</span></span><br><span class="line">  rhel   1   3   0 wz--n- &lt;236.89g    0 </span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG   Attr       LSize    Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  home rhel -wi-ao----   50.00g                                                    </span><br><span class="line">  root rhel -wi-ao---- &lt;182.89g                                                    </span><br><span class="line">  swap rhel -wi<span class="_">-a</span>-----    4.00g                                                    </span><br><span class="line"></span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># pvcreate /dev/nvme0n1p1 </span></span><br><span class="line">WARNING: xfs signature detected on /dev/nvme0n1p1 at offset 0. Wipe it? [y/n]: y</span><br><span class="line">  Wiping xfs signature on /dev/nvme0n1p1.</span><br><span class="line">  Physical volume <span class="string">"/dev/nvme0n1p1"</span> successfully created.</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># pvs</span></span><br><span class="line">  PV             VG   Fmt  Attr PSize    PFree  </span><br><span class="line">  /dev/nvme0n1p1      lvm2 ---   465.76g 465.76g</span><br><span class="line">  /dev/sda3      rhel lvm2 a--  &lt;236.89g      0 </span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># vgextend rhel /dev/nvme0n1p1 </span></span><br><span class="line">  Volume group <span class="string">"rhel"</span> successfully extended</span><br><span class="line"></span><br><span class="line">完成extend后可以看到已經有所屬的vg</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># pvs</span></span><br><span class="line">  PV             VG   Fmt  Attr PSize    PFree   </span><br><span class="line">  /dev/nvme0n1p1 rhel lvm2 a--  &lt;465.76g &lt;465.76g</span><br><span class="line">  /dev/sda3      rhel lvm2 a--  &lt;236.89g       0 </span><br><span class="line"></span><br><span class="line">rhel的vg也已經擴展成功</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># vgs</span></span><br><span class="line">  VG   <span class="comment">#PV #LV #SN Attr   VSize   VFree   </span></span><br><span class="line">  rhel   2   3   0 wz--n- 702.64g &lt;465.76g</span><br><span class="line"></span><br><span class="line">進行lv擴展</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG   Attr       LSize    Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  home rhel -wi-ao----   50.00g                                                    </span><br><span class="line">  root rhel -wi-ao---- &lt;182.89g                                                    </span><br><span class="line">  swap rhel -wi<span class="_">-a</span>-----    4.00g                                                    </span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># pvs</span></span><br><span class="line">  PV             VG   Fmt  Attr PSize    PFree   </span><br><span class="line">  /dev/nvme0n1p1 rhel lvm2 a--  &lt;465.76g &lt;465.76g</span><br><span class="line">  /dev/sda3      rhel lvm2 a--  &lt;236.89g       0 </span><br><span class="line"></span><br><span class="line">將剩餘的100%加到/上</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># lvextend -l +100%FREE /dev/rhel/root</span></span><br><span class="line">  Size of logical volume rhel/root changed from &lt;182.89 GiB (46819 extents) to 648.64 GiB (166053 extents).</span><br><span class="line">  Logical volume rhel/root successfully resized.</span><br><span class="line">[root@rhel8-m4d3bug ~]<span class="comment"># lvs</span></span><br><span class="line">  LV   VG   Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class="line">  home rhel -wi-ao----  50.00g                                                    </span><br><span class="line">  root rhel -wi-ao---- 648.64g                                                    </span><br><span class="line">  swap rhel -wi<span class="_">-a</span>-----   4.00g</span><br></pre></td></tr></table></figure></code></pre><h4 id="cockpit全家桶"><a href="#cockpit全家桶" class="headerlink" title="cockpit全家桶"></a>cockpit全家桶</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># yum install cockpit* -x cockpit-machines-ovirt</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># systemctl enable cockpit --now</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># firewall-cmd --add-services cockpit</span></span><br><span class="line">[root@rhel7 ~]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="v2ray客戶端"><a href="#v2ray客戶端" class="headerlink" title="v2ray客戶端"></a>v2ray客戶端</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">v2fly/fhs-install-v2ray: Bash script <span class="keyword">for</span> installing V2Ray <span class="keyword">in</span> operating systems such as Debian / CentOS / Fedora / openSUSE that support systemd</span><br><span class="line">https://github.com/v2fly/fhs-install-v2ray</span><br></pre></td></tr></table></figure></code></pre><h4 id="zerotier"><a href="#zerotier" class="headerlink" title="zerotier"></a>zerotier</h4><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel7 ~]<span class="comment"># curl -s https://install.zerotier.com/ | sudo bash</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="0x04-後記"><a href="#0x04-後記" class="headerlink" title="0x04 後記"></a>0x04 後記</h2><p>後續打算：</p>
<ul>
<li>OCP4HA集群環境搭建。</li>
<li>靶機搭建。</li>
<li>K8SHA集群環境搭建。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>RHEL </tag>
        <tag>Zerotier </tag>
        <tag>HomeLab </tag>
        <tag>Cockpit </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(特殊的Volume)</title>
    <url>/Ops/2022-02-09-Special-Volume-for-Pods.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/pod.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>先上定义，Projected Volume。译作“投射数据卷”</p>
<a id="more"></a>

<blockquote>
<p>在 Kubernetes 中，有几种特殊的 Volume，其意义不是为了存放容器里的数据，也不是用来进行Container和宿主机之间的数据交换。这些特殊 Volume 的作用，是为容器提供预先定义好的数据。所以，从容器的角度来看，这些 Volume 里的信息就是仿佛是被 Kubernetes“投射”（Project）进入容器当中的。这正是 Projected Volume 的含义。</p>
</blockquote>
<p>一共四种：</p>
<ul>
<li><p>Secret；</p>
</li>
<li><p>ConfigMap；</p>
</li>
<li><p>Downward API；</p>
</li>
<li><p>ServiceAccountToken<br>好处：</p>
</li>
<li><p>kubelet会通过etcd存储对该键值保持更新。（会有延迟</p>
<h2 id="0x01-Secret"><a href="#0x01-Secret" class="headerlink" title="0x01 Secret"></a>0x01 Secret</h2><p>普通数据值以Secrect形式存入etcd，然后按需调用。</p>
</li>
</ul>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line"></span><br><span class="line">$ cat ./username.txt</span><br><span class="line">admin</span><br><span class="line">$ cat ./password.txt</span><br><span class="line">c1oudc0w!</span><br><span class="line"></span><br><span class="line">$ kubectl create secret generic user --from-file=./username.txt</span><br><span class="line">$ kubectl create secret generic pass --from-file=./password.txt</span><br><span class="line"></span><br><span class="line">$ kubectl get secrets</span><br><span class="line">NAME           TYPE                                DATA      AGE</span><br><span class="line">user          Opaque                                1         51s</span><br><span class="line">pass          Opaque                                1         51s</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> -n <span class="string">'admin'</span> | base64</span><br><span class="line">YWRtaW4=</span><br><span class="line">$ <span class="built_in">echo</span> -n <span class="string">'cloudc0w!'</span> | base64</span><br><span class="line">Y2xvdWRjMHch</span><br><span class="line"></span><br><span class="line">$ cat secrect-create.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: mysecret</span><br><span class="line"><span class="built_in">type</span>: Opaque</span><br><span class="line">data:</span><br><span class="line">  user: YWRtaW4=</span><br><span class="line">  pass: Y2xvdWRjMHch</span><br><span class="line">$ kubectl apply -f secrect-create.yml</span><br></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat secrect-call.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span>-projected-volume </span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: <span class="built_in">test</span>-secret-volume</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - sleep</span><br><span class="line">    - <span class="string">"86400"</span></span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: mysql-cred</span><br><span class="line">      mountPath: <span class="string">"/projected-volume"</span></span><br><span class="line">      readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">  - name: mysql-cred</span><br><span class="line">    projected:</span><br><span class="line">      sources:</span><br><span class="line">      - secret:</span><br><span class="line">          name: user</span><br><span class="line">      - secret:</span><br><span class="line">          name: pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it <span class="built_in">test</span>-projected-volume -- /bin/sh</span><br><span class="line">$ ls /projected-volume/</span><br><span class="line">username.txt</span><br><span class="line">password.txt</span><br><span class="line">$ cat /projected-volume/username.txt</span><br><span class="line">root</span><br><span class="line">$ cat /projected-volume/password.txt</span><br><span class="line">cloudc0w!</span><br></pre></td></tr></table></figure>
<h2 id="0x02-ConfigMap"><a href="#0x02-ConfigMap" class="headerlink" title="0x02 ConfigMap"></a>0x02 ConfigMap</h2><p>与Secret类似，ConfigMap存储的键值对在于无加密。</p>
<h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">方法一</span><br><span class="line">$ cat configmap-create.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: game-demo</span><br><span class="line">data:</span><br><span class="line">  <span class="comment"># property-like keys; each key maps to a simple value</span></span><br><span class="line">  player_initial_lives: <span class="string">"3"</span></span><br><span class="line">  ui_properties_file_name: <span class="string">"user-interface.properties"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># file-like keys</span></span><br><span class="line">  game.properties: |</span><br><span class="line">    enemy.types=aliens,monsters</span><br><span class="line">    player.maximum-lives=5    </span><br><span class="line">  user-interface.properties: |</span><br><span class="line">    color.good=purple</span><br><span class="line">    color.bad=yellow</span><br><span class="line">    allow.textmode=<span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">$ kubectl apply -f configmap-create.yml</span><br><span class="line"></span><br><span class="line">方法二</span><br><span class="line"><span class="comment"># .properties文件的内容</span></span><br><span class="line">$ cat game.properties</span><br><span class="line">enemy.types=aliens,monsters</span><br><span class="line">player.maximum-lives=5</span><br><span class="line">$ cat user-interface.properties </span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从.properties文件创建ConfigMap</span></span><br><span class="line">$ kubectl create configmap game-demo --from-file=game.properties</span><br><span class="line">$ kubectl create configmap game-demo --from-file=user-interface.properties </span><br><span class="line"></span><br><span class="line"><span class="comment"># 以yaml模式查看这个ConfigMap里保存的信息(data)</span></span><br><span class="line">$ kubectl get configmaps game-demo -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  game.properties: <span class="string">"enemy.types=aliens,monsters\nplayer.maximum-lives=5    \n"</span></span><br><span class="line">  player_initial_lives: <span class="string">"3"</span></span><br><span class="line">  ui_properties_file_name: user-interface.properties</span><br><span class="line">  user-interface.properties: <span class="string">"color.good=purple\ncolor.bad=yellow\nallow.textmode=true</span></span><br><span class="line"><span class="string">    \ \n"</span></span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    kubectl.kubernetes.io/last-applied-configuration: |</span><br><span class="line">      &#123;<span class="string">"apiVersion"</span>:<span class="string">"v1"</span>,<span class="string">"data"</span>:&#123;<span class="string">"game.properties"</span>:<span class="string">"enemy.types=aliens,monsters\nplayer.maximum-lives=5    \n"</span>,<span class="string">"player_initial_lives"</span>:<span class="string">"3"</span>,<span class="string">"ui_properties_file_name"</span>:<span class="string">"user-interface.properties"</span>,<span class="string">"user-interface.properties"</span>:<span class="string">"color.good=purple\ncolor.bad=yellow\nallow.textmode=true  \n"</span>&#125;,<span class="string">"kind"</span>:<span class="string">"ConfigMap"</span>,<span class="string">"metadata"</span>:&#123;<span class="string">"annotations"</span>:&#123;&#125;,<span class="string">"name"</span>:<span class="string">"game-demo"</span>,<span class="string">"namespace"</span>:<span class="string">"default"</span>&#125;&#125;</span><br><span class="line">  creationTimestamp: <span class="string">"2022-02-09T10:16:28Z"</span></span><br><span class="line">  name: game-demo</span><br><span class="line">  namespace: default</span><br><span class="line">  resourceVersion: <span class="string">"4630695"</span></span><br><span class="line">  uid: f8039b07-4c1c-47d4-aecf-09c2031b16c7</span><br></pre></td></tr></table></figure>
<h3 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat configmap-create.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: configmap-demo-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: demo</span><br><span class="line">      image: alpine</span><br><span class="line">      <span class="built_in">command</span>: [<span class="string">"sleep"</span>, <span class="string">"3600"</span>]</span><br><span class="line">      env:</span><br><span class="line">        <span class="comment"># Define the environment variable</span></span><br><span class="line">        - name: PLAYER_INITIAL_LIVES <span class="comment"># Notice that the case is different here</span></span><br><span class="line">                                     <span class="comment"># from the key name in the ConfigMap.</span></span><br><span class="line">          valueFrom:</span><br><span class="line">            configMapKeyRef:</span><br><span class="line">              name: game-demo           <span class="comment"># The ConfigMap this value comes from.</span></span><br><span class="line">              key: player_initial_lives <span class="comment"># The key to fetch.</span></span><br><span class="line">        - name: UI_PROPERTIES_FILE_NAME</span><br><span class="line">          valueFrom:</span><br><span class="line">            configMapKeyRef:</span><br><span class="line">              name: game-demo</span><br><span class="line">              key: ui_properties_file_name</span><br><span class="line">      volumeMounts:</span><br><span class="line">      - name: config</span><br><span class="line">        mountPath: <span class="string">"/config"</span></span><br><span class="line">        readOnly: <span class="literal">true</span></span><br><span class="line">  volumes:</span><br><span class="line">    <span class="comment"># You set volumes at the Pod level, then mount them into containers inside that Pod</span></span><br><span class="line">    - name: config</span><br><span class="line">      configMap:</span><br><span class="line">        <span class="comment"># Provide the name of the ConfigMap you want to mount.</span></span><br><span class="line">        name: game-demo</span><br><span class="line">        <span class="comment"># An array of keys from the ConfigMap to create as files</span></span><br><span class="line">        items:</span><br><span class="line">        - key: <span class="string">"game.properties"</span></span><br><span class="line">          path: <span class="string">"game.properties"</span></span><br><span class="line">        - key: <span class="string">"user-interface.properties"</span></span><br><span class="line">          path: <span class="string">"user-interface.properties"</span></span><br><span class="line">[root@storage-k3sm configMap]<span class="comment"># kubectl exec -it configmap-demo-pod -- /bin/sh</span></span><br><span class="line">/ <span class="comment"># cd /config/</span></span><br><span class="line">/config <span class="comment"># ls</span></span><br><span class="line">game.properties            user-interface.properties</span><br><span class="line">/config <span class="comment"># cat game.properties </span></span><br><span class="line">enemy.types=aliens,monsters</span><br><span class="line">player.maximum-lives=5    </span><br><span class="line">/config <span class="comment"># cat user-interface.properties </span></span><br><span class="line">color.good=purple</span><br><span class="line">color.bad=yellow</span><br><span class="line">allow.textmode=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="0x03-Downward-API"><a href="#0x03-Downward-API" class="headerlink" title="0x03 Downward API"></a>0x03 Downward API</h2><p>直接让Pod内获取到对象本身的信息。</p>
<h3 id="创建-调用"><a href="#创建-调用" class="headerlink" title="创建+调用"></a>创建+调用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat dapi-create.yml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: kubernetes-downwardapi-volume-example</span><br><span class="line">  labels:</span><br><span class="line">    zone: us-est-coast</span><br><span class="line">    cluster: <span class="built_in">test</span>-cluster1</span><br><span class="line">    rack: rack-22</span><br><span class="line">  annotations:</span><br><span class="line">    build: two</span><br><span class="line">    builder: john-doe</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: client-container</span><br><span class="line">      image: k8s.gcr.io/busybox</span><br><span class="line">      <span class="built_in">command</span>: [<span class="string">"sh"</span>, <span class="string">"-c"</span>]</span><br><span class="line">      args:</span><br><span class="line">      - <span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">if</span> [[ -e /etc/podinfo/labels ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -en <span class="string">'\n\n'</span>; cat /etc/podinfo/labels; <span class="keyword">fi</span>;</span><br><span class="line">          <span class="keyword">if</span> [[ -e /etc/podinfo/annotations ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -en <span class="string">'\n\n'</span>; cat /etc/podinfo/annotations; <span class="keyword">fi</span>;</span><br><span class="line">          sleep 5;</span><br><span class="line">        <span class="keyword">done</span>;</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - name: podinfo</span><br><span class="line">          mountPath: /etc/podinfo</span><br><span class="line">  volumes:</span><br><span class="line">    - name: podinfo</span><br><span class="line">      downwardAPI: <span class="comment">#声明了前面要暴露给Pod的metadata.label信息给容器的/etc/podinfo/label</span></span><br><span class="line">        items:</span><br><span class="line">          - path: <span class="string">"labels"</span></span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.labels</span><br><span class="line">          - path: <span class="string">"annotations"</span></span><br><span class="line">            fieldRef:</span><br><span class="line">              fieldPath: metadata.annotations</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f dapi-create.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl logs kubernetes-downwardapi-volume-example</span><br><span class="line">cluster=<span class="string">"test-cluster1"</span></span><br><span class="line">rack=<span class="string">"rack-22"</span></span><br><span class="line">zone=<span class="string">"us-est-coast"</span></span><br><span class="line"></span><br><span class="line">build=<span class="string">"two"</span></span><br><span class="line">builder=<span class="string">"john-doe"</span></span><br></pre></td></tr></table></figure>
<p>除了metadata.labels 还有以下字段样例，最新官网自查。</p>
<figure class="highlight plain"><figcaption><span>Text</span></figcaption><table><tr><td class="code"><pre><span class="line">1. 使用fieldRef可以声明使用:</span><br><span class="line">spec.nodeName - 宿主机名字</span><br><span class="line">status.hostIP - 宿主机IP</span><br><span class="line">metadata.name - Pod的名字</span><br><span class="line">metadata.namespace - Pod的Namespace</span><br><span class="line">status.podIP - Pod的IP</span><br><span class="line">spec.serviceAccountName - Pod的Service Account的名字</span><br><span class="line">metadata.uid - Pod的UID</span><br><span class="line">metadata.labels[&#39;&lt;KEY&gt;&#39;] - 指定&lt;KEY&gt;的Label值</span><br><span class="line">metadata.annotations[&#39;&lt;KEY&gt;&#39;] - 指定&lt;KEY&gt;的Annotation值</span><br><span class="line">metadata.labels - Pod的所有Label</span><br><span class="line">metadata.annotations - Pod的所有Annotation</span><br><span class="line"></span><br><span class="line">2. 使用resourceFieldRef可以声明使用:</span><br><span class="line">容器的CPU limit</span><br><span class="line">容器的CPU request</span><br><span class="line">容器的memory limit</span><br><span class="line">容器的memory request</span><br></pre></td></tr></table></figure>
<p><a href="https://kubernetes.io/zh/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/" target="_blank" rel="noopener">官网对其作用说得很好。</a></p>
<blockquote>
<p>对于容器来说，有时候拥有自己的信息是很有用的，可避免与 Kubernetes 过度耦合。 Downward API 使得容器使用自己或者集群的信息，而不必通过 Kubernetes 客户端或 API 服务器来获得。</p>
</blockquote>
<blockquote>
<p>一个例子是有一个现有的应用假定要用一个非常熟悉的环境变量来保存一个唯一标识。 一种可能是给应用增加处理层，但这样是冗余和易出错的，而且它违反了低耦合的目标。 更好的选择是使用 Pod 名称作为标识，把 Pod 名称注入这个环境变量中。</p>
</blockquote>
<h2 id="0x04-ServiceAccountToken"><a href="#0x04-ServiceAccountToken" class="headerlink" title="0x04 ServiceAccountToken"></a>0x04 ServiceAccountToken</h2><p>其实是Secret的变种，专门用于K8s系统内置的服务账户凭证。</p>
<h3 id="调用-InClusterConfig"><a href="#调用-InClusterConfig" class="headerlink" title="调用(InClusterConfig"></a>调用(InClusterConfig</h3><p>默认情况下会把相应的密钥信息挂载进容器里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl describe pod two-containers </span></span><br><span class="line">...</span><br><span class="line">Containers:</span><br><span class="line">  nginx-container:</span><br><span class="line">    ...</span><br><span class="line">    Mounts:</span><br><span class="line">      /usr/share/nginx/html from shared-data (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-fwlgc (ro)</span><br><span class="line">  debian-container:</span><br><span class="line">    ...</span><br><span class="line">    Mounts:</span><br><span class="line">      /pod-data from shared-data (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-fwlgc (ro)</span><br><span class="line">...</span><br><span class="line">Volumes:</span><br><span class="line">  ...</span><br><span class="line">  kube-api-access-fwlgc:</span><br><span class="line">    Type:                    Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    TokenExpirationSeconds:  3607</span><br><span class="line">    ConfigMapName:           kube-root-ca.crt</span><br><span class="line">    ConfigMapOptional:       &lt;nil&gt;</span><br><span class="line">    DownwardAPI:             <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl exec -it two-containers   -- /bin/sh                                                  </span></span><br><span class="line"><span class="comment"># cd /var/run/secrets/kubernetes.io</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">serviceaccount</span><br><span class="line"><span class="comment"># cd serviceaccount</span></span><br><span class="line"><span class="comment"># ls</span></span><br><span class="line">ca.crt  namespace  token</span><br><span class="line"><span class="comment"># exit</span></span><br></pre></td></tr></table></figure>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>简单总结了几种Pod的Projected Volume的特点，适用于不同需求，与直接使用env传递最大的区别在于可以自动更新维护。做到了避免过度耦合和集群管理的平衡。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Pod </tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Wireguard主备切换架构</title>
    <url>/Ops/2023-08-27-Standby-Wireguard-Server-Deployment.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/wireguard.png" width=50% /></center>

<h2 id="0x00️⃣-前言"><a href="#0x00️⃣-前言" class="headerlink" title="0x00️⃣ 前言"></a>0x00️⃣ 前言</h2><p>本文旨在阐述个人搭建wireguard主备切换架构的细节。<a href="https://blog.madebug.net/Ops/2021-07-04-Use-Wireguard-to-rebuild-a-intranet-in-China.html">wireguard的相关搭建</a>不做赘述，主要解决单server没有冗余的问题。</p>
<a id="more"></a>

<p>组成技术栈如下：</p>
<ul>
<li>服务器主体搭建，wg-gen-web</li>
<li>配置文件同步，syncthing</li>
<li>主备DNS解析切换，cloudflare</li>
</ul>
<h2 id="0x01️⃣Wireguard"><a href="#0x01️⃣Wireguard" class="headerlink" title="0x01️⃣Wireguard"></a>0x01️⃣Wireguard</h2><p>和之前的配置略微有些不同，json api监听在0.0.0.0，便于cloudflare监控异常。完整搭建在<a href="https://blog.madebug.net/Ops/2021-07-04-Use-Wireguard-to-rebuild-a-intranet-in-China.html">这里</a>，主备都需要操作。</p>
<ul>
<li><p>wg-1</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wg-gen-web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">vx3r/wg-gen-web:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wg-gen-web</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080/tcp"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">172.24</span><span class="number">.0</span><span class="number">.1</span><span class="string">:80:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_CONF_DIR=/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_INTERFACE_NAME=wg0.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">OAUTH2_PROVIDER_NAME=fake</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_STATS_API=http://172.17.0.1:8182</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/wireguard:/data</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">  <span class="attr">wg-json-api:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">james/wg-api:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wg-json-api</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">wg-api</span> <span class="string">--device</span> <span class="string">wg0</span> <span class="string">--listen</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8182</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wg-2</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wg-gen-web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">vx3r/wg-gen-web:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wg-gen-web</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080/tcp"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">172.24</span><span class="number">.0</span><span class="number">.2</span><span class="string">:80:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_CONF_DIR=/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_INTERFACE_NAME=wg0.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">OAUTH2_PROVIDER_NAME=fake</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WG_STATS_API=http://172.17.0.1:8182</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/wireguard:/data</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">  <span class="attr">wg-json-api:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">james/wg-api:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wg-json-api</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">"host"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">wg-api</span> <span class="string">--device</span> <span class="string">wg0</span> <span class="string">--listen</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8182</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="0x02️⃣Syncthing"><a href="#0x02️⃣Syncthing" class="headerlink" title="0x02️⃣Syncthing"></a>0x02️⃣Syncthing</h2><p>然后配置Syncthing用于同步前面生成的wireguard配置文件。</p>
<ul>
<li><p>wg-1 </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">syncthing:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">syncthing/syncthing</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">syncthing</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">1</span><span class="string">-syncthing</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/wireguard:/wireguard</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span>  <span class="number">172.24</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8384:8384</span> <span class="comment"># Web UI</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">22000</span><span class="string">:22000/tcp</span> <span class="comment"># TCP file transfers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">22000</span><span class="string">:22000/udp</span> <span class="comment"># QUIC file transfers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">21027</span><span class="string">:21027/udp</span> <span class="comment"># Receive local discovery broadcasts</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>wg-2</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">syncthing:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">syncthing/syncthing</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">syncthing</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">2</span><span class="string">-syncthing</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PUID=1000</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PGID=1000</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/wireguard:/wireguard</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">172.24</span><span class="number">.0</span><span class="number">.2</span><span class="string">:8384:8384</span> <span class="comment"># Web UI</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">22000</span><span class="string">:22000/tcp</span> <span class="comment"># TCP file transfers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">22000</span><span class="string">:22000/udp</span> <span class="comment"># QUIC file transfers</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">21027</span><span class="string">:21027/udp</span> <span class="comment"># Receive local discovery broadcasts</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后网页配置它们的同步策略和互连。鼠标点点就行，没什么技术含量。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/d3a70cdd417cc494c506764912f9f5b.png" alt=""></p>
</li>
</ul>
<h2 id="0x03️⃣cloudflare"><a href="#0x03️⃣cloudflare" class="headerlink" title="0x03️⃣cloudflare"></a>0x03️⃣cloudflare</h2><p>创建load balancing，在Traffic下，依次创建Manage Monitors，Manage Pools 和 Load Balancer。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828160624.png" alt=""></p>
<ul>
<li><p>Manage Monitors</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828161815.png" alt=""></p>
</li>
<li><p>Manage Pool</p>
<p>先创建pool，然后把服务器信息填入，一个pool一台服务器，因为wireguard的模式只能允许主备方式运行。而非常规的http可以提供响应检测搭配weight来进行工作。因此我们需要设置两个pool，其中一个pool作为failback选项。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828161555.png" alt=""></p>
</li>
<li><p>Load Balancer</p>
<p>我们这里的目的是想要负载均衡，在其中一个服务器宕机的时候切换主备，而wireguard的endpoint依旧使用域名解析，因此这里的Hostname需要设入对应的域名，并且关闭cdn。因为wireguard协议不能经过cdn转发。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828161038.png" alt=""></p>
</li>
</ul>
<p>  加入对应的pool，fallback pool选择备用的ip。</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828162002.png" alt=""></p>
<p>重点设置failover这里</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828162101.png" alt=""></p>
<h2 id="0x04️⃣测试"><a href="#0x04️⃣测试" class="headerlink" title="0x04️⃣测试"></a>0x04️⃣测试</h2><p>对其中一台的grub参数修改，确保其延期重启超过60秒切换的阈值以达到模拟效果。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/default/grub</span></span><br><span class="line"><span class="attr">GRUB_TIMEOUT</span>=<span class="number">120</span></span><br><span class="line"><span class="attr">GRUB_DISTRIBUTOR</span>=<span class="string">"$(sed 's, release .*$,,g' /etc/system-release)"</span></span><br><span class="line"><span class="attr">GRUB_DEFAULT</span>=saved</span><br><span class="line"><span class="attr">GRUB_DISABLE_SUBMENU</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">GRUB_TERMINAL_OUTPUT</span>=<span class="string">"console"</span></span><br><span class="line"><span class="attr">GRUB_CMDLINE_LINUX</span>=<span class="string">"crashkernel=auto resume=/dev/mapper/almalinux-swap rd.lvm.lv=almalinux/root rd.lvm.lv=almalinux/swap"</span></span><br><span class="line"><span class="attr">GRUB_DISABLE_RECOVERY</span>=<span class="string">"true"</span></span><br><span class="line"><span class="attr">GRUB_ENABLE_BLSCFG</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># grub2-mkconfig -o /boot/grub2/grub.cfg</span></span><br><span class="line"><span class="comment"># reboot</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20230828163204.png" alt=""></p>
<p>最后顺利完成主备切换做到自愈。</p>
<h2 id="0x05️⃣-总结"><a href="#0x05️⃣-总结" class="headerlink" title="0x05️⃣ 总结"></a>0x05️⃣ 总结</h2><p>最开始的需求是wireguard希望能有ha的工作模式，因此有找到<a href="https://itnext.io/how-to-deploy-a-highly-available-wireguard-network-management-server-on-kubernetes-294e23c7abcb" target="_blank" rel="noopener">netmaker</a>这一个方案。但是显然netmaker最大的问题还是强行运行443端口，也不太确定能否支持cloudflare-tunnel作为ingress，因此放弃。然后找到一个<a href="https://noteblok.net/2022/07/28/a-highly-available-wireguard-vpn-setup/" target="_blank" rel="noopener">基于vrrp搭建</a>的高可用方案。但公网运行vrrp协议需要qugga，而这个在CentOS 8已经废弃，因此也不适合我在公网搭建的场景。最后了解到cloudflare有fallback dns的功能，$5/月，完美解决。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Network </tag>
        <tag>UDP </tag>
        <tag>Wireguard </tag>
        <tag>Syncthing </tag>
        <tag>CloudFlare </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(StatefulSet之存儲狀態)</title>
    <url>/Ops/2022-03-17-StatefulSet-with-Storage-State.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/pv&pvc.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>书接前文，StatefulSet 专注处理应用的两类状态。</p>
<a id="more"></a>
<ul>
<li>拓扑状态</li>
<li>存储状态</li>
</ul>
<h2 id="0x01-什么是PVC-与-PV"><a href="#0x01-什么是PVC-与-PV" class="headerlink" title="0x01 什么是PVC 与 PV"></a>0x01 什么是PVC 与 PV</h2><p>Q：意义何在？</p>
<p>A：1. 抽象了底层的存储类型（Ceph，GlusterFS<a href="https://blog.madebug.net/ops/2022-01-31-why-we-need-pods#:~:text=path%3A%20%22%2Ftmp%22%20%23%E6%98%BE,%E5%A4%9A%E5%89%AF%E6%9C%AC%E5%AD%98%E6%B4%BB">等</a>）保证了信息的隔离。2. 降低用户生命和使用持久化存储 Volume 的门槛。</p>
<h3 id="举两个例子："><a href="#举两个例子：" class="headerlink" title="举两个例子："></a>举两个例子：</h3><ol>
<li>Ceph RBD创建调用一条龙</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;&gt; rbd.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: rbd</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - image: kubernetes/pause</span><br><span class="line">      name: rbd-rw</span><br><span class="line">      volumeMounts:</span><br><span class="line">      - name: rbdpd</span><br><span class="line">        mountPath: /mnt/rbd</span><br><span class="line">  volumes:</span><br><span class="line">    - name: rbdpd</span><br><span class="line">      rbd:</span><br><span class="line">        monitors:</span><br><span class="line">        - <span class="string">'10.16.154.78:6789'</span></span><br><span class="line">        - <span class="string">'10.16.154.82:6789'</span></span><br><span class="line">        - <span class="string">'10.16.154.83:6789'</span></span><br><span class="line">        pool: kube</span><br><span class="line">        image: foo</span><br><span class="line">        fsType: ext4</span><br><span class="line">        readOnly: <span class="literal">true</span></span><br><span class="line">        user: admin</span><br><span class="line">        keyring: /etc/ceph/keyring</span><br><span class="line">        imageformat: <span class="string">"2"</span></span><br><span class="line">        imagefeatures: <span class="string">"layering"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>Persistent Volume Claim 创建</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;&gt; pvc.yml &lt;&lt; EOF</span><br><span class="line"><span class="comment">#声明pv</span></span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-claim</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line"><span class="comment"># 单节点可读写模式 https://kubernetes.io/zh/docs/concepts/storage/persistent-volumes/#access-modes</span></span><br><span class="line">  - ReadWriteOnce </span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 1Gi   <span class="comment"># 请求1Gi大小的资源</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ cat &gt;&gt; pv-pod.yml &lt;&lt; EOF</span><br><span class="line"><span class="comment">#声明pod</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: pv-pod</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: pv-container</span><br><span class="line">      image: nginx</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: <span class="string">"http-server"</span></span><br><span class="line">      volumeMounts:</span><br><span class="line">        - mountPath: <span class="string">"/usr/share/nginx/html"</span></span><br><span class="line">          name: pv-storage</span><br><span class="line">  volumes:</span><br><span class="line">    - name: pv-storage</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">        claimName: pv-claim <span class="comment"># 调用上面的pvc</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f pvc.yml</span><br><span class="line">$ kubectl apply -f pv-pod.yml</span><br><span class="line">$ kubectl get pvc pv-claim</span><br><span class="line">NAME       STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">pv-claim   Bound    pvc-62e18a42-c9d0-42e1-bc87-543de2e88b79   1Gi        RWO            <span class="built_in">local</span>-path     61m</span><br><span class="line">$ kubectl edit pv pvc-62e18a42-c9d0-42e1-bc87-543de2e88b79</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolume</span><br><span class="line">metadata:</span><br><span class="line">  annotations:</span><br><span class="line">    pv.kubernetes.io/provisioned-by: rancher.io/<span class="built_in">local</span>-path</span><br><span class="line">  creationTimestamp: <span class="string">"2022-03-15T13:40:49Z"</span></span><br><span class="line">  finalizers:</span><br><span class="line">  - kubernetes.io/pv-protection</span><br><span class="line">  name: pvc-62e18a42-c9d0-42e1-bc87-543de2e88b79</span><br><span class="line">  resourceVersion: <span class="string">"10135197"</span></span><br><span class="line">  uid: a63f0944-c480-4295-8419-6b4f3ee76ab0</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">  - ReadWriteOnce</span><br><span class="line">  capacity:</span><br><span class="line">    storage: 1Gi</span><br><span class="line">  claimRef:</span><br><span class="line">    apiVersion: v1</span><br><span class="line">    kind: PersistentVolumeClaim</span><br><span class="line">    name: pv-claim</span><br><span class="line">    namespace: default</span><br><span class="line">    resourceVersion: <span class="string">"10135178"</span></span><br><span class="line">    uid: 62e18a42-c9d0-42e1-bc87-543de2e88b79</span><br><span class="line">  hostPath:</span><br><span class="line">    path: /var/lib/rancher/k3s/storage/pvc-62e18a42-c9d0-42e1-bc87-543de2e88b79_default_pv-claim</span><br><span class="line">    <span class="built_in">type</span>: DirectoryOrCreate</span><br><span class="line">  nodeAffinity:</span><br><span class="line">    required:</span><br><span class="line">      nodeSelectorTerms:</span><br><span class="line">      - matchExpressions:</span><br><span class="line">        - key: kubernetes.io/hostname</span><br><span class="line">          operator: In</span><br><span class="line">          values:</span><br><span class="line">          - storage-k3sw3.m4d3bug.com</span><br><span class="line">  persistentVolumeReclaimPolicy: Delete</span><br><span class="line">  storageClassName: <span class="built_in">local</span>-path</span><br><span class="line">  volumeMode: Filesystem</span><br><span class="line">status:</span><br><span class="line">  phase: Bound</span><br></pre></td></tr></table></figure>
<p>可以看到，定义pvc和pod，关联的pv就会被一同创建，pvc关注的是上层pod调用的一些读写模式，大小。而pv关注的是下层与宿主机的联通定义。pvc更像是给开发用的一个接口，而pv是给运维针对pvc的具体实现。</p>
<p>大概就是这么一个感觉，运维&lt;— PV PVC —&gt; 开发。</p>
<h2 id="0x02-如何服务-StatefulSet"><a href="#0x02-如何服务-StatefulSet" class="headerlink" title="0x02 如何服务 StatefulSet"></a>0x02 如何服务 StatefulSet</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>还是之前的<a href="https://blog.madebug.net/ops/2022-03-07-statefulset-with-topology-state#:~:text=%E5%85%B7%E4%BD%93Pod%20IP%E3%80%82-,%E4%B8%BE%E4%B8%AA%F0%9F%8C%B0%EF%BC%9A,default.svc.cluster.local,-Why">例子</a>，稍作变更。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个statefulset带pvc的</span></span><br><span class="line">$ cat &gt;&gt; statefulset-pvc.yml &lt;&lt; EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"nginx"</span></span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.9.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: web</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: www</span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">  <span class="comment"># 定义声明一个pvc</span></span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: www</span><br><span class="line">    spec:</span><br><span class="line">      accessModes:</span><br><span class="line">      - ReadWriteOnce</span><br><span class="line">      resources:</span><br><span class="line">        requests:</span><br><span class="line">          storage: 1Gi</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看一下新建结果</span></span><br><span class="line"><span class="comment"># kubectl get pvc -l app=nginx</span></span><br><span class="line">NAME               STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span><br><span class="line">www-web-0          Bound    pvc-84f2721a-2a20-4a31-9bae-8339352488d0   1Gi        RWO            <span class="built_in">local</span>-path     22m</span><br><span class="line">www-web-1          Bound    pvc-f0a00b36-f728-40b9-b5f6-209db2e10fce   1Gi        RWO            <span class="built_in">local</span>-path     6m44s</span><br><span class="line"></span><br><span class="line"><span class="comment"># pv也跟着创建出来了</span></span><br><span class="line"><span class="comment"># kubectl get pv</span></span><br><span class="line">NAME                                      CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM STORAGECLASS                           REASON                   AGE</span><br><span class="line">pvc-84f2721a-2a20-4a31-9bae-8339352488d0   1Gi        RWO            Delete           Bound    default/www-web-0                            <span class="built_in">local</span>-path              6m16s</span><br><span class="line">pvc-f0a00b36-f728-40b9-b5f6-209db2e10fce   1Gi        RWO            Delete           Bound    default/www-web-1                            <span class="built_in">local</span>-path              6m13s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测一下</span></span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec web-$i -- sh -c 'echo hello $(hostname) &gt; /usr/share/nginx/html/index.html'; done</span></span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec -it web-$i -- apt update -y ;done</span></span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec -it web-$i -- apt install curl -y; done</span></span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec -it web-$i -- curl http://localhost; done</span></span><br><span class="line">hello web-0</span><br><span class="line">hello web-1</span><br></pre></td></tr></table></figure>
<h3 id="删除测试自重建"><a href="#删除测试自重建" class="headerlink" title="删除测试自重建"></a>删除测试自重建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl delete pod -l app=nginx --force</span></span><br><span class="line">warning: Immediate deletion does not <span class="built_in">wait</span> <span class="keyword">for</span> confirmation that the running resource has been terminated. The resource may <span class="built_in">continue</span> to run on the cluster indefinitely.</span><br><span class="line">pod <span class="string">"web-0"</span> force deleted</span><br><span class="line">pod <span class="string">"web-1"</span> force deleted</span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec -it web-$i -- apt update -y ;done</span></span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec -it web-$i -- apt install curl -y; done</span></span><br><span class="line"><span class="comment"># for i in 0 1; do kubectl exec -it web-$i -- curl http://localhost; done</span></span><br><span class="line">hello web-0</span><br><span class="line">hello web-1</span><br></pre></td></tr></table></figure>
<h2 id="0x03-StatefulSet总结"><a href="#0x03-StatefulSet总结" class="headerlink" title="0x03 StatefulSet总结"></a>0x03 StatefulSet总结</h2><ul>
<li>StatefulSet只管Pod，和deployment的编号形式不同，会更短小精简一些。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span>  `kubectl get pod -l app=nginx |awk  <span class="string">'&#123;print $1&#125;'</span> |grep -v NAME`; <span class="keyword">do</span> kubectl <span class="built_in">exec</span> -it <span class="variable">$i</span> -- hostname; <span class="keyword">done</span></span><br><span class="line">web-0</span><br><span class="line">web-1</span><br><span class="line">nginx-deployment-848bcb569b-wscf6</span><br><span class="line">nginx-deployment-848bcb569b-75fb9</span><br><span class="line">nginx-deployment-848bcb569b-s8wq9</span><br></pre></td></tr></table></figure>
<ul>
<li>headless service保证了解析记录的更新，维护了StatefulSet的拓扑状态。</li>
<li>PVC作为永久存储的一种方式，维护了StatefulSet的存储状态。</li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>StatefulSet </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(StatefulSet之拓撲狀態)</title>
    <url>/Ops/2022-03-07-StatefulSet-with-Topology-State.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/statefulset&topology.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Q：有Deployment不就够了吗？StatefulSet 又是什么？</p>
<a id="more"></a>

<p>A：Deployment: “无状态”应用√，主从 / 主备关系分布式应用x。</p>
<p>而StatefulSet专注“有状态”（Stateful Application）应用，其不外乎两类状态。</p>
<ul>
<li>拓扑状态：应用的按序创建 / 启动。</li>
<li>存储状态：应用内多个实例，与不同存储的关系。</li>
</ul>
<p>而过程就是：记录状态 —&gt; 重建pod —&gt; 恢复状态。</p>
<h2 id="0x01-Headless-Service"><a href="#0x01-Headless-Service" class="headerlink" title="0x01 Headless Service"></a>0x01 Headless Service</h2><h3 id="What"><a href="#What" class="headerlink" title="What"></a>What</h3><p>Q：什么是 Service ？</p>
<p>A：先上<a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/" target="_blank" rel="noopener">定义</a>：</p>
<blockquote>
<p>Service 是 Kubernetes 项目中用来将一组 Pod 暴露给外界访问的一种机制。比如，一个 Deployment 有 3 个 Pod，那么我就可以定义一个 Service。然后，用户只要能访问到这个 Service，它就能访问到某个具体的 Pod。</p>
</blockquote>
<h3 id="How"><a href="#How" class="headerlink" title="How"></a>How</h3><p>Q：如何访问 ？</p>
<p>A：Two ways</p>
<ul>
<li>通过 Service 的 VIP </li>
<li>通过 Service 的 DNS 解析记录，有两种处理方法。<ul>
<li>Normal Service直接访问域名获得其 VIP，例如：my-svc.my-namespace.svc.cluster.local </li>
<li>Headless Service直接查询不同域名获得具体Pod IP。</li>
</ul>
</li>
</ul>
<p>举个headless的例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat &gt;&gt; svc.yml &lt;&lt; EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: web</span><br><span class="line">  clusterIP: None <span class="comment"># 不为其分配VIP</span></span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f svc.yml &amp;&amp; kubectl get service nginx </span><br><span class="line">NAME    TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">nginx   ClusterIP   None         &lt;none&gt;        80/TCP    104s</span><br><span class="line"></span><br><span class="line">$ cat &gt;&gt; statefulset.yml &lt;&lt; EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  serviceName: <span class="string">"nginx"</span></span><br><span class="line">  replicas: 2</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.9.1</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl apply -f statefulset.yml &amp;&amp; kubectl get pods -w -l app=nginx</span><br><span class="line">NAME      READY     STATUS    RESTARTS   AGE</span><br><span class="line">web-0     0/1       Pending   0          0s</span><br><span class="line">web-0     0/1       Pending   0         0s</span><br><span class="line">web-0     0/1       ContainerCreating   0         0s</span><br><span class="line">web-0     1/1       Running   0         19s</span><br><span class="line">web-1     0/1       Pending   0         0s</span><br><span class="line">web-1     0/1       Pending   0         0s</span><br><span class="line">web-1     0/1       ContainerCreating   0         0s</span><br><span class="line">web-1     1/1       Running   0         20s</span><br><span class="line"></span><br><span class="line">$ kubectl get statefulset web</span><br><span class="line">NAME   READY   AGE</span><br><span class="line">web    2/2     9m18s</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> web-0 -- sh -c <span class="string">'hostname'</span></span><br><span class="line">web-0</span><br><span class="line">$ kubectl <span class="built_in">exec</span> web-1 -- sh -c <span class="string">'hostname'</span></span><br><span class="line">web-1</span><br><span class="line"></span><br><span class="line"><span class="comment">#尝试解释一下</span></span><br><span class="line">$ kubectl run -i --tty --image busybox:1.28.4 dns-test --restart=Never --rm /bin/sh</span><br><span class="line">/ <span class="comment"># nslookup web-0.nginx</span></span><br><span class="line">Server:    10.43.0.10</span><br><span class="line">Address 1: 10.43.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      web-0.nginx</span><br><span class="line">Address 1: 10.42.3.239 web-0.nginx.default.svc.cluster.local</span><br><span class="line">/ <span class="comment"># nslookup web-1.nginx</span></span><br><span class="line">Server:    10.43.0.10</span><br><span class="line">Address 1: 10.43.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      web-1.nginx</span><br><span class="line">Address 1: 10.42.1.198 web-1.nginx.default.svc.cluster.local</span><br></pre></td></tr></table></figure>
<h3 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h3><p>Q：有何用？</p>
<p>A：StatefulSet通过原先的顺序（web-0，web-1），名字，重新创造出它们，连解析记录都保持（而非IP结果）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete pod -l app=nginx</span><br><span class="line">pod <span class="string">"web-0"</span> deleted</span><br><span class="line">pod <span class="string">"web-1"</span> deleted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl get pod -w -l app=nginx</span><br><span class="line">NAME    READY   STATUS        RESTARTS   AGE</span><br><span class="line">web-1   0/1     Terminating   0          139m</span><br><span class="line">web-0   1/1     Running       0          39s</span><br><span class="line">web-0   1/1     Terminating   0          42s</span><br><span class="line">web-0   0/1     Terminating   0          43s</span><br><span class="line">web-0   0/1     Terminating   0          43s</span><br><span class="line">web-0   0/1     Terminating   0          43s</span><br><span class="line">web-0   0/1     Pending       0          0s</span><br><span class="line">web-0   0/1     Pending       0          0s</span><br><span class="line">web-0   0/1     ContainerCreating   0          0s</span><br><span class="line">web-0   1/1     Running             0          1s</span><br><span class="line">web-1   0/1     Terminating         0          140m</span><br><span class="line">web-1   0/1     Terminating         0          140m</span><br><span class="line">web-1   0/1     Pending             0          0s</span><br><span class="line">web-1   0/1     Pending             0          0s</span><br><span class="line">web-1   0/1     ContainerCreating   0          0s</span><br><span class="line">web-1   1/1     Running             0          1s</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl run -i --tty --image busybox:1.28.4 dns-test --restart=Never --rm /bin/sh</span></span><br><span class="line">If you don<span class="string">'t see a command prompt, try pressing enter.</span></span><br><span class="line"><span class="string">/ #  nslookup web-0.nginx &amp;&amp;  nslookup web-1.nginx</span></span><br><span class="line"><span class="string">Server:    10.43.0.10</span></span><br><span class="line"><span class="string">Address 1: 10.43.0.10 kube-dns.kube-system.svc.cluster.local</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Name:      web-0.nginx</span></span><br><span class="line"><span class="string">Address 1: 10.42.3.244 web-0.nginx.default.svc.cluster.local</span></span><br><span class="line"><span class="string">Server:    10.43.0.10</span></span><br><span class="line"><span class="string">Address 1: 10.43.0.10 kube-dns.kube-system.svc.cluster.local</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Name:      web-1.nginx</span></span><br><span class="line"><span class="string">Address 1: 10.42.1.199 web-1.nginx.default.svc.cluster.local</span></span><br></pre></td></tr></table></figure>
<h2 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h2><p>本文阐述了，在headless Service的场景里，通过StatefulSet的配合，完成对有状态应用的创建，删除，自恢复。这种记录的保存，正是StatefulSet保存有拓扑状态的办法。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>StatefulSet </tag>
      </tags>
  </entry>
  <entry>
    <title>使用Wireguard基於國内網絡異地組網實踐</title>
    <url>/Ops/2021-07-04-Use-Wireguard-to-rebuild-a-intranet-in-China.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/wireguard.png" width=50% /></center>

<h2 id="0x00️⃣-前言"><a href="#0x00️⃣-前言" class="headerlink" title="0x00️⃣ 前言"></a>0x00️⃣ 前言</h2><p>本文旨在阐述个人使用wireguard基于国内网络异地组网实践的细节。</p>
<a id="more"></a>

<h2 id="0x01️⃣-需求分析"><a href="#0x01️⃣-需求分析" class="headerlink" title="0x01️⃣ 需求分析"></a>0x01️⃣ 需求分析</h2><p>需求有哪些：</p>
<ul>
<li>异地家庭带宽下组网。</li>
<li>运行环境繁多，包括但不仅限于，Android、IOS、软路由、Windows、Linux、MacOS、K8s等。</li>
<li>延迟低于100ms。</li>
<li>客户端稳定，维护简单，便于后续更新迭代。</li>
<li>经济实惠。</li>
<li>高可用，便于切换、切换顺滑。</li>
<li>不过度依赖国内服务。</li>
<li>安全可靠。</li>
</ul>
<p>DDNS，国内挂靠域名。公网IP，需要耗费防护精力。Zerotier，客户端不稳定。Tailscale，客户端时延过大。n2n，未深入。frp，基于端口不利于过多进程场景，等等等等……</p>
<p>Wireguard，被Linus盛赞的艺术，前几年刚出的时候接触过，印象颇为深刻。这几年来被身边各种各样的资讯推荐，youtube，公众号。似乎它已经足够成熟了，于是有了本文。</p>
<h2 id="0x02️⃣-服务端"><a href="#0x02️⃣-服务端" class="headerlink" title="0x02️⃣ 服务端"></a>0x02️⃣ 服务端</h2><p>服务端主要负责以下几项工作：</p>
<ul>
<li>自动生成配置文件</li>
<li>自动加载配置文件</li>
<li>转发流量</li>
</ul>
<p>演示使用Ubuntu 20.04 TLS，其他发行版请参照<a href="https://fuckcloudnative.io/posts/wireguard-docs-practice/" target="_blank" rel="noopener">这里</a>。</p>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apt install wireguard wireguard-tools  byobu docker.io docker-compose -y</span></span><br></pre></td></tr></table></figure>

<h3 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 内核转发</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.ip_forward = 1"</span> &gt;&gt; /etc/sysctl.d/99-sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.conf.all.proxy_arp = 1"</span> &gt;&gt; /etc/sysctl.d/99-sysctl.conf</span><br><span class="line">sysctl -p /etc/sysctl.d/99-sysctl.conf</span><br><span class="line"></span><br><span class="line">$ iptables配置端口转发自定义网段</span><br><span class="line">iptables -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i wg0 -o wg0 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">iptables -t nat -A POSTROUTING -s 10.9.8.0/24 -o eth0 -j MASQUERADE</span><br><span class="line"></span><br><span class="line">$ 初始化wireguard</span><br><span class="line">chmod 700 /etc/wireguard/</span><br><span class="line">wg-quick up wg0</span><br><span class="line">wg-quick down wg0</span><br></pre></td></tr></table></figure>

<h3 id="托管设置"><a href="#托管设置" class="headerlink" title="托管设置"></a>托管设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 直接使用wg-gen-web管理, 容器运行填入docker0的IP</span><br><span class="line">cat &gt; docker-compose.yaml &lt;&lt; EOF</span><br><span class="line">version: <span class="string">'3.6'</span></span><br><span class="line">services:</span><br><span class="line">  wg-gen-web:</span><br><span class="line">    image: vx3r/wg-gen-web:latest</span><br><span class="line">    container_name: wg-gen-web</span><br><span class="line">    restart: always</span><br><span class="line">    expose:</span><br><span class="line">      - <span class="string">"8080/tcp"</span></span><br><span class="line">    ports:</span><br><span class="line">      - 8888:8080</span><br><span class="line">    environment:</span><br><span class="line">      - WG_CONF_DIR=/data</span><br><span class="line">      - WG_INTERFACE_NAME=wg0.conf</span><br><span class="line">      - OAUTH2_PROVIDER_NAME=fake</span><br><span class="line">      - WG_STATS_API=http://172.17.0.1:8182</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/wireguard:/data</span><br><span class="line">    network_mode: bridge</span><br><span class="line">    depends_on:</span><br><span class="line">      - wg-json-api</span><br><span class="line">  wg-json-api:</span><br><span class="line">    image: james/wg-api:latest</span><br><span class="line">    container_name: wg-json-api</span><br><span class="line">    restart: always</span><br><span class="line">    cap_add:</span><br><span class="line">      - NET_ADMIN</span><br><span class="line">    network_mode: <span class="string">"host"</span></span><br><span class="line">    <span class="built_in">command</span>: wg-api --device wg0 --listen 172.17.0.1:8182</span><br><span class="line">EOF</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="软件设置"><a href="#软件设置" class="headerlink" title="软件设置"></a>软件设置</h3><p>web访问&lt;web_ip:8888&gt;进行配置</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/wireguardserver.png?raw=ture" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/wireguardserver.png?raw=ture"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 检查生成的配置文件</span><br><span class="line">nano /etc/wireguard/wg0.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Updated: 2021-06-14 09:51:23.220280864 +0000 UTC / Created: 2021-06-12 18:27:38.627308446 +0000 UTC</span></span><br><span class="line">[Interface]</span><br><span class="line">Address = 10.9.8.1/24</span><br><span class="line">ListenPort = 9999</span><br><span class="line">PrivateKey = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line">PreUp = <span class="built_in">echo</span> WireGuard PreUp</span><br><span class="line">PostUp = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br><span class="line">PreDown = <span class="built_in">echo</span> WireGuard PreDown</span><br><span class="line">PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<h3 id="自动化管理"><a href="#自动化管理" class="headerlink" title="自动化管理"></a>自动化管理</h3><p>自动加载配置文件、自动生成配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 加入ExecReload在不中断活跃连接的情况下重新加载配置文件</span><br><span class="line">cat /usr/lib/systemd/system/wg-quick@.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=WireGuard via wg-quick(8) <span class="keyword">for</span> %I</span><br><span class="line">After=network-online.target nss-lookup.target</span><br><span class="line">Wants=network-online.target nss-lookup.target</span><br><span class="line">PartOf=wg-quick.target</span><br><span class="line">Documentation=man:wg-quick(8)</span><br><span class="line">Documentation=man:wg(8)</span><br><span class="line">Documentation=https://www.wireguard.com/</span><br><span class="line">Documentation=https://www.wireguard.com/quickstart/</span><br><span class="line">Documentation=https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8</span><br><span class="line">Documentation=https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/bin/wg-quick up %i</span><br><span class="line">ExecStop=/usr/bin/wg-quick down %i</span><br><span class="line">ExecReload=/bin/bash -c <span class="string">'exec /usr/bin/wg syncconf %i &lt;(exec /usr/bin/wg-quick strip %i)'</span></span><br><span class="line">Environment=WG_ENDPOINT_RESOLUTION_RETRIES=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ 为wg-gen-web添加自动Reload</span><br><span class="line">cat &gt; /etc/systemd/system/wg-gen-web.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Restart WireGuard</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/usr/bin/systemctl reload wg-quick@wg0.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ 添加wg-gen-web监听路径</span><br><span class="line">cat &gt; /etc/systemd/system/wg-gen-web.path &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Watch /etc/wireguard <span class="keyword">for</span> changes</span><br><span class="line"></span><br><span class="line">[Path]</span><br><span class="line">PathModified=/etc/wireguard</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ 刷新上述配置</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">wg-quick down wg0</span><br><span class="line">systemctl <span class="built_in">enable</span> wg-gen-web.service wg-gen-web.path wg-quick@wg0 --now</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/wg_client_setup.png?raw=ture" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/wg_client_setup.png?raw=ture"></p>
<p>当然，另外你还会需要为这个页面做一个密码防护。[Nginx Basic Authentication]</p>
<h2 id="0x03️⃣-客户端"><a href="#0x03️⃣-客户端" class="headerlink" title="0x03️⃣ 客户端"></a>0x03️⃣ 客户端</h2><h3 id="软件安装-1"><a href="#软件安装-1" class="headerlink" title="软件安装"></a>软件安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install wireguard wireguard-tools -y</span><br></pre></td></tr></table></figure>

<h3 id="软件设置-1"><a href="#软件设置-1" class="headerlink" title="软件设置"></a>软件设置</h3><p>从服务端直接下载客户端配置文件到<strong>/etc/wireguard/</strong>，并命名为<strong>wg0.conf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 加入ExecReload在不中断活跃连接的情况下重新加载配置文件</span><br><span class="line">cat &gt; /usr/lib/systemd/system/wg-quick@.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=WireGuard via wg-quick(8) <span class="keyword">for</span> %I</span><br><span class="line">After=network-online.target nss-lookup.target</span><br><span class="line">Wants=network-online.target nss-lookup.target</span><br><span class="line">PartOf=wg-quick.target</span><br><span class="line">Documentation=man:wg-quick(8)</span><br><span class="line">Documentation=man:wg(8)</span><br><span class="line">Documentation=https://www.wireguard.com/</span><br><span class="line">Documentation=https://www.wireguard.com/quickstart/</span><br><span class="line">Documentation=https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8</span><br><span class="line">Documentation=https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">RemainAfterExit=yes</span><br><span class="line">ExecStart=/usr/bin/wg-quick up %i</span><br><span class="line">ExecStop=/usr/bin/wg-quick down %i</span><br><span class="line">ExecReload=/bin/bash -c <span class="string">'exec /usr/bin/wg syncconf %i &lt;(exec /usr/bin/wg-quick strip %i)'</span></span><br><span class="line">Environment=WG_ENDPOINT_RESOLUTION_RETRIES=infinity</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl <span class="built_in">enable</span> wg-quick@wg0 --now</span><br></pre></td></tr></table></figure>

<h2 id="0x04️⃣-进阶"><a href="#0x04️⃣-进阶" class="headerlink" title="0x04️⃣ 进阶"></a>0x04️⃣ 进阶</h2><p>至此，你已经可以拥有一个基于wireguard搭建的中继局域网了。但我们还有部分需求没解决。</p>
<ul>
<li>不过度依赖国内服务。</li>
</ul>
<p>其实这一层的隐忧，就是vps的续费问题，可以看见上面的配置文件我使用的是中继服务器的域名进行设定，手动切换域名解析的影响对我来说是可以接受的。但还需要客户端做一个额外设定进行配合。</p>
<h3 id="客户端额外配置"><a href="#客户端额外配置" class="headerlink" title="客户端额外配置"></a>客户端额外配置</h3><p><a href="https://lists.zx2c4.com/pipermail/wireguard/2017-November/002028.html" target="_blank" rel="noopener">wireguard的域名解析并不是每个请求都执行的</a>。因此我们需要为客户端进程添加一个定时脚本，来帮助其定时重新解析，以便在问题发生时，我们只需要关注域名的解析情况，即可达到蓝绿切换的功能，<strong>但需要提醒一点，这样子做的不可控点在于域名解析生效的时长，请预留足够的窗口操作期，并配合良好的监控机制</strong>。以下例子仅包含CentOS7 和Ubuntu 20.04、<a href="https://wiki.archlinux.org/title/WireGuard#:~:text=details-,endpoint%20with%20changing%20ip,-After" target="_blank" rel="noopener">这里是Archlinux的出处</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ 查找wireguard-tools包含的解决脚本</span><br><span class="line"></span><br><span class="line"><span class="comment"># find / -name reresolve-dns.sh</span></span><br><span class="line">Ubuntu</span><br><span class="line">/usr/share/doc/wireguard-tools/examples/reresolve-dns/reresolve-dns.sh</span><br><span class="line">CentOS</span><br><span class="line">/usr/share/doc/wireguard-tools-1.0.20210424/contrib/reresolve-dns/reresolve-dns.sh</span><br><span class="line"></span><br><span class="line">$ 设置启动后3秒执行，每9秒一次的定时器</span><br><span class="line">cat &gt; /etc/systemd/system/wireguard_reresolve-dns.timer &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Periodically reresolve DNS of all WireGuard endpoints</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnActiveSec=3</span><br><span class="line">OnUnitActiveSec=9</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$ 设置相应的脚本执行重解析重reload，oneshot可以多个ExecStart</span><br><span class="line">cat &gt; /etc/systemd/system/wireguard_reresolve-dns.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Reresolve DNS of all WireGuard endpoints</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/bin/sh -c <span class="string">'for i in /etc/wireguard/*.conf; do `find / -name reresolve-dns.sh` "$i"; done'</span></span><br><span class="line">ExecStart=/usr/bin/systemctl reload wg-quick@wg0.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> wg-quick@wg0 --now |systemctl reload wg-quick@wg0</span><br><span class="line">systemctl <span class="built_in">enable</span> wireguard_reresolve-dns.timer wireguard_reresolve-dns.service --now</span><br></pre></td></tr></table></figure>

<h2 id="0x05️⃣-测速"><a href="#0x05️⃣-测速" class="headerlink" title="0x05️⃣ 测速"></a>0x05️⃣ 测速</h2><p>完成上述设定之后，顺手做了一个国内的测速。很有幸处在UDP表现良好的地域，并且突破了良心云限定的带宽墙。(你没看错，就是用tcp_bw测，或者你喜欢可以用udp_bw看看结果)</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/speed_test_from_client.jpg?raw=true" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/speed_test_from_client.jpg?raw=true"></p>
<h2 id="0x06️⃣-总结"><a href="#0x06️⃣-总结" class="headerlink" title="0x06️⃣ 总结"></a>0x06️⃣ 总结</h2><ul>
<li>后续可以玩得更花一点。</li>
<li>本文放弃了full mesh的组网方式。<del>显然我比较懒。</del></li>
<li><a href="https://blog.madebug.net/Ops/2023-08-27-Standby-Wireguard-Server-Deployment.html">cloudflare支持dns的fallback设置，五刀一个月，可以允许单点故障时解析到另一个ip</a>。</li>
<li>有理由相信，会逐渐开放对UDP的相关QOS策略，毕竟http3 就是基于udp实现的。</li>
<li>切换服务器时需要的窗口期比较长，可以配合tcpdump在客户端抓包观察，并且不要急着销毁已经在工作的实例。</li>
<li>扩展设定未在更多客户端进行测试。<del>显然我比较懒。</del></li>
<li>国内互联互通，其实是对VPN不拦截的。特征明显，但不敏感。</li>
<li>wireguard发展日趋成熟稳定，某大厂已经用在公司关键网络负载了。</li>
</ul>
<h2 id="0x07️⃣-鸣谢"><a href="#0x07️⃣-鸣谢" class="headerlink" title="0x07️⃣ 鸣谢"></a>0x07️⃣ 鸣谢</h2><ul>
<li><a href="https://fuckcloudnative.io/posts/configure-wireguard-using-wg-gen-web/" target="_blank" rel="noopener">WireGuard 配置教程：使用 wg-gen-web 来管理 WireGuard 的配置 – 云原生实验室 - Kubernetes|Docker|Istio|Envoy|Hugo|Golang|云原生</a></li>
<li><a href="https://wiki.archlinux.org/title/WireGuard" target="_blank" rel="noopener">WireGuard - ArchWiki</a></li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Network </tag>
        <tag>UDP </tag>
        <tag>Wireguard </tag>
      </tags>
  </entry>
  <entry>
    <title>基於Zerotier搭建NFS的TPOT蜜罐嘗試</title>
    <url>/Sec/2020-07-11-Use-Zerotier-to-build-a-honeypot.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/tpotsocial.png" width=50% /></center>

<p>本文將通過<a href="https://blog.madebug.net/ops/2020-06-15-use-zerotier-to-build-a-intranet-in-china">Zerotier</a>嘗試搭建nfs來給因爲<del><font color=#808080>沒錢</font></del>硬盤空間不足的雲服務器提供後端存儲以滿足TPOT的安裝需求。</p>
<a id="more"></a>

<h2 id="Zerotier部分"><a href="#Zerotier部分" class="headerlink" title="Zerotier部分"></a>Zerotier部分</h2><hr>
<p><a href="https://blog.madebug.net/ops/2020-06-15-use-zerotier-to-build-a-intranet-in-china">略</a></p>
<h2 id="NFS部分"><a href="#NFS部分" class="headerlink" title="NFS部分"></a>NFS部分</h2><hr>
<h3 id="服務端"><a href="#服務端" class="headerlink" title="服務端"></a>服務端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># yum -y install nfs-utils</span></span><br><span class="line">~]<span class="comment"># vi /etc/idmapd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># line 5: uncomment and change to your domain name</span></span><br><span class="line">Domain = madebug.net</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># vi /etc/exports</span></span><br><span class="line"><span class="comment"># write settings for NFS exports</span></span><br><span class="line">/home 10.9.8.167/32(rw,no_root_squash)   &lt;--- 雲服務器的zerotier ip，一碌柒</span><br><span class="line"></span><br><span class="line">~]<span class="comment"># systemctl start rpcbind nfs-server</span></span><br><span class="line">~]<span class="comment"># systemctl enable rpcbind nfs-server</span></span><br><span class="line">~]<span class="comment"># firewall-cmd --add-service=nfs --permanent</span></span><br><span class="line">~]<span class="comment"># firewall-cmd --reload</span></span><br></pre></td></tr></table></figure>

<h3 id="客戶端"><a href="#客戶端" class="headerlink" title="客戶端"></a>客戶端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~<span class="comment"># apt -y install nfs-common</span></span><br><span class="line">~<span class="comment"># vi /etc/hosts</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># last line: add local storage server ip</span></span><br><span class="line">10.9.8.166 storage1.madebug.net</span><br><span class="line"></span><br><span class="line">~<span class="comment"># vi /etc/idmapd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># line 6: uncomment and change to your domain name</span></span><br><span class="line">Domain = madebug.net</span><br><span class="line"></span><br><span class="line">~<span class="comment"># mount -t nfs storage1.madebug.net:/home /data</span></span><br><span class="line">~<span class="comment"># df -TH</span></span><br><span class="line">Filesystem                 Type      Size  Used Avail Use% Mounted on</span><br><span class="line">udev                       devtmpfs  4.1G     0  4.1G   0% /dev</span><br><span class="line">tmpfs                      tmpfs     824M  8.9M  815M   2% /run</span><br><span class="line">/dev/vda1                  ext4       53G  2.5G   49G   5% /</span><br><span class="line">tmpfs                      tmpfs     4.2G   25k  4.2G   1% /dev/shm</span><br><span class="line">tmpfs                      tmpfs     5.3M     0  5.3M   0% /run/lock</span><br><span class="line">tmpfs                      tmpfs     4.2G     0  4.2G   0% /sys/fs/cgroup</span><br><span class="line">tmpfs                      tmpfs     824M     0  824M   0% /run/user/0</span><br><span class="line">storage1.madebug.net:/home nfs4      169G   35M  169G   1% /data</span><br><span class="line">~<span class="comment"># vi /etc/fstab</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># add to the end like follows</span></span><br><span class="line">storage1.madebug.net:/home   /data  nfs     defaults        0       0</span><br><span class="line"></span><br><span class="line">~<span class="comment"># mount -a</span></span><br></pre></td></tr></table></figure>

<h2 id="TPOT部分"><a href="#TPOT部分" class="headerlink" title="TPOT部分"></a>TPOT部分</h2><hr>
<p>設置好所需的代理。<del><font color=#808080>不知道怎麽設置的可以等我以後水一篇再補上。</font></del></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~<span class="comment"># grep -vE '^#|^$' /etc/apt/sources.list</span></span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main</span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ buster main        </span><br><span class="line">deb http://security.debian.org/debian-security buster/updates main     </span><br><span class="line">deb-src http://security.debian.org/debian-security buster/updates main </span><br><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main    </span><br><span class="line">deb-src http://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main</span><br><span class="line">~<span class="comment"># apt update</span></span><br><span class="line">~<span class="comment"># apt install \</span></span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">~<span class="comment"># curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span></span><br><span class="line">~<span class="comment"># add-apt-repository \</span></span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br><span class="line">~<span class="comment"># apt update</span></span><br><span class="line">~<span class="comment"># apt install -y docker-ce docker-ce-cli containerd.io python3-pip zlib*</span></span><br><span class="line">~<span class="comment"># pip3 install docker-compose</span></span><br><span class="line">~<span class="comment"># pip3 install elasticsearch-curator</span></span><br><span class="line">~<span class="comment"># git clone https://github.com/dtag-dev-sec/tpotce</span></span><br><span class="line">~<span class="comment"># cd tpotce/iso/installer/</span></span><br><span class="line">~<span class="comment"># ./install.sh --type=user</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重啓后來啓動所有容器</span></span><br><span class="line">~<span class="comment"># docker-compose -f ./standard.yml up -d</span></span><br></pre></td></tr></table></figure>

<p>訪問 <a href="https://IP:64297/" target="_blank" rel="noopener">https://IP:64297/</a></p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><ul>
<li><p>Zerotier組網天下第一，甚至用來提供後端存儲也是可行的。</p>
</li>
<li><p><del><font color=#808080><a href="https://www.freebuf.com/articles/network/208895.html" target="_blank" rel="noopener">甚至還能這樣玩。</a></font></del></p>
</li>
<li><p>以及鳴謝以下鏈接：</p>
<ul>
<li><a href="https://www.izhuhn.cn/index.php/2019/05/24/开源蜜罐t-pot-19-03安装和使用/" target="_blank" rel="noopener">开源蜜罐t-pot-19-03安装和使用</a></li>
<li><a href="https://www.freebuf.com/sectool/134504.html" target="_blank" rel="noopener">T-Pot多蜜罐平台：让蜜罐实现更简单</a></li>
<li><a href="https://www.freebuf.com/sectool/178998.html" target="_blank" rel="noopener">基于Docker的蜜罐平台搭建：T-Pot 17.10</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Sec </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Zerotier </tag>
        <tag>NFS </tag>
        <tag>TPOT </tag>
      </tags>
  </entry>
  <entry>
    <title>使用headscale搭建國内局域網</title>
    <url>/Ops/2022-10-16-Start-with-headscale.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221016212516.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>什么是headscale ？</p>
<a id="more"></a>

<blockquote>
<p><em>An open source, self-hosted implementation of the Tailscale control server.</em></p>
</blockquote>
<p>什么是Tailscale ？</p>
<blockquote>
<p><em>Tailscale is <a href="https://tailscale.com/" target="_blank" rel="noopener">a modern VPN</a> built on top of <a href="https://www.wireguard.com/" target="_blank" rel="noopener">Wireguard</a>. It <a href="https://tailscale.com/blog/how-tailscale-works/" target="_blank" rel="noopener">works like an overlay network</a> between the computers of your networks - using <a href="https://tailscale.com/blog/how-nat-traversal-works/" target="_blank" rel="noopener">NAT traversal</a>.</em></p>
<p><em>Everything in Tailscale is Open Source, except the GUI clients for proprietary OS (Windows and macOS/iOS), and the control server.</em></p>
<p><em>The control server works as an exchange point of Wireguard public keys for the nodes in the Tailscale network. It assigns the IP addresses of the clients, creates the boundaries between each user, enables sharing machines between users, and exposes the advertised routes of your nodes.</em></p>
<p><em>A <a href="https://tailscale.com/kb/1136/tailnet/" target="_blank" rel="noopener">Tailscale network (tailnet)</a> is private network which Tailscale assigns to a user in terms of private users or an organisation.</em></p>
</blockquote>
<p>之前使用wireguard和zerotier（甚至还试了docker版的zerotier root模式）搭建了局域网，现在用headscale再额外搭一个网。有人会嫌网络多吗？反正我不会。我对搭局域网的打洞软件要求不外乎是那么几点：</p>
<ul>
<li>可迁移</li>
<li>不跨境</li>
<li>最好有面板</li>
</ul>
<h2 id="0x01-前置准备"><a href="#0x01-前置准备" class="headerlink" title="0x01 前置准备"></a>0x01 前置准备</h2><ul>
<li>docker</li>
<li>docker-compose</li>
<li><a href="https://www.cloudflare.com/zh-cn/products/tunnel/" target="_blank" rel="noopener">cloudflare tunnel</a> (自行注册，需要绑定支付方式)</li>
<li>域名托管在cloudflare </li>
</ul>
<h2 id="0x02-headscale服务端"><a href="#0x02-headscale服务端" class="headerlink" title="0x02 headscale服务端"></a>0x02 headscale服务端</h2><ul>
<li><strong>headscale部分</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p headscale/container-config</span><br><span class="line">cd headscale/container-config</span><br><span class="line">wget -O ./config.yaml https://raw.githubusercontent.com/juanfont/headscale/main/config-example.yaml</span><br><span class="line">sed -i '13c server_url\: https\:\/\/&lt;your-domain&gt;' config.yaml #加入时的回显内容，可选项</span><br><span class="line">sed -i 's|unix_socket: /var/run/headscale/headscale.sock|unix_socket: /var/run/headscale.sock|' config.yaml </span><br><span class="line">sed -i 's/127\.0\.0\.1/0\.0\.0\.0/g' config.yaml</span><br><span class="line">sed -i '68c \ ' config.yaml #注释掉ipv6网段，可选项</span><br><span class="line">cd ..</span><br><span class="line">cat &gt; docker-compose.yaml &lt;&lt; EOF</span><br><span class="line">services:</span><br><span class="line">  headscale:</span><br><span class="line">    container_name: headscale</span><br><span class="line">    #    image: headscale/headscale:latest-alpine </span><br><span class="line">    image: headscale/headscale:0.16.4 #最新版对cloudflare的websocket支持似乎有问题 </span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - ./container-config:/etc/headscale</span><br><span class="line">      - ./container-data:/var/lib/headscale</span><br><span class="line">    entrypoint: headscale serve</span><br><span class="line">    networks:</span><br><span class="line">      reverseproxy-nw:</span><br><span class="line"></span><br><span class="line">  headscale-ui:</span><br><span class="line">    container_name: headscale-ui</span><br><span class="line">    # image: ghcr.io/gurucomputing/headscale-ui:latest </span><br><span class="line">    image: madebug/ghcr.io.gurucomputing.headscale-ui:latest #sync了一个在dockerhub</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      reverseproxy-nw:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  reverseproxy-nw:</span><br><span class="line">    external: true</span><br><span class="line">EOF</span><br><span class="line">docker network create reverseproxy-nw</span><br><span class="line">docker-compose up -d </span><br><span class="line">curl http://0.0.0.0:8080/windows</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>cloudflare tunnel部分</strong></p>
<p>​         众所周知，国内的vps的80和443都是默认不启用的，这里用cloudflare tunnel绕过80和443的限制，并且转发headscale-ui和headscale的服务达到国内vps就可以搭建的目的。</p>
<p>​        <a href="https://dash.teams.cloudflare.com/" target="_blank" rel="noopener">打开cloudflare zero trust的界面</a>，Access &gt;&gt; Tunnels &gt;&gt; Create a tunnel &gt;&gt; Tunnel name(随便填) &gt;&gt; Save tunnel &gt;&gt; Docker</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221018183537.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221018184140.png" alt=""></p>
<p>​      在完成上述cloudflare tunnel侧的设置，就可以回到vps，尝试进行cloudflared的第一次创建和连接。注意加入<code>--network reverseproxy-nw</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --network reverseproxy-nw cloudflare/cloudflared:latest tunnel --no-autoupdate run --token eyJhIjoiY2I5YzllOGY0ZjE3ZjFmOGU2NmIyOWU5N2M3NTIxNjIiLCJ0IjoiNTQ0OTFiY2ItMjMwMS00ZTI5LTk3OTgtN2E0OWI1Yzk5ZjNmIiwicyI6Ik1HTTRaVEkwTW1RdFlqWmxNaTAwT0RrekxUbGhPVFF0WWpBNFpUQTRNemMwT0RReSJ9</span></span><br><span class="line">2022-10-18T10:59:08Z INF Thank you for trying Cloudflare Tunnel. Doing so, without a Cloudflare account, is a quick way to experiment and try it out. However, be aware that these account-less Tunnels have no uptime guarantee. If you intend to use Tunnels in production you should use a pre-created named tunnel by following: https://developers.cloudflare.com/cloudflare-one/connections/connect-apps</span><br><span class="line">2022-10-18T10:59:08Z INF Requesting new quick Tunnel on trycloudflare.com...</span><br><span class="line">2022-10-18T10:59:11Z INF +--------------------------------------------------------------------------------------------+</span><br><span class="line">2022-10-18T10:59:11Z INF |  Your quick Tunnel has been created! Visit it at (it may take some time to be reachable):  |</span><br><span class="line">2022-10-18T10:59:11Z INF |  https://bars-bidding-tucson-transportation.trycloudflare.com                              |</span><br><span class="line">2022-10-18T10:59:11Z INF +--------------------------------------------------------------------------------------------+</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>​        进展顺利，你就可以看到connectors显示以下信息了</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221018190900.png" alt=""></p>
<p>​        点击next进行headscale-ui的设置，，注意路径，以及关闭tls验证。<strong>PS: 一定要先设headscale-ui</strong></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221018191845.png" alt=""></p>
<p>​        Save后再Add a public hostname 给headscale</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20221018191216.png" alt=""></p>
<p>​        测试https://&lt;域名&gt;/windows，没问题就可以加入cloudflared到docker-compose.yaml了，它看起来应该是这样的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">services:</span><br><span class="line">  headscale:</span><br><span class="line">    container_name: headscale</span><br><span class="line">    #    image: headscale/headscale:latest-alpine</span><br><span class="line">    image: headscale/headscale:0.22.3</span><br><span class="line">    restart: always</span><br><span class="line">    # ports:</span><br><span class="line">      # - 8080:8080</span><br><span class="line">    volumes:</span><br><span class="line">      - ./container-config:/etc/headscale</span><br><span class="line">      - ./container-data:/var/lib/headscale</span><br><span class="line">    entrypoint: headscale serve</span><br><span class="line">    networks:</span><br><span class="line">      reverseproxy-nw:</span><br><span class="line"></span><br><span class="line">  headscale-ui:</span><br><span class="line">    container_name: headscale-ui</span><br><span class="line">    image: madebug/ghcr.io.gurucomputing.headscale-ui:latest</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      reverseproxy-nw:</span><br><span class="line"></span><br><span class="line">  cloudflared:</span><br><span class="line">    container_name: cloudflared</span><br><span class="line">    image: cloudflare/cloudflared:latest</span><br><span class="line">    entrypoint: ["cloudflared", "tunnel", "--no-autoupdate", "run", "--token", "eyJhIjoiY2I5YzllOGY0ZjE3ZjFmOGU2NmIyOWU5N2M3NTIxNjIiLCJ0IjoiNTQ0OTFiY2ItMjMwMS00ZTI5LTk3OTgtN2E0OWI1Yzk5ZjNmIiwicyI6Ik1HTTRaVEkwTW1RdFlqWmxNaTAwT0RrekxUbGhPVFF0WWpBNFpUQTRNemMwT0RReSJ9"]</span><br><span class="line">    networks:</span><br><span class="line">      reverseproxy-nw:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  reverseproxy-nw:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure>

<p>没有问题直接<code>docker-compose up -d</code></p>
</li>
<li><p><strong>headscale-ui部分</strong></p>
<p>前面基本完成了90%的工作了，接下来就是登录headscale-ui进行一些登录的设置了。</p>
</li>
</ul>
<ol>
<li><p>headscale生成页面登录的token</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> headscale headscale apikeys <span class="keyword">create</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问https://&lt;前面设定的域名&gt;/web，然后填入token完成登录，点击<code>Test Server Settings</code>。</p>
</li>
<li><p>创建user就是创建namespace，用来隔离多个不同网段。</p>
</li>
</ol>
<h2 id="0x03-headscale客户端"><a href="#0x03-headscale客户端" class="headerlink" title="0x03 headscale客户端"></a>0x03 headscale客户端</h2><ol>
<li><p>安装<a href="https://pkgs.tailscale.com/stable/" target="_blank" rel="noopener">tailscale客户端</a>。</p>
</li>
<li><p>在headscale-ui创建<strong>Preauth Keys</strong>。</p>
</li>
<li><p>然后使用以下命令加入。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ tailscale up <span class="params">--login-server</span> https:<span class="string">//</span>&lt;你前面的域名&gt; <span class="params">--accept-routes=true</span> <span class="params">--accept-dns=false</span> <span class="params">--authkey</span> &lt;你自己设的Preauth Keys&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows 加入方法。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//&lt;你前面的域名&gt;/windows</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="0x04-结语"><a href="#0x04-结语" class="headerlink" title="0x04 结语"></a>0x04 结语</h2><ul>
<li><p>headscale的打洞能力超强，并且自身还可以搭配/作为derper（derper类似zerotier的moon）。</p>
</li>
<li><p>headscale本身只是实现了服务端，客户端可以直接沿用tailscale进行加入。</p>
</li>
<li><p>迁移的时候除了<code>containers-data</code>下的<code>private.key</code>不需要之外，其他都需要迁走。</p>
</li>
<li><p>我们的方案用了cloudflare tunnel，当然可以<a href="https://github.com/XIU2/CloudflareSpeedTest" target="_blank" rel="noopener">优选出优质ip</a>，然后在软路由侧写入解析。</p>
</li>
<li><p>还是很建议<a href="https://icloudnative.io/posts/custom-derp-servers/#%E4%BD%BF%E7%94%A8%E7%BA%AF-ip" target="_blank" rel="noopener">单独搭一个derper的</a>，未必要把官方的derper全部去掉，但是这打洞效率很高。</p>
</li>
<li><p><a href="https://tailscale.com/kb/1019/subnets/?tab=linux#enable-ip-forwarding" target="_blank" rel="noopener">headscale支持自定义网段转发</a>。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tailscale up --login-server https://&lt;你前面的域名&gt; --accept-routes=<span class="literal">true</span> --accept-dns=<span class="literal">false</span> --authkey &lt;你自己设的Preauth Keys&gt; --advertise-routes=x.x.x.x/xx,x.x.x.x/xx</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="0x05-鸣谢"><a href="#0x05-鸣谢" class="headerlink" title="0x05 鸣谢"></a>0x05 鸣谢</h2><ul>
<li><a href="https://blog.gurucomputing.com.au/smart-vpns-with-headscale/setting-up-headscale/" target="_blank" rel="noopener">Setting Up Headscale :: Guru Computing Blog</a></li>
<li><a href="https://icloudnative.io/posts/how-to-set-up-or-migrate-headscale/" target="_blank" rel="noopener">Tailscale 基础教程：Headscale 的部署方法和使用教程 – 云原生实验室 - Kubernetes|Docker|Istio|Envoy|Hugo|Golang|云原生</a></li>
<li><a href="https://github.com/juanfont/headscale/blob/main/docs/running-headscale-container.md" target="_blank" rel="noopener">Running headscale in a container</a></li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Network </tag>
        <tag>Headscale </tag>
      </tags>
  </entry>
  <entry>
    <title>使用Zerotier基於國内網絡組建局域網</title>
    <url>/Ops/2020-06-15-Use-Zerotier-to-build-a-intranet-in-China.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/ZeroTier.png" width=50% /></center>

<p>本文將簡單闡述個人理解的Zerotier。</p>
<a id="more"></a>

<h2 id="什麽是Zerotier"><a href="#什麽是Zerotier" class="headerlink" title="什麽是Zerotier"></a>什麽是Zerotier</h2><hr>
<p>   來自<a href="https://www.zerotier.com/manual/#1" target="_blank" rel="noopener">官網</a>的説明：</p>
<blockquote>
<p><em>ZeroTier is a smart Ethernet switch for planet Earth.</em></p>
</blockquote>
<blockquote>
<p><em>It’s a distributed network hypervisor built atop a cryptographically secure global peer to peer network. It provides advanced network virtualization and management capabilities on par with an enterprise SDN switch, but across both local and wide area networks and connecting almost any kind of app or device.</em></p>
</blockquote>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><hr>
<ol>
<li><p><a href="https://my.zerotier.com/" target="_blank" rel="noopener">注冊</a>。</p>
</li>
<li><p>創建Network私有網絡並取得16位Network ID。</p>
</li>
<li><p>在apt系安裝zerotier：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># apt -y update</span></span><br><span class="line">~]<span class="comment"># apt -y install curl sudo net-tools</span></span><br><span class="line">~]<span class="comment"># curl -s https://install.zerotier.com/ | sudo bash</span></span><br></pre></td></tr></table></figure>

<p>其中遇到了關於gpg error的問題：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The following signatures couldn&#39;t be verified because the public key is not available: NO_PUBKEY 1657198823E52A61</span><br></pre></td></tr></table></figure>

<p>安裝gnupg來對其進行驗證導入再進行安裝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># apt -y install gnupg</span></span><br><span class="line">~]<span class="comment"># apt-key adv --keyserver keyserver.ubuntu.com --recv-keys  1657198823E52A61</span></span><br><span class="line">~]<span class="comment"># curl -s https://install.zerotier.com/ | sudo bash</span></span><br><span class="line">*** Waiting <span class="keyword">for</span> identity generation...*** Success! You are ZeroTier address [ xxxxxxxx ].</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="如何建立中轉服務器moon"><a href="#如何建立中轉服務器moon" class="headerlink" title="如何建立中轉服務器moon"></a>如何建立中轉服務器moon</h2><hr>
<p>   這是關於它的定義：</p>
<blockquote>
<p>PLANET 行星級服務器，Zerotier位於各地的根服務器，有日本、新加坡等地。 MOON 衛星級服務器，用戶自建的私有根服務器，起到中轉加速的作用。 LEAF 節點級服務器，就是每臺連接到該網絡的機器節點。</p>
</blockquote>
<p>   不得不驚嘆這個方案的明智之處 ，自帶支持中轉服務器的架設，這也是吸引我選擇它的初衷，p2p的組網方式本質是去中心化，不僅維護起來簡單，而且這種扁平化的網絡架構，其誕生迄今我一直認爲是一個計算機史上的思維方式的<a href="https://www.youtube.com/watch?v=sjx_rpay9rk" target="_blank" rel="noopener">奇異點</a>，也十分方便後期加入或者退出節點。</p>
<ol>
<li><p>加入你的網絡，填入你的16位network ID。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># zerotier-cli join xxxxxxxxx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通過自身工具生成moon.json配置文件。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">~]# cd /var/lib/zerotier-one</span><br><span class="line">~]# zerotier-idtool initmoon <span class="keyword">identity</span>.<span class="built_in">public</span> &gt; moon.json</span><br></pre></td></tr></table></figure>
</li>
<li><p>將公網IP加入其中。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">~]# cat moon.json </span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"id"</span>: <span class="string">"xxxxxxxx"</span>, </span><br><span class="line"> <span class="string">"objtype"</span>: <span class="string">"world"</span>, </span><br><span class="line"> <span class="string">"roots"</span>: [  </span><br><span class="line">  &#123;</span><br><span class="line">   <span class="string">"identity"</span>: <span class="string">"dd31a3ee4c:0:40971299f1f4875edfadfc221ffba68a283cf51a67a27fbc223da18b6257d236474b9f13e3e50b46c0ae8096339d3eb450e12ab0361bf5e8ef82c69acd86ebb8"</span>,   </span><br><span class="line">   <span class="string">"stableEndpoints"</span>: []        # 把它改成<span class="string">"stableEndpoints"</span>: [ <span class="string">"xxx.xxx.xxx.xxx/9993"</span> ]  </span><br><span class="line">  &#125; </span><br><span class="line"> ], </span><br><span class="line"> <span class="string">"signingKey"</span>: <span class="string">"592c748e40de1bd39db07bcdc98ad220ac82d67494483b410c0133939fc0c03059d3a2b2c9948ec1939c4d42e2c3f07b310a337bc47a77b94153e4f9f6df56d7"</span>, </span><br><span class="line"> <span class="string">"signingKey_SECRET"</span>: <span class="string">"c2810d04474b737ada418e1407bdc49ea9a0879393e5cb8b585eaec0feadbb0dcbbc52c6c85db9db2a2d83b6a36c01ed839e105d67f7bd4e0ea8d22559f29fd6"</span>, </span><br><span class="line"> <span class="string">"updatesMustBeSignedBy"</span>: <span class="string">"592c748e40de1bd39db07bcdc98ad220ac82d67494483b410c0133939fc0c03059d3a2b2c9948ec1939c4d42e2c3f07b310a337bc47a77b94153e4f9f6df56d7"</span>, </span><br><span class="line"> <span class="string">"worldType"</span>: <span class="string">"moon"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成moon節點的籤名文件。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># zerotier-idtool genmoon moon.json</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>將該moon節點加入網絡。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># mkdir moons.d</span></span><br><span class="line">~]<span class="comment"># mv 000000xxxxxxxxxx.moon moons.d/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重啓zerotier-one服務即可完成moon節點的設置。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># systemctl restart zerotier-one.service</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="如何使用自建的moon節點"><a href="#如何使用自建的moon節點" class="headerlink" title="如何使用自建的moon節點"></a>如何使用自建的moon節點</h2><hr>
<ol>
<li><p>在其他leaf節點完成安裝后加入你的網絡，其後通過以下命令加入自建的moon節點。( ⚠️注意moon的id輸入兩次。)</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">~]# zerotier-cli orbit <span class="number">000000</span>xxxxxxxxxx <span class="number">000000</span>xxxxxxxxxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>其後在leaf節點查看加入情況。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># zerotier-cli listpeers|grep MOON</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>離開節點也很容易。( ⚠️注意moon的id輸入壹次。)</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">~]# zerotier-cli deorbit <span class="number">000000</span>xxxxxxxxxx</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><hr>
<ol>
<li><p>p2p組網天下第一，可以通過以下簡單的類比方式來理解其中原理，其實也是區塊鏈組網的基礎。</p>
<blockquote>
<p>PLANET節點就是BT網絡中的根服務器<br>MOON節點就是BT網絡中的tracker服務器<br>LEAF節點就是BT網絡中客戶端的qBittorrent</p>
</blockquote>
</li>
<li><p>組了一張大内網，我們來玩點什麽呢？</p>
<ul>
<li><input disabled="" type="checkbox"> <a href="https://blog.madebug.net/ops/2020-06-21-kubernetes-dislikes-zerotier">Kubernetes/Openshift，跨機房跨運營商實現多master多node集群，實現混合雲架構。</a></li>
<li><input disabled="" type="checkbox"> 區塊鏈實驗場景。<del><font color=#808080>（其實沒想好）</font></del></li>
<li><input disabled="" type="checkbox"> 個人專屬内網。</li>
<li><input disabled="" type="checkbox"> 滲透後階段，低調的後門維持方式，而且去中心化。</li>
</ul>
</li>
<li><p>另外說一嘴，實驗下來，果然搬瓦工的cn2傳家寶還是沒救了，只能上trojan和squid了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Network </tag>
        <tag>UDP </tag>
        <tag>P2P </tag>
        <tag>Zerotier </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(什麽是Deployment)</title>
    <url>/Ops/2022-03-05-What-is-Deployment.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/deployment.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>开门见山，这篇blog的主角是<code>Deployment</code>。</p>
<a id="more"></a>

<h2 id="0x01-扩展-收缩-—-ReplicaSet"><a href="#0x01-扩展-收缩-—-ReplicaSet" class="headerlink" title="0x01 扩展/收缩 — ReplicaSet"></a>0x01 扩展/收缩 — ReplicaSet</h2><p>摘抄官网 <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/replicaset/" target="_blank" rel="noopener">ReplicaSet | Kubernetes</a></p>
<blockquote>
<p>ReplicaSet 确保任何时间都有指定数量的 Pod 副本在运行。 然而，Deployment 是一个更高级的概念，它管理 ReplicaSet，并向 Pod 提供声明式的更新以及许多其他有用的功能。 因此，我们建议使用 Deployment 而不是直接使用 ReplicaSet，除非 你需要自定义更新业务流程或根本不需要更新。</p>
</blockquote>
<p><code>ReplicaSet</code>也是<code>Deployment</code>管控的API<a href="https://blog.madebug.net/ops/2022-02-19-k8s-controller-explaination#0x02-Controller%E7%9A%84%E5%AF%B9%E8%B1%A1">对象之一</a>，主要负责Pod 的“水平扩展 / 收缩”（horizontal scaling out/in）。</p>
<p>不信？举个🌰：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat replicaset.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: ReplicaSet</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-set</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl apply -f deployment.yml</span></span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.7.9</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl get rs -l app=nginx</span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-848bcb569b   3         3         3       5m15s</span><br><span class="line"><span class="comment"># kubectl get deployment nginx-deployment</span></span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3     3            3           6m55s</span><br><span class="line"><span class="comment"># kubectl get pods -l app=nginx </span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-848bcb569b-rhhlt   1/1     Running   0          8m16s</span><br><span class="line">nginx-deployment-848bcb569b-wp29j   1/1     Running   0          8m16s</span><br><span class="line">nginx-deployment-848bcb569b-8nw82   1/1     Running   0          8m16s</span><br></pre></td></tr></table></figure>
<p>apply了Deployment，ReplicaSet也被创建了，也不难推出它们的关系。</p>
<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/deployment&replicaset1.png" width=50% /></center>

<p>实现水平扩展 / 收缩的核心，就需要改改yml，或者使用<code>kubectl scale</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl scale deployment nginx-deployment --replicas=4</span><br><span class="line">deployment.apps/nginx-deployment scaled</span><br></pre></td></tr></table></figure>
<h2 id="0x02-滚动更新"><a href="#0x02-滚动更新" class="headerlink" title="0x02 滚动更新"></a>0x02 滚动更新</h2><h3 id="实验一：何为滚动更新？"><a href="#实验一：何为滚动更新？" class="headerlink" title="实验一：何为滚动更新？"></a>实验一：何为滚动更新？</h3><p>一个执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户提交一个deployment对象，启用--record并使用rollout实时监控。</span></span><br><span class="line"><span class="comment"># kubectl apply -f deployment.yml --record &amp;&amp; kubectl rollout status deployment/nginx-deployment</span></span><br><span class="line">Flag --record has been deprecated, --record will be removed <span class="keyword">in</span> the future</span><br><span class="line">deployment.apps/nginx-deployment created</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deployment"</span> rollout to finish: 0 of 3 updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deployment"</span> rollout to finish: 1 of 3 updated replicas are available...</span><br><span class="line">Waiting <span class="keyword">for</span> deployment <span class="string">"nginx-deployment"</span> rollout to finish: 2 of 3 updated replicas are available...</span><br><span class="line">deployment <span class="string">"nginx-deployment"</span> successfully rolled out</span><br></pre></td></tr></table></figure>
<p>一个监控<code>Deployment</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get deployments --watch</span></span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   0/3     0            0           0s</span><br><span class="line">nginx-deployment   0/3     0            0           0s</span><br><span class="line">nginx-deployment   0/3     0            0           0s</span><br><span class="line">nginx-deployment   0/3     3            0           0s</span><br><span class="line">nginx-deployment   1/3     3            1           1s</span><br><span class="line">nginx-deployment   2/3     3            2           2s</span><br><span class="line">nginx-deployment   3/3     3            3           2s</span><br></pre></td></tr></table></figure>
<p>一个监控<code>ReplicaSet</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get rs --watch</span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-848bcb569b   3         0         0       0s</span><br><span class="line">nginx-deployment-848bcb569b   3         0         0       0s</span><br><span class="line">nginx-deployment-848bcb569b   3         3         0       0s</span><br><span class="line">nginx-deployment-848bcb569b   3         3         1       2s</span><br><span class="line">nginx-deployment-848bcb569b   3         3         2       2s</span><br><span class="line">nginx-deployment-848bcb569b   3         3         3       2s</span><br></pre></td></tr></table></figure>
<p>解释一下字段，</p>
<ul>
<li>DESIRED：用户期望的 Pod 副本个数（spec.replicas 的值）；</li>
<li>CURRENT：当前处于 Running 状态的 Pod 的个数；</li>
<li>UP-TO-DATE：当前处于最新版本的 Pod 的个数，所谓最新版本指的是 Pod 的 Spec 部分与 Deployment 里 Pod 模板里定义的完全一致；<strong>（Deployment独有，用于监控其版本是否一致。）</strong></li>
<li>AVAILABLE：当前已经可用的 Pod 的个数，即：既是 Running 状态，又是最新版本，并且已经处于 Ready（健康检查正确）状态的 Pod 的个数。</li>
</ul>
<h3 id="实验二：观察UP-TO-DATE"><a href="#实验二：观察UP-TO-DATE" class="headerlink" title="实验二：观察UP-TO-DATE"></a>实验二：观察UP-TO-DATE</h3><p>一个执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl edit deployment/nginx-deployment</span><br><span class="line">... </span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.9.1 <span class="comment"># 1.7.9 -&gt; 1.9.1</span></span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">...</span><br><span class="line">:wq</span><br><span class="line">deployment.extensions/nginx-deployment edited</span><br></pre></td></tr></table></figure>
<p>一个监控<code>Deployment</code> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get deployments --watch</span></span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   3/3     3            3           15m</span><br><span class="line">nginx-deployment   3/3     0            3           15m</span><br><span class="line">nginx-deployment   3/3     0            3           15m</span><br><span class="line">nginx-deployment   3/3     0            3           15m</span><br><span class="line">nginx-deployment   3/3     1            3           15m</span><br><span class="line">nginx-deployment   4/3     1            4           15m</span><br><span class="line">nginx-deployment   3/3     1            3           15m</span><br><span class="line">nginx-deployment   3/3     2            3           15m</span><br><span class="line">nginx-deployment   4/3     2            4           16m</span><br><span class="line">nginx-deployment   3/3     2            3           16m</span><br><span class="line">nginx-deployment   3/3     3            3           16m</span><br><span class="line">nginx-deployment   4/3     3            4           16m</span><br><span class="line">nginx-deployment   3/3     3            3           16m</span><br></pre></td></tr></table></figure>
<p>一个监控<code>ReplicaSet</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get rs --watch</span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-848bcb569b   1         1         1       15m</span><br><span class="line">nginx-deployment-69d9dddfd6   3         3         2       32s</span><br><span class="line">nginx-deployment-69d9dddfd6   2         3         2       59s</span><br><span class="line">nginx-deployment-69d9dddfd6   2         3         2       59s</span><br><span class="line">nginx-deployment-69d9dddfd6   2         2         2       59s</span><br><span class="line">nginx-deployment-848bcb569b   0         1         1       15m</span><br><span class="line">nginx-deployment-848bcb569b   0         1         1       15m</span><br><span class="line">nginx-deployment-848bcb569b   0         0         0       15m</span><br><span class="line">nginx-deployment-69d9dddfd6   3         2         2       32s</span><br><span class="line">nginx-deployment-69d9dddfd6   3         3         2       32s</span><br><span class="line">nginx-deployment-69d9dddfd6   3         3         3       64s</span><br></pre></td></tr></table></figure>
<p>See?  UP-TO-DATE正在变化！交替地逐一升级，正是滚动升级。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe deployment nginx-deployment</span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age                    From                   Message</span><br><span class="line">  ----    ------             ----                   ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  21m                    deployment-controller  Scaled up replica <span class="built_in">set</span> nginx-deployment-848bcb569b to 3 (原先的3个ReplicaSet 848bcb569b)</span><br><span class="line">  Normal  ScalingReplicaSet  6m58s                  deployment-controller  Scaled up replica <span class="built_in">set</span> nginx-deployment-69d9dddfd6 to 1 (新建了一个ReplicaSet 69d9dddfd6)</span><br><span class="line">  Normal  ScalingReplicaSet  6m42s                  deployment-controller  Scaled down replica <span class="built_in">set</span> nginx-deployment-848bcb569b to 2 (删除了一个ReplicaSet 848bcb569b)</span><br><span class="line">  Normal  ScalingReplicaSet  6m42s                  deployment-controller  Scaled up replica <span class="built_in">set</span> nginx-deployment-69d9dddfd6 to 2 (又新建了一个ReplicaSet 69d9dddfd6)</span><br><span class="line">  Normal  ScalingReplicaSet  6m26s                  deployment-controller  Scaled down replica <span class="built_in">set</span> nginx-deployment-848bcb569b to 1  (又删除了一个ReplicaSet 848bcb569b)</span><br><span class="line">  Normal  ScalingReplicaSet  6m26s                  deployment-controller  Scaled up replica <span class="built_in">set</span> nginx-deployment-69d9dddfd6 to 3  (又新建了一个ReplicaSet 69d9dddfd6)</span><br></pre></td></tr></table></figure>
<p>而滚动升级默认会保证每次只更新25%，这个值可以按需设定，最好可以搭配前面的<a href="https://blog.madebug.net/ops/2022-02-10-how-to-keep-pods-alive">探针</a>，严格制定滚动更新时存活标准和比例。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">...</span><br><span class="line">  strategy:</span><br><span class="line">    <span class="built_in">type</span>: RollingUpdate</span><br><span class="line">    rollingUpdate:</span><br><span class="line">      maxSurge: 1 <span class="comment">#每次操作多少个pod，可用%</span></span><br><span class="line">      maxUnavailable: 1 <span class="comment">#每次删除多少pod，可用%</span></span><br></pre></td></tr></table></figure>
<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/deployment&replicaset2.png" width=50% /></center>

<h3 id="更新后悔药"><a href="#更新后悔药" class="headerlink" title="更新后悔药"></a>更新后悔药</h3><p>kubectl也提供了后悔药。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl rollout undo deployment/nginx-deployment</span><br><span class="line">deployment.extensions/nginx-deployment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment</span><br><span class="line">deployments <span class="string">"nginx-deployment"</span></span><br><span class="line">REVISION    CHANGE-CAUSE</span><br><span class="line">1           kubectl create -f nginx-deployment.yaml --record</span><br><span class="line">2           kubectl edit deployment/nginx-deployment</span><br><span class="line">3           kubectl <span class="built_in">set</span> image deployment/nginx-deployment nginx=nginx:1.91</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl rollout <span class="built_in">history</span> deployment/nginx-deployment --revision=2</span><br></pre></td></tr></table></figure>
<p>ReplicaSet 的个数可以通过<code>kubectl rollout pause deployment/nginx-deployment</code> 控制，pause状态下的deployment不会因多次edit操作创建新的ReplicaSet（有点git为了控制comment次数，把多个add合并到一个comment的感觉。）之后，可以通过<code>kubectl rollout resume deployment/nginx-deployment</code> 合并当前所有的edit为一次更新，但老实说，这有悖每次变更操作的最小化原则。介意的话，或者可以试试<code>spec.revisionHistoryLimit</code> ，但我更倾向于都不做～</p>
<h2 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h2><p>这篇难产了几天，终于啃完，也加深了deployment理解，希望可以继续坚持。后续方便理解<a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/blue-green" target="_blank" rel="noopener">蓝绿发布</a>，<a href="https://github.com/ContainerSolutions/k8s-deployment-strategies/tree/master/canary" target="_blank" rel="noopener">金丝雀发布</a></p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Deployment </tag>
      </tags>
  </entry>
  <entry>
    <title>从user.conf谈起</title>
    <url>/Ops/2022-02-16-from-user-conf.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/ulimit-command.jpg" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近遇到一个问题，<code>/etc/system/system.conf</code> 和<code>/etc/system/user.conf</code> 的区别，没看到有很合适的笔记，简单记录一下。</p>
<a id="more"></a>

<h2 id="0x01-概念"><a href="#0x01-概念" class="headerlink" title="0x01 概念"></a>0x01 概念</h2><p>遇到不懂的Linux概念，自然而言首先求助于<code>Linux</code>自带的文档。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -qd systemd |grep user</span></span><br><span class="line">/usr/share/man/man5/systemd-user.conf.5.gz</span><br><span class="line">/usr/share/man/man5/sysusers.d.5.gz</span><br><span class="line">/usr/share/man/man5/user.conf.d.5.gz</span><br><span class="line">/usr/share/man/man8/systemd-sysusers.8.gz</span><br><span class="line">/usr/share/man/man8/systemd-sysusers.service.8.gz</span><br><span class="line">/usr/share/man/man8/systemd-user-sessions.8.gz</span><br><span class="line">/usr/share/man/man8/systemd-user-sessions.service.8.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm -qd systemd |grep systemd-system</span></span><br><span class="line">/usr/share/man/man5/systemd-system.conf.5.gz</span><br><span class="line">/usr/share/man/man8/systemd-system-update-generator.8.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># man 5 /usr/share/man/man5/systemd-system.conf.5.gz</span></span><br><span class="line"><span class="comment"># man 5 /usr/share/man/man5/systemd-user.conf.5.gz</span></span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">When run as a system instance, systemd interprets the configuration file system.conf and the files <span class="keyword">in</span> system.conf.d directories; when run as a user instance, systemd interprets the configuration file user.conf and the files <span class="keyword">in</span> user.conf.d directories. These configuration files contain a few settings controlling basic manager operations. See systemd.syntax(5) <span class="keyword">for</span> a general description of the syntax.</span><br></pre></td></tr></table></figure>
<p>至此，我们可以得到一个简单清晰的关系链，当作为<code>system instance</code>时，<code>systemd</code>会引入<code>system.conf</code>，当作为<code>user instance</code>时，<code>systemd</code>会引入<code>user.conf</code>。但是新的问题又来了。</p>
<h2 id="0x02-user-instance"><a href="#0x02-user-instance" class="headerlink" title="0x02 user instance"></a>0x02 user instance</h2><p>简单<code>google</code>整理一下思路。</p>
<ul>
<li>概念</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">和登陆行为的强关联</span><br><span class="line">The systemd user instance is started after the first login of a user and killed after the last session of the user is closed. Sometimes it may be useful to start it right after boot, and keep the systemd user instance running after the last session closes,</span><br><span class="line"></span><br><span class="line">systemd offers users the ability to manage services under the user’s control with a per-user systemd instance, enabling users to start, stop, <span class="built_in">enable</span>, and <span class="built_in">disable</span> their own units.</span><br><span class="line">https://wiki.archlinux.org/title/Systemd/User</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.unixsysadmin.com/systemd-user-services/" target="_blank" rel="noopener">样例</a></li>
</ul>
<p>PS:  我的过程中加入了<code>export XDG_RUNTIME_DIR=/run/user/$(id -u)</code>, <a href="https://askubuntu.com/questions/872792/what-is-xdg-runtime-dir" target="_blank" rel="noopener">该变量用于设置用户自动登录, 为对应用户生成uid</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel8 ]<span class="comment"># useradd -d /home/myapp -m -s /bin/bash -c "My application account" myapp</span></span><br><span class="line">[root@rhel8 ]<span class="comment"># loginctl enable-linger myapp</span></span><br><span class="line">[root@rhel8 ]<span class="comment"># </span></span><br><span class="line">[root@rhel8 ]<span class="comment"># su - myapp</span></span><br><span class="line">[myapp@rhel8 ~]$ mkdir -p ~/.config/systemd/user/</span><br><span class="line">[myapp@rhel8 ~]$ cat &gt;&gt; ~/.config/systemd/user/myapp.service &lt;&lt; EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=My demo application</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/python3 -m http.server 8080</span><br><span class="line">WorkingDirectory=/home/myapp/html</span><br><span class="line">EOF</span><br><span class="line">[myapp@rhel8 ~]$ mkdir /home/myapp/html</span><br><span class="line">[myapp@rhel8 ~]$ <span class="built_in">echo</span> <span class="string">"Hello World"</span> &gt; /home/myapp/html/index.html</span><br><span class="line">[myapp@rhel8 ~]$ <span class="built_in">export</span> XDG_RUNTIME_DIR=/run/user/$(id -u)</span><br><span class="line">[myapp@rhel8 ~]$ systemctl --user daemon-reload</span><br><span class="line">[myapp@rhel8 ~]$ systemctl --user status myapp.service</span><br><span class="line">● myapp.service - My demo application</span><br><span class="line">   Loaded: loaded (/home/myapp/.config/systemd/user/myapp.service; static; vendor preset: enabled)</span><br><span class="line">   Active: inactive (dead)</span><br><span class="line">[myapp@rhel8 ~]$ systemctl --user start myapp.service</span><br><span class="line">[myapp@rhel8 ~]$ systemctl --user status myapp.service</span><br><span class="line">● myapp.service - My demo application</span><br><span class="line">   Loaded: loaded (/home/myapp/.config/systemd/user/myapp.service; static; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Tue 2020-05-26 12:28:04 BST; 1s ago</span><br><span class="line"> Main PID: 1169 (python3)</span><br><span class="line">   CGroup: /user.slice/user-1001.slice/user@1001.service/myapp.service</span><br><span class="line">           └─1169 /usr/bin/python3 -m http.server 8080</span><br><span class="line"></span><br><span class="line">[myapp@localhost ~]$ cat /proc/1169/limits</span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units</span><br><span class="line">Max cpu time              unlimited            unlimited            seconds</span><br><span class="line">Max file size             unlimited            unlimited            bytes</span><br><span class="line">Max data size             unlimited            unlimited            bytes</span><br><span class="line">Max stack size            8388608              unlimited            bytes</span><br><span class="line">Max core file size        unlimited            unlimited            bytes</span><br><span class="line">Max resident <span class="built_in">set</span>          unlimited            unlimited            bytes</span><br><span class="line">Max processes             14603                14603                processes</span><br><span class="line">Max open files            1024                 262144               files</span><br><span class="line">Max locked memory         65536                65536                bytes</span><br><span class="line">Max address space         unlimited            unlimited            bytes</span><br><span class="line">Max file locks            unlimited            unlimited            locks</span><br><span class="line">Max pending signals       14603                14603                signals</span><br><span class="line">Max msgqueue size         819200               819200               bytes</span><br><span class="line">Max nice priority         0                    0</span><br><span class="line">Max realtime priority     0                    0</span><br><span class="line">Max realtime timeout      unlimited            unlimited            us</span><br></pre></td></tr></table></figure>
<p>至此，<code>user instance</code>和<code>user.conf</code>都了解得七七八八了，那就检验一下吧。</p>
<h2 id="0x03-检验"><a href="#0x03-检验" class="headerlink" title="0x03 检验"></a>0x03 检验</h2><p>检验的方式和<code>system.conf</code>一样，在<code>/etc/systemd/user.conf</code>中设置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@rhel8 ]<span class="comment"># cat  /etc/systemd/user.conf  |grep -vE '^$|^#'</span></span><br><span class="line">[Manager]</span><br><span class="line">DefaultLimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[root@rhel8 ] <span class="comment"># systemctl daemon-reexec</span></span><br><span class="line">[myapp@rhel8 ~]$ <span class="built_in">export</span> XDG_RUNTIME_DIR=/run/user/$(id -u)</span><br><span class="line">[myapp@rhel8 ~]$ systemctl daemon-reexec --user</span><br><span class="line">[myapp@rhel8 ~]$ systemctl --user status myapp</span><br><span class="line">● myapp.service - My demo application</span><br><span class="line">   Loaded: loaded (/home/myapp/.config/systemd/user/myapp.service; static; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2022-02-16 04:27:33 PST; 5min ago</span><br><span class="line"> Main PID: 3943 (python3)</span><br><span class="line">   CGroup: /user.slice/user-1001.slice/user@1001.service/myapp.service</span><br><span class="line">           └─3943 /usr/bin/python3 -m http.server 8080</span><br></pre></td></tr></table></figure>
<p>不一会儿</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[myapp@rhel8 ~]$ cat /proc/3943/limits</span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units</span><br><span class="line">Max cpu time              unlimited            unlimited            seconds</span><br><span class="line">Max file size             unlimited            unlimited            bytes</span><br><span class="line">Max data size             unlimited            unlimited            bytes</span><br><span class="line">Max stack size            8388608              unlimited            bytes</span><br><span class="line">Max core file size        unlimited            unlimited            bytes</span><br><span class="line">Max resident <span class="built_in">set</span>          unlimited            unlimited            bytes</span><br><span class="line">Max processes             14603                14603                processes</span><br><span class="line">Max open files            65535                65535                files</span><br><span class="line">Max locked memory         65536                65536                bytes</span><br><span class="line">Max address space         unlimited            unlimited            bytes</span><br><span class="line">Max file locks            unlimited            unlimited            locks</span><br><span class="line">Max pending signals       14603                14603                signals</span><br><span class="line">Max msgqueue size         819200               819200               bytes</span><br><span class="line">Max nice priority         0                    0</span><br><span class="line">Max realtime priority     0                    0</span><br><span class="line">Max realtime timeout      unlimited            unlimited            us</span><br></pre></td></tr></table></figure>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>本文简单地从<code>user.conf</code>谈起，到<code>user instance</code>的探讨，最后到检验它们两者的关联。可以看到，时至今日，systemd仍然在进化，而多用户管理场景，在云计算不合适的场景下，也是复用资源的一种思路。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>ulimit </tag>
        <tag>Services </tag>
      </tags>
  </entry>
  <entry>
    <title>于PXE下的iPXE+Kickstart搭建無人值守自動化安裝環境</title>
    <url>/Ops/2020-08-08-hello-iPXE-over-PXE-Kickstart.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/iPXE.png" width=50% /></center>

<p>本文將簡單搭建一個基於PXE網卡分發<a href="https://ipxe.org/" target="_blank" rel="noopener">iPXE</a>使用Kickstart自動化安裝BIOS或UEFI架構的自動化安裝環境。其中dnsmasq&amp;httpd將運行在同一個機器底下。</p>
<a id="more"></a>

<p>采用的方式是通过已有的PXE固件来分发ipxe引导程序进行安装。<br>pxe -&gt; ipxe.lkrn(ipxe.efi/undionly.kpxe) -&gt; boot.ipxe)</p>
<p>沒仔細看是不是以爲我一篇博客寫<del><font color=#808080>水</font></del>兩次。其實不然，iPXE作爲PXE的擴展版，在<a href="https://www.redhat.com/en/technologies/management/satellite" target="_blank" rel="noopener">Satellite</a>, <a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform" target="_blank" rel="noopener">OpenStack</a> 乃至於<a href="https://www.redhat.com/en/technologies/cloud-computing/openshift" target="_blank" rel="noopener">Openshift</a> 之中都有應用。因此來簡單學習一下。</p>
<h2 id="0x00-環境準備"><a href="#0x00-環境準備" class="headerlink" title="0x00 環境準備"></a>0x00 環境準備</h2><hr>
<p>重複的東西不再贅述，谷歌商店安裝Link to Text Fragment直接跳轉<del><font color=#808080>騙點擊率</font></del>即可。</p>
<h3 id="關閉selinux-firewalld-和-iptables"><a href="#關閉selinux-firewalld-和-iptables" class="headerlink" title="關閉selinux, firewalld 和 iptables"></a><a href="https://blog.madebug.net/ops/2020-08-01-hello-pxe-kickstart#關閉selinux-firewalld-和-iptables:~:text=%E9%97%9C%E9%96%89selinux%2C%20firewalld%20%E5%92%8C%20iptables,-%E6%8E%92%E9%99%A4%E4%B8%8D%E5%9C%A8%E6%9C%AC%E6%96%87%E6%B6%89%E5%8F%8A%E7%AF%84%E5%9C%8D%E5%86%85%E7%9A%84%E5%86%85%E5%AE%B9%E5%BD%B1%E9%9F%BF%E3%80%82">關閉selinux, firewalld 和 iptables</a></h3><h3 id="確保處於無DHCP服務網段"><a href="#確保處於無DHCP服務網段" class="headerlink" title="確保處於無DHCP服務網段"></a><a href="https://blog.madebug.net/ops/2020-08-01-hello-pxe-kickstart#確保局域網内無DHCP-服務器:~:text=%2DF-,%E7%A2%BA%E4%BF%9D%E5%B1%80%E5%9F%9F%E7%B6%B2%E5%86%85%E7%84%A1DHCP%20%E6%9C%8D%E5%8B%99%E5%99%A8">確保處於無DHCP服務網段</a></h3><h3 id="設置自定義IP"><a href="#設置自定義IP" class="headerlink" title="設置自定義IP"></a>設置自定義IP</h3><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/iPXEnetwork.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/iPXEnetwork.png"></p>
<h2 id="0x01-開始"><a href="#0x01-開始" class="headerlink" title="0x01 開始"></a>0x01 開始</h2><hr>
<h3 id="安裝必需包"><a href="#安裝必需包" class="headerlink" title="安裝必需包"></a>安裝必需包</h3><p>這次選用dnsmasq來提供ftp和dhcp功能，借此學習一波。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># yum install -y ipxe-bootimgs dnsmasq tree tcpdump wireshark</span></span><br></pre></td></tr></table></figure>

<p>提取引導程序文件undionly.kpxe 和ipxe.efi ，并自建菜單boot.ipxe。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># mkdir /var/lib/tftpboot</span></span><br><span class="line"><span class="comment"># 适用于 BIOS 硬件</span></span><br><span class="line">~]<span class="comment"># cp /usr/share/ipxe/undionly.kpxe /var/lib/tftpboot</span></span><br><span class="line"><span class="comment"># 适用于 UEFI 硬件</span></span><br><span class="line">~]<span class="comment"># cp /usr/share/ipxe/ipxe.efi /var/lib/tftpboot</span></span><br><span class="line">~]<span class="comment"># mkdir /var/lib/tftpboot/menu</span></span><br><span class="line">~]<span class="comment"># cat &gt;&gt; /var/lib/tftpboot/menu/boot.ipxe &lt;&lt; EOF</span></span><br><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line">menu PXE Boot Options</span><br><span class="line">item shell iPXE shell</span><br><span class="line">item <span class="built_in">exit</span>  Exit to BIOS</span><br><span class="line"></span><br><span class="line">choose --default <span class="built_in">exit</span> --timeout 10000 option &amp;&amp; goto <span class="variable">$&#123;option&#125;</span></span><br><span class="line">:shell</span><br><span class="line">shell</span><br><span class="line">:<span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="0x02-配置Dnsmasq服務器"><a href="#0x02-配置Dnsmasq服務器" class="headerlink" title="0x02 配置Dnsmasq服務器"></a>0x02 配置Dnsmasq服務器</h2><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>參考以下行號來查找内容進行添加/修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># vim /etc/dnsmasq.conf</span></span><br><span class="line">    10  port=0                                               &lt;---禁用dns功能</span><br><span class="line">    106 interface=ens38                                      &lt;---对应工作的网口</span><br><span class="line">    111 listen-address=172.16.70.1                           &lt;---本机用于监听的地址</span><br><span class="line">    164 dhcp-range=172.16.70.200,172.16.70.254,255.255.255.0 &lt;---设定相关的dhcp起始地址及掩码</span><br><span class="line">    303 dhcp-vendorclass=BIOS,PXEClient:Arch:00000           &lt;---Send extra options <span class="built_in">which</span> are tagged as <span class="string">"BIOS"</span> to any machine whose DHCP vendorclass string includes the substring <span class="string">"PXEClient"</span></span><br><span class="line">    341 dhcp-option=option:router,172.16.70.1                &lt;---设置router选项为默认网关</span><br><span class="line">    351 dhcp-option=option:netmask,255.255.255.0             &lt;---设置子网掩码</span><br><span class="line">    450 dhcp-match=<span class="built_in">set</span>:ipxe,175                              &lt;---iPXE sends a 175 option.</span><br><span class="line">    451 dhcp-boot=tag:!ipxe,tag:BIOS,undionly.kpxe           &lt;---BIOS标签的引导至undionly.kpxe </span><br><span class="line">    452 dhcp-boot=tag:!ipxe,tag:!BIOS,ipxe.efi               &lt;---非BIOS标签的引导至ipxe.efi</span><br><span class="line">    453 dhcp-boot=tag:ipxe,menu/boot.ipxe                    &lt;---设置它们的菜单文件为boot.ipxe</span><br><span class="line">    499 <span class="built_in">enable</span>-tftp                                          &lt;---启用tftp</span><br><span class="line">    502 tftp-root=/var/lib/tftpboot                          &lt;---设置tftp的目录</span><br></pre></td></tr></table></figure>

<h3 id="啓動服務"><a href="#啓動服務" class="headerlink" title="啓動服務"></a>啓動服務</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># systemctl enable dnsmasq</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/dnsmasq.service to /usr/lib/systemd/system/dnsmasq.service.</span><br><span class="line">~]<span class="comment"># systemctl start dnsmasq</span></span><br></pre></td></tr></table></figure>

<h3 id="檢查DHCP工作情況"><a href="#檢查DHCP工作情況" class="headerlink" title="檢查DHCP工作情況"></a>檢查DHCP工作情況</h3><p>在相同LAN下啓動無盤VM用於測試DHCP，測試期間檢查：開機提示、日志和抓包。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Dnsmasqresult.png?raw=true" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Dnsmasqresult.png?raw=true"></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Dnsmasqlog.png?raw=true" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Dnsmasqlog.png?raw=true"></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/tcpdumpDnsmasq.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/tcpdumpDnsmasq.png"></p>
<h2 id="0x03-配置網絡安裝源"><a href="#0x03-配置網絡安裝源" class="headerlink" title="0x03 配置網絡安裝源"></a>0x03 配置網絡安裝源</h2><hr>
<h3 id="使用HTTP來提供repo源"><a href="#使用HTTP來提供repo源" class="headerlink" title="使用HTTP來提供repo源"></a>使用HTTP來提供repo源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># yum -y install httpd</span></span><br><span class="line">~]<span class="comment"># rm -f /etc/httpd/conf.d/welcome.conf</span></span><br><span class="line">~]<span class="comment"># mkdir -p /var/www/html/media/rhel7/7.6</span></span><br><span class="line">~]<span class="comment"># mount -o loop /dev/sr0 /var/www/html/media/rhel7/7.6</span></span><br><span class="line">~]<span class="comment"># df -TH</span></span><br><span class="line">Filesystem            Type      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/mapper/rhel-root xfs        54G  8.4G   46G  16% /</span><br><span class="line">devtmpfs              devtmpfs  937M     0  937M   0% /dev</span><br><span class="line">tmpfs                 tmpfs     954M     0  954M   0% /dev/shm</span><br><span class="line">tmpfs                 tmpfs     954M   11M  944M   2% /run</span><br><span class="line">tmpfs                 tmpfs     954M     0  954M   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1             xfs       1.1G  186M  878M  18% /boot</span><br><span class="line">/dev/mapper/rhel-home xfs        50G   34M   50G   1% /home</span><br><span class="line">tmpfs                 tmpfs     191M   50k  191M   1% /run/user/0</span><br><span class="line">/dev/sr0              iso9660   4.5G  4.5G     0 100% /run/media/root/RHEL-7.6 Server.x86_64</span><br><span class="line">/dev/loop0            iso9660   4.5G  4.5G     0 100% /var/www/html/media/rhel7/7.6</span><br><span class="line">~]<span class="comment"># systemctl enable httpd</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/httpd.service to /usr/lib/systemd/system/httpd.service.</span><br><span class="line">~]<span class="comment"># systemctl restart httpd </span></span><br><span class="line">~]<span class="comment"># curl -SsLv http://172.16.70.1/media/rhel7/7.6</span></span><br><span class="line">* About to connect() to 172.16.70.1 port 80 (<span class="comment">#0)</span></span><br><span class="line">*   Trying 172.16.70.1...</span><br><span class="line">* Connected to 172.16.70.1 (172.16.70.1) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /media/rhel7/7.6 HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.29.0</span><br><span class="line">&gt; Host: 172.16.70.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 301 Moved Permanently</span><br><span class="line">&lt; Date: Sat, 08 Aug 2020 11:53:20 GMT</span><br><span class="line">&lt; Server: Apache/2.4.6 (Red Hat Enterprise Linux)</span><br><span class="line">&lt; Location: http://172.16.70.1/media/rhel7/7.6/</span><br><span class="line">&lt; Content-Length: 243</span><br><span class="line">&lt; Content-Type: text/html; charset=iso-8859-1</span><br><span class="line">&lt;</span><br><span class="line">* Ignoring the response-body</span><br><span class="line">* Connection <span class="comment">#0 to host 172.16.70.1 left intact</span></span><br><span class="line">* Issue another request to this URL: <span class="string">'http://172.16.70.1/media/rhel7/7.6/'</span></span><br><span class="line">* Found bundle <span class="keyword">for</span> host 172.16.70.1: 0x2648e90</span><br><span class="line">* Re-using existing connection! (<span class="comment">#0) with host 172.16.70.1</span></span><br><span class="line">* Connected to 172.16.70.1 (172.16.70.1) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /media/rhel7/7.6/ HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.29.0</span><br><span class="line">&gt; Host: 172.16.70.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Sat, 08 Aug 2020 11:53:20 GMT</span><br><span class="line">&lt; Server: Apache/2.4.6 (Red Hat Enterprise Linux)</span><br><span class="line">&lt; Content-Length: 3691</span><br><span class="line">&lt; Content-Type: text/html;charset=ISO-8859-1</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># TROUBLESHOOTING的方法如下</span></span><br><span class="line">~]<span class="comment"># tail -f /var/log/httpd/error_log</span></span><br><span class="line">~]<span class="comment"># journalctl -xefu httpd</span></span><br><span class="line">~]<span class="comment"># tcpdump -i ens38 port 80 and host 172.16.70.1 -vvv &gt;&gt; tcpdump.out</span></span><br></pre></td></tr></table></figure>

<h3 id="菜單加入HTTP鏈接"><a href="#菜單加入HTTP鏈接" class="headerlink" title="菜單加入HTTP鏈接"></a>菜單加入HTTP鏈接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># cat /var/lib/tftpboot/menu/boot.ipxe</span></span><br><span class="line"><span class="comment">#!ipxe</span></span><br><span class="line">:start</span><br><span class="line">menu PXE Boot Options</span><br><span class="line">item shell iPXE shell</span><br><span class="line"><span class="comment"># 增加菜单选项及其内容。</span></span><br><span class="line">item rhel7-net RHEL 7 installation  </span><br><span class="line">item <span class="built_in">exit</span>  Exit to BIOS</span><br><span class="line"><span class="comment"># 设定安装选项为10s后默认启动项。</span></span><br><span class="line">choose --default rhel7-net --timeout 10000 option &amp;&amp; goto <span class="variable">$&#123;option&#125;</span> </span><br><span class="line">:shell</span><br><span class="line">shell</span><br><span class="line">:rhel7-net</span><br><span class="line"><span class="comment"># 设置server_root变量为网络源根目录</span></span><br><span class="line"><span class="built_in">set</span> server_root http://172.16.70.1/media/rhel7/7.6</span><br><span class="line"><span class="comment"># 指定启动镜像的网络地址        </span></span><br><span class="line">initrd <span class="variable">$&#123;server_root&#125;</span>/images/pxeboot/initrd.images</span><br><span class="line"><span class="comment"># 指定相关kernel文件，源仓库根目录，kickstart的文件目录（按需加入，已略去新建存放该文件步骤）</span></span><br><span class="line">kernel <span class="variable">$&#123;server_root&#125;</span>/images/pxeboot/vmlinuz inst.repo=<span class="variable">$&#123;server_root&#125;</span> inst.ks=http://172.16.70.1/ks/bios-ks.cfg ip=dhcp ipv6.disable inst.geoloc=0 devfs=nomount</span><br><span class="line">boot</span><br><span class="line">:<span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h2 id="0x04-Kickstart文件編寫"><a href="#0x04-Kickstart文件編寫" class="headerlink" title="0x04 Kickstart文件編寫"></a>0x04 Kickstart文件編寫</h2><hr>
<p><a href="https://blog.madebug.net/ops/2020-08-01-hello-pxe-kickstart#%E8%A8%AD%E5%AE%9AKickstart%E9%85%8D%E7%BD%AE">不再贅述</a></p>
<h2 id="0x05-結語"><a href="#0x05-結語" class="headerlink" title="0x05 結語"></a>0x05 結語</h2><hr>
<p>本文簡單嘗試在PXE的網卡環境下調用iPXE固件，除了本文的方法之外，還有以下有趣实现<del><font color=#808080>水貼方向</font></del>：</p>
<ul>
<li><p><a href="https://www.codenong.com/cs105547860/" target="_blank" rel="noopener">基於iSCSI的無盤工作站環境搭建</a></p>
</li>
<li><p><a href="https://lala.im/4524.html" target="_blank" rel="noopener">在支持iPXE的KVM上安裝你想要的系統</a><del><font color=#808080>例如kali</font></del>，支持iPXE 的<a href="https://zhuanlan.zhihu.com/p/111206825" target="_blank" rel="noopener">vps</a>:</p>
</li>
</ul>
<blockquote>
<p>   这里特别说明下一项关键技术iPXE，iPXE是预引导执行环境（PXE）客户端固件和引导程序的开源实现，可用于启用没有内置PXE支持的计算机从网络引导。虽然标准化PXE客户端使用TFTP传输数据，但非标准化iPXE客户端固件增加了通过其他协议检索数据的功能，包括HTTP，iSCSI，以太网ATA（AoE）和以太网光纤通道（FCoE）。</p>
</blockquote>
<blockquote>
<p>   为什么在有的云厂商裸金属云服务介绍上，能看到分钟级的裸金属服务器交付，就是使用了iPXE的技术，服务器启动，通过iPXE引导已经制作好的iSCSI系统镜像，这样就免去了安装操作系统的过程，并且服务器也不需要系统硬盘，节省了成本。并且这样更为灵活，通过这样的技术，可以实现用户根据需要制定自己的系统镜像，而且方便镜像虚实转换，镜像机可以用于启动云主机，也可以启动物理机！</p>
</blockquote>
<p>另外以下是關於iPXE與PXE較爲<a href="https://groups.google.com/g/ustc_lug/c/P2jOQ5F4EKY?pli=1#c39:~:text=%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E7%90%86%E6%B8%85%E6%A5%9A%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5%EF%BC%9Apxe%2C%20ipxe%2C%20pxelinux%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%87%A0%E4%B8%AA%E5%90%8D%E8%AF%8D%EF%BC%9Apxelinux.0%2C%20ipxelinux.0,%E7%94%B1%E4%BA%8Epxe%E4%BB%A3%E7%A0%81%E6%98%AF%E4%B8%BB%E6%9D%BF%E3%80%81%E7%BD%91%E5%8D%A1%E8%87%AA%E5%B8%A6%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%BC%E5%AE%B9%E6%80%A7%E6%9C%80%E5%A5%BD%EF%BC%88%E8%87%B3%E5%B0%91%E6%9C%AC%E6%9C%BA%E7%9A%84%E4%BB%A3%E7%A0%81%E5%85%BC%E5%AE%B9%E6%9C%AC%E6%9C%BA%E7%9A%84%E8%AE%BE%E5%A4%87%EF%BC%89%E3%80%82%E8%80%8Cipxe%E5%85%BC%E5%AE%B9%E6%80%A7%E7%95%A5%E5%B7%AE%EF%BC%88%E5%8F%AA%E6%98%AF%E7%9B%B8%E5%AF%B9%E6%9D%A5%E8%AF%B4%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E7%BC%96%E8%AF%91%E6%97%B6%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%BC%8F%E6%8E%89%E4%B8%80%E4%BA%9B%E7%BD%91%E5%8D%A1%EF%BC%8C%E6%88%96%E8%80%85%E4%B8%80%E4%BA%9B%E7%89%B9%E6%AE%8A%E9%97%AE%E9%A2%98%E4%B8%8D%E5%A5%BD%E8%A7%A3%E5%86%B3%EF%BC%89%EF%BC%8C%E6%9B%BE%E7%BB%8F%E5%B0%9D%E8%AF%95%E8%BF%87%E7%9B%B4%E6%8E%A5%E4%B8%80%E6%AD%A5%20pxe%20%2D%3E%20ipxelinux.0%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%91%E7%8E%B0%E6%9C%89%E4%B8%80%E4%BA%9B%E6%9C%BA%E5%99%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%EF%BC%8C%E5%8A%A0%E8%BD%BDipxe%E4%B9%8B%E5%90%8E%E5%B0%B1%E5%81%9C%E4%BD%8F%E4%BA%86%E3%80%82%E6%89%80%E4%BB%A5%E5%90%8E%E6%9D%A5%E9%80%80%E8%80%8C%E6%B1%82%E5%85%B6%E6%AC%A1%EF%BC%8C%E7%94%A8%E4%B8%A4%E6%AD%A5%E5%8A%A0%E8%BD%BD%EF%BC%8C%E5%AF%B9%E4%BA%8Eipxe%E4%B8%8D%E6%94%AF%E6%8C%81%E7%9A%84%E8%AE%BE%E5%A4%87%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%AC%AC%E4%B8%80%E6%AD%A5pxe%2D%3Epxelinux.bin%E4%B9%8B%E5%90%8E%E6%89%8B%E5%BF%AB%E4%B8%80%E4%BA%9B%E6%8C%89%E4%BB%BB%E6%84%8F%E9%94%AE%E4%B8%AD%E6%96%AD%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BB%8D%E7%84%B6%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8pxe%EF%BC%8C%E4%B8%8D%E8%BF%87%E4%B9%8B%E5%90%8E%E6%88%91%E4%BB%AC%E4%B8%80%E7%9B%B4%E6%B2%A1%E6%9C%89%E7%BB%B4%E6%8A%A4%E9%80%9A%E8%BF%87tftp%E5%8A%A0%E8%BD%BD%E7%9A%84pxelinux%E4%BB%A5%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E6%89%80%E4%BB%A5%E9%82%A3%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%9C%A8%E9%83%BD%E5%B7%B2%E7%BB%8F%E4%B8%A5%E9%87%8D%E8%BF%87%E6%97%B6%E4%BA%86%E3%80%82" target="_blank" rel="noopener">準確的解釋</a>：</p>
<blockquote>
<ul>
<li>pxe是一个协议，跟mbr是一个性质的东西，它规定了CPU启动后通过什么方式获取引导代码并执行。</li>
<li>pxe的实现有许多，不同的厂商有不同的实现。并且pxe的实现代码主要有两种存放位置，一种是存在主板上，一种是存在网卡里，现在新的网卡一般都自带了pxe的实现代码。（去mbr查找引导代码的实现是在主板上的。）</li>
<li>由于pxe协议比较“落后”，仅支持tftp传输数据，性能差，灵活性也差，于是有了gpxe这个项目。gpxe是一种兼容pxe的实现，并且在pxe之上增加了许多特性，例如通过http/ftp等协议传输数据。</li>
<li>gpxe原先使用的域名的拥有者突然收回了该域名的使用权，于是这些人fork出去做了ipxe，gpxe现在已经不再开发，ipxe开发非常活跃。</li>
<li>一些较新的intel的网卡里都带了gpxe的实现代码，最新的可能会带ipxe代码。</li>
<li>pxelinux是syslinux项目的一个部分，syslinux主要有三个产出，syslinux、isolinux、pxelinux，分别用于硬盘、光盘、网络启动，它的角色与grub相同。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>*.bin 和 *.0 文件一般是一样的，不过使用上有一些区别，下面解释</li>
<li>pxelinux.bin 是 pxelinux 编译后生成的文件</li>
<li>由于大多数网卡、主板都不自带gpxe/ipxe的代码，所以通常引导时需要这样的途径： pxe -&gt; ipxe -&gt; pxelinux.bin，后面这两步可以合并，于是大家就把ipxe与pxelinux.bin​的代码合体，做成了 ipxelinux.0 （gpxe+pxelinux.bin = gpxelinux.0）。一般习惯上裸的pxelinux镜像用.bin后缀，加上gpxe/ipxe之后用.0后缀。此外还会有.lkrn后缀，这是ipxe的东西，ipxe的代码默认只能通过pxe协议的方式加载，他们搞了另外一个代码入口，使得可以通过像linux kernel的方式一样加载（就是可以通过grub引导），这种镜像的后缀是lkrn.</li>
<li>所以可行的引导过程可以有这些：<ul>
<li>pxe(网卡) -&gt; ipxe -&gt; pxelinux.bin -&gt; menu.c32</li>
<li>pxe      -&gt; ipxelinux.0 -&gt; menu.c32</li>
<li>pxe -&gt; syslinux.bin -&gt; ipxe -&gt; pxelinux.bin -&gt; menu.c32</li>
<li>pxe -&gt; syslinux.bin -&gt; ipxelinux.0 -&gt; menu.c32</li>
<li>grub -&gt; ipxe.lkrn -&gt; pxelinux.bin -&gt; menu.c32</li>
<li>grub -&gt; ipxelinux.lkrn -&gt; menu.c32</li>
<li>ipxe(烧入网卡) -&gt; pxelinux.bin</li>
<li>…</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>由于pxe代码是主板、网卡自带的，所以兼容性最好（至少本机的代码兼容本机的设备）。而ipxe兼容性略差（只是相对来说，因为我们编译时可能会漏掉一些网卡，或者一些特殊问题不好解决），曾经尝试过直接一步 pxe -&gt; ipxelinux.0，但是发现有一些机器无法启动，加载ipxe之后就停住了。所以后来退而求其次，用两步加载，对于ipxe不支持的设备，可以在第一步pxe-&gt;pxelinux.bin之后手快一些按任意键中断，然后仍然可以使用pxe，不过之后我们一直没有维护通过tftp加载的pxelinux以及配置文件，所以那部分内容其实现在都已经严重过时了。</p>
</blockquote>
<blockquote>
</blockquote>
<h2 id="0x06-鸣谢"><a href="#0x06-鸣谢" class="headerlink" title="0x06 鸣谢"></a>0x06 鸣谢</h2><hr>
<ul>
<li><a href="https://yangfeiffei.github.io/public/2019/08/12/net-install-centos7-with-ipxe.html" target="_blank" rel="noopener">使用ipxe安装centos7</a></li>
<li><a href="https://blog.hcl.moe/archives/2177" target="_blank" rel="noopener">gPXE/iPXE 初探 – HydricAcid</a></li>
<li><a href="https://lala.im/4524.html" target="_blank" rel="noopener">CentOS7配置GRUB2+iPXE进行网络重装-荒岛</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/111206825" target="_blank" rel="noopener">一文读懂裸金属云 - 知乎</a></li>
<li><a href="https://groups.google.com/g/ustc_lug/c/P2jOQ5F4EKY?pli=1" target="_blank" rel="noopener">原先的 PXE 引导中，两阶段的 PXELINUX 的区别，以及 iPXE 的用途？</a></li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kickstart </tag>
        <tag>TFTP </tag>
        <tag>iPXE </tag>
        <tag>Httpd </tag>
        <tag>RHEL 7 </tag>
        <tag>BIOS </tag>
        <tag>UEFI </tag>
        <tag>Anaconda </tag>
        <tag>Dnsmasq </tag>
      </tags>
  </entry>
  <entry>
    <title>iPXE+Kickstart搭建無人值守自動化安裝環境</title>
    <url>/Ops/2020-09-12-hello-true-iPXE-Kickstart.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/iPXE.png" width=50% /></center>

<p>本文將實踐通過燒錄iPXE到相應的VMware虛擬機中，來模擬一個無PXE的自動化安裝環境。</p>
<a id="more"></a>
<p>在閲讀本文前，請確保您有足夠瞭解<a href="https://groups.google.com/g/ustc_lug/c/P2jOQ5F4EKY?pli=1" target="_blank" rel="noopener">iPXE和PXE的<del>情情愛愛</del>恩恩怨怨。</a></p>
<h2 id="0x00-相關背景"><a href="#0x00-相關背景" class="headerlink" title="0x00 相關背景"></a>0x00 相關背景</h2><p>iPXE有以下的使用方法，不像PXE那麽死板：</p>
<ul>
<li>pxe(網卡) -&gt; ipxe -&gt; pxelinux.bin -&gt; menu.c32</li>
<li>pxe -&gt; ipxelinux.0 -&gt; menu.c32</li>
<li>pxe -&gt; syslinux.bin -&gt; ipxe -&gt; pxelinux.bin -&gt; menu.c32</li>
<li>pxe -&gt; syslinux.bin -&gt; ipxelinux.0 -&gt; menu.c32</li>
<li>pxe -&gt; ipxe.lkrn(ipxe.efi/undionly.kpxe)  -&gt; boot.ipxe</li>
<li>grub -&gt; ipxe.lkrn(ipxe.efi/undionly.kpxe) -&gt; pxelinux.bin -&gt; menu.c32</li>
<li>grub -&gt; ipxelinux.lkrn -&gt; menu.c32</li>
<li>ipxe(燒入網卡) -&gt; pxelinux.bin</li>
<li>ipxe(燒入網卡) -&gt; boot.ipxe</li>
<li>…</li>
</ul>
<p>本文實踐的則是最後一種方法。ipxe(燒入網卡) -&gt; boot.ipxe，相較於前文，你將會看見Dnsmasq日志的明顯區別。</p>
<h2 id="0x01-創建VM"><a href="#0x01-創建VM" class="headerlink" title="0x01 創建VM"></a>0x01 創建VM</h2><p>VMware虛擬機的vmx文件，支持自定義rom及mrom，這些<a href="https://ipxe.org/howto/vmware" target="_blank" rel="noopener">固件的替換</a>，使其具有ipxe的功能。</p>
<h3 id="下載並編譯"><a href="#下載並編譯" class="headerlink" title="下載並編譯"></a>下載並編譯</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git clone git://git.ipxe.org/ipxe.git</span></span><br><span class="line"><span class="comment"># cd ipxe/</span></span><br><span class="line"><span class="comment"># make bin/8086100f.mrom bin/808610d3.mrom bin/10222000.rom bin/15ad07b0.rom</span></span><br></pre></td></tr></table></figure>

<h3 id="啓用iPXE固件"><a href="#啓用iPXE固件" class="headerlink" title="啓用iPXE固件"></a>啓用iPXE固件</h3><p>圖形化創建一個無CD的空VM，並確保其與iPXE主機相同LAN。</p>
<p>隨後移動相關固件到該空VM目錄下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mv bin/&#123;8086100f.mrom,808610d3.mrom,10222000.rom,15ad07b0.rom&#125; /mnt/g/Virtual Machines/iPXE-test-7</span></span><br><span class="line"><span class="comment"># ls -alt /mnt/g/Virtual Machines/iPXE-test-7                                                                                                                                                                          22:01:05</span></span><br><span class="line">total 8436196</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug 4337106944 Sep 11 22:02 iPXE-test-7.vmdk*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug     577406 Sep 11 21:36 vmware.log*</span><br><span class="line">drwxrwxrwx 1 m4d3bug m4d3bug        512 Sep 10 22:35 ../</span><br><span class="line">drwxrwxrwx 1 m4d3bug m4d3bug        512 Sep 10 20:52 ./</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug       3035 Sep 10 20:52 iPXE-test-7.vmx*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug       8684 Sep 10 20:52 iPXE-test-7.nvram*</span><br><span class="line">drwxrwxrwx 1 m4d3bug m4d3bug        512 Sep 10 14:04 iPXE-test-7.vmdk.lck/</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug 4294967296 Sep 10 14:04 564dc457-c101-4841-4883-ecf173ce702f.vmem*</span><br><span class="line">drwxrwxrwx 1 m4d3bug m4d3bug        512 Sep 10 14:04 564dc457-c101-4841-4883-ecf173ce702f.vmem.lck/</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug     198523 Sep 10 13:05 vmware-0.log*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug      66560 Sep 10 11:14 15ad07b0.rom*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug      67584 Sep 10 11:14 10222000.rom*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug      68608 Sep 10 11:14 808610d3.mrom*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug      68608 Sep 10 11:14 8086100f.mrom*</span><br><span class="line">drwxrwxrwx 1 m4d3bug m4d3bug        512 Sep 10 11:07 ipxe/</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug        266 Sep 10 10:51 iPXE-test-7.vmxf*</span><br><span class="line">-rwxrwxrwx 1 m4d3bug m4d3bug          0 Sep 10 10:51 iPXE-test-7.vmsd*</span><br><span class="line">drwxrwxrwx 1 m4d3bug m4d3bug        512 Sep 10 10:51 iPXE-test-7.vmx.lck/</span><br></pre></td></tr></table></figure>

<p>然後修改.vmx文件增加以下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd  /mnt/g/Virtual Machines/iPXE-test-7</span></span><br><span class="line"><span class="comment"># vim iPXE-test-7.vmx</span></span><br><span class="line">……</span><br><span class="line">ethernet0.opromsize = 262144</span><br><span class="line">e1000bios.filename = <span class="string">"8086100f.mrom"</span></span><br><span class="line">e1000ebios.filename = <span class="string">"808610d3.mrom"</span></span><br><span class="line">nbios.filename = <span class="string">"10222000.rom"</span></span><br><span class="line">nx3bios.filename = <span class="string">"15ad07b0.rom"</span></span><br></pre></td></tr></table></figure>

<h2 id="0x02-搭建iPXE环境"><a href="#0x02-搭建iPXE环境" class="headerlink" title="0x02 搭建iPXE环境"></a>0x02 搭建iPXE环境</h2><p><a href="https://blog.madebug.net/Ops/2020-08-08-hello-iPXE-over-PXE-Kickstart">不再赘述</a></p>
<h2 id="0x03-檢查日誌"><a href="#0x03-檢查日誌" class="headerlink" title="0x03 檢查日誌"></a>0x03 檢查日誌</h2><p>從日誌中可以清晰看到僅調用了boot.ipxe，相較於上篇文章，少了iPXE引導程序的加載。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Dnsmasqlogs.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/Dnsmasqlogs.jpg"></p>
<h2 id="0x04-結語"><a href="#0x04-結語" class="headerlink" title="0x04 結語"></a>0x04 結語</h2><p>本文簡單嘗試了iPXE的加載順序，模擬驗證了iPXE的硬件條件。現在是容器大行其道的時代，批量部署環境只是幾秒鐘的事。但是在與之對應的物理機時代，iPXE仍有它的地位與話語權。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>VMware </tag>
        <tag>Kickstart </tag>
        <tag>TFTP </tag>
        <tag>iPXE </tag>
        <tag>Httpd </tag>
        <tag>RHEL 7 </tag>
        <tag>BIOS </tag>
        <tag>UEFI </tag>
        <tag>Anaconda </tag>
        <tag>Dnsmasq </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(如何保證的Pod的健康)</title>
    <url>/Ops/2022-02-10-how-to-keep-Pods-alive.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/pod.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Q: <code>healthy check</code>除了监控<code>Pod/Container</code>状态外，有没有更细致，监控<code>Container</code>内服务状态的方法呢？</p>
<a id="more"></a>

<p>A: 有，可以为<code>Container</code>定义一个“探针” <code>Probe</code>，<code>kubelet</code>就可以根据这个<code>Probe</code>的返回值断定<code>Container</code>的状态，而不只以<code>Container</code>运行为标准。而且探针有三种：</p>
<ul>
<li><code>livenessProbe</code>存活探针</li>
<li><code>readinessProbe</code>就绪探针</li>
<li><code>startupProbe</code>启动探针</li>
</ul>
<h2 id="0x01-健康检查-探针"><a href="#0x01-健康检查-探针" class="headerlink" title="0x01 健康检查-探针"></a>0x01 健康检查-探针</h2><h3 id="livenessProbe存活探针"><a href="#livenessProbe存活探针" class="headerlink" title="livenessProbe存活探针"></a>livenessProbe存活探针</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    <span class="built_in">test</span>: liveness</span><br><span class="line">  name: <span class="built_in">test</span>-liveness-exec</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: liveness</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - /bin/sh</span><br><span class="line">    - -c</span><br><span class="line">    <span class="comment">#30秒自动删除/tmp/healthy探针</span></span><br><span class="line">    - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600</span><br><span class="line">    <span class="comment">#使用livenessProbe定义检查命令</span></span><br><span class="line">    livenessProbe: </span><br><span class="line">      <span class="built_in">exec</span>:</span><br><span class="line">        <span class="built_in">command</span>:</span><br><span class="line">        - cat</span><br><span class="line">        - /tmp/healthy</span><br><span class="line">      <span class="comment">#启动后5秒开始检查</span></span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      <span class="comment">#5秒一次</span></span><br><span class="line">      periodSeconds: 5</span><br></pre></td></tr></table></figure>
<p>观察一下，<code>kubelet</code>的恢复机制（pod.spec.restartPolicy）在不停地拉起保活。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod <span class="built_in">test</span>-liveness-exec -o wide --watch                                                                                 </span><br><span class="line">NAME                 READY   STATUS             RESTARTS       AGE   IP            NODE                        NOMINATED NODE   READINESS GATES</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   0/1     CrashLoopBackOff   13 (80s ago)   35m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            14 (5m7s ago)   39m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            15 (&lt;invalid&gt; ago)   40m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   0/1     CrashLoopBackOff   15 (&lt;invalid&gt; ago)   42m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            16 (5m1s ago)        47m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            17 (&lt;invalid&gt; ago)   48m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   0/1     CrashLoopBackOff   17 (&lt;invalid&gt; ago)   49m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            18 (5m ago)          54m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            19 (0s ago)          56m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   0/1     CrashLoopBackOff   19 (&lt;invalid&gt; ago)   57m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            20 (4m57s ago)       62m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   1/1     Running            21 (&lt;invalid&gt; ago)   63m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"><span class="built_in">test</span>-liveness-exec   0/1     CrashLoopBackOff   21 (&lt;invalid&gt; ago)   64m   10.42.2.178   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl describe pod <span class="built_in">test</span>-liveness-exec</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age                   From               Message</span><br><span class="line">  ----     ------     ----                  ----               -------</span><br><span class="line">  Normal   Scheduled  16m                   default-scheduler  Successfully assigned default/<span class="built_in">test</span>-liveness-exec to storage-k3sw2.m4d3bug.com</span><br><span class="line">  Normal   Pulled     16m                   kubelet            Successfully pulled image <span class="string">"busybox"</span> <span class="keyword">in</span> 2.340333537s</span><br><span class="line">  Normal   Pulled     15m                   kubelet            Successfully pulled image <span class="string">"busybox"</span> <span class="keyword">in</span> 2.281807839s</span><br><span class="line">  Normal   Pulled     14m                   kubelet            Successfully pulled image <span class="string">"busybox"</span> <span class="keyword">in</span> 2.366382447s</span><br><span class="line">  Normal   Created    14m (x3 over 16m)     kubelet            Created container liveness</span><br><span class="line">  Normal   Started    14m (x3 over 16m)     kubelet            Started container liveness</span><br><span class="line">  Warning  Unhealthy  13m (x9 over 16m)     kubelet            Liveness probe failed: cat: can<span class="string">'t open '</span>/tmp/healthy<span class="string">': No such file or directory</span></span><br><span class="line"><span class="string">  Normal   Killing    13m (x3 over 15m)     kubelet            Container liveness failed liveness probe, will be restarted</span></span><br></pre></td></tr></table></figure>
<p>这就是K8s的Pod的恢复机制，但为什么总是在同一节点恢复呢？这就是<code>kind: Pod</code>和<code>kind: Deployment</code>的区别。</p>
<h2 id="0x02-恢复机制-pod-spec-restartPolicy"><a href="#0x02-恢复机制-pod-spec-restartPolicy" class="headerlink" title="0x02 恢复机制-pod.spec.restartPolicy"></a>0x02 恢复机制-pod.spec.restartPolicy</h2><p>谈到恢复机制，pod.spec.restartPolicy的状态有以下三种。</p>
<ul>
<li>Always：在任何情况下，只要Container不在运行状态，就自动重启Container；</li>
<li>OnFailure: 只在Container异常时才自动重启Container；</li>
<li>Never: 从来不重启Container。<br>另外需要注意：</li>
<li>Container被重新自动创建，内容可能丢失。</li>
<li>默认的恢复策略就是Always。</li>
<li>Pod内所有的容器都异常才会显示为Failed。</li>
<li><a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/" target="_blank" rel="noopener">更多</a></li>
</ul>
<h2 id="0x03-多一重保险-预设字段"><a href="#0x03-多一重保险-预设字段" class="headerlink" title="0x03 多一重保险-预设字段"></a>0x03 多一重保险-预设字段</h2><p>Q: 那有没有办法可以从运维的角度去预设这些健康检查的字段呢？</p>
<p>A: 有，PodPresent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f preset.yaml </span><br><span class="line">apiVersion: settings.k8s.io/v1alpha1</span><br><span class="line">kind: PodPreset</span><br><span class="line">metadata:</span><br><span class="line">  name: allow-database</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      role: frontend</span><br><span class="line">  env:</span><br><span class="line">    - name: DB_PORT</span><br><span class="line">      value: <span class="string">"6379"</span></span><br><span class="line">  volumeMounts:</span><br><span class="line">    - mountPath: /cache</span><br><span class="line">      name: cache-volume</span><br><span class="line">  volumes:</span><br><span class="line">    - name: cache-volume</span><br><span class="line">      emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>先后apply一下对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f pod.yaml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: website</span><br><span class="line">  labels:</span><br><span class="line">    app: website</span><br><span class="line">    role: frontend</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: website</span><br><span class="line">      image: nginx</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure>
<p>观察</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod website -o yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: website</span><br><span class="line">  labels:</span><br><span class="line">    app: website</span><br><span class="line">    role: frontend</span><br><span class="line">  annotations:</span><br><span class="line">    podpreset.admission.kubernetes.io/podpreset-allow-database: <span class="string">"resource version"</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: website</span><br><span class="line">      image: nginx</span><br><span class="line">      volumeMounts:</span><br><span class="line">        - mountPath: /cache</span><br><span class="line">          name: cache-volume</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">      env:</span><br><span class="line">        - name: DB_PORT</span><br><span class="line">          value: <span class="string">"6379"</span></span><br><span class="line">  volumes:</span><br><span class="line">    - name: cache-volume</span><br><span class="line">      emptyDir: &#123;&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PodPreset 里定义的内容，只会在 Pod API 对象被创建之前追加在这个对象本身上，而不会影响任何 Pod 的控制器的定义。而多个PodPreset冲突以外的字段都将被合并。</p>
</blockquote>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>从健康检查，到探针，再到恢复（保活）机制。最后到预设字段PodPreset，填了不少坑也埋了不少坑，未完待续。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Pod </tag>
      </tags>
  </entry>
  <entry>
    <title>PXE+Kickstart搭建無人值守自動化安裝環境</title>
    <url>/Ops/2020-08-01-hello-pxe-kickstart.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/PXE_diagram.png" width=50% /></center>

<p>本文將簡單搭建一個基於PXE網絡使用Kickstart自動化安裝BIOS或UEFI架構的自動化安裝環境。其中TFTP,DHCP&amp;httpd將運行在同一個機器底下。</p>
<a id="more"></a>

<h2 id="0x00-環境準備"><a href="#0x00-環境準備" class="headerlink" title="0x00 環境準備"></a>0x00 環境準備</h2><hr>
<h3 id="關閉selinux-firewalld和iptables"><a href="#關閉selinux-firewalld和iptables" class="headerlink" title="關閉selinux,firewalld和iptables"></a>關閉selinux,firewalld和iptables</h3><p>排除不在本文涉及範圍内的内容影響。<del><font color=#808080>會考慮單獨開坑記錄selinux的相關。 </font></del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# sed -i s&#x2F;^SELINUX&#x3D;.*$&#x2F;SELINUX&#x3D;disabled&#x2F; &#x2F;etc&#x2F;selinux&#x2F;config</span><br><span class="line">~]# setenforce 0</span><br><span class="line">~]# cat &#x2F;etc&#x2F;selinux&#x2F;config |grep ^SELINUX&#x3D;</span><br><span class="line">SELINUX&#x3D;disabled</span><br><span class="line">~]# systemctl stop firewalld.service</span><br><span class="line">~]# systemctl disable firewalld.service</span><br><span class="line">Removed symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;firewalld.service.</span><br><span class="line">Removed symlink &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line">~]# iptables -F</span><br></pre></td></tr></table></figure>

<h3 id="確保處於無DHCP服務網段"><a href="#確保處於無DHCP服務網段" class="headerlink" title="確保處於無DHCP服務網段"></a>確保處於無DHCP服務網段</h3><ol>
<li><p>停用vmnet的DHCP功能。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20191012215006.png?raw=true" alt=""></p>
</li>
<li><p>新建一個LAN區段。(本文采用方法)</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/setupLAN.png?raw=true" alt=""></p>
</li>
</ol>
<h3 id="設置自定義IP"><a href="#設置自定義IP" class="headerlink" title="設置自定義IP"></a>設置自定義IP</h3><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/PXEnetwork.png" alt=""></p>
<h2 id="0x01-開始"><a href="#0x01-開始" class="headerlink" title="0x01 開始"></a>0x01 開始</h2><hr>
<h3 id="安裝必需包和調試工具"><a href="#安裝必需包和調試工具" class="headerlink" title="安裝必需包和調試工具"></a>安裝必需包和調試工具</h3><p>請在下面提取引導菜單程序文件步驟前，確認自己的ISO挂載在/dev/sr0下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># yum install -y syslinux tftp-server dhcp tree tcpdump</span></span><br><span class="line">~]<span class="comment"># mkdir /var/lib/tftpboot/pxelinux</span></span><br><span class="line">~]<span class="comment"># mkdir -p /mnt/RHEL-7/7.8</span></span><br><span class="line">~]<span class="comment"># mount -o loop /dev/sr0 /mnt/RHEL-7/7.8</span></span><br><span class="line">~]<span class="comment"># df -TH</span></span><br><span class="line">Filesystem            Type      Size  Used Avail Use% Mounted on</span><br><span class="line">devtmpfs              devtmpfs  2.0G     0  2.0G   0% /dev</span><br><span class="line">tmpfs                 tmpfs     2.0G     0  2.0G   0% /dev/shm</span><br><span class="line">tmpfs                 tmpfs     2.0G   14M  2.0G   1% /run</span><br><span class="line">tmpfs                 tmpfs     2.0G     0  2.0G   0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/rhel-root xfs        54G  8.6G   46G  16% /</span><br><span class="line">/dev/mapper/rhel-home xfs        48G   34M   48G   1% /home</span><br><span class="line">/dev/sda1             xfs       1.1G  192M  872M  19% /boot</span><br><span class="line">tmpfs                 tmpfs     396M  8.2k  396M   1% /run/user/42</span><br><span class="line">tmpfs                 tmpfs     396M   25k  396M   1% /run/user/0</span><br><span class="line">/dev/sr0              iso9660   4.6G  4.6G     0 100% /run/media/root/RHEL-7.8 Server.x86_64</span><br><span class="line">/dev/loop0            iso9660   4.6G  4.6G     0 100% /mnt/RHEL-7/7.8</span><br><span class="line">~]<span class="comment"># cp -pr /mnt/RHEL-7/7.8/Packages/syslinux-4.05-15.el7.x86_64.rpm /tmp/</span></span><br><span class="line">~]<span class="comment"># cd /var/lib/tftpboot/</span></span><br><span class="line">tftpboot]<span class="comment"># rpm2cpio /tmp/syslinux-4.05-15.el7.x86_64.rpm | cpio -dimv</span></span><br><span class="line">tftpboot]<span class="comment"># ls</span></span><br><span class="line">pxelinux  usr</span><br></pre></td></tr></table></figure>

<h3 id="BIOS的準備工作"><a href="#BIOS的準備工作" class="headerlink" title="BIOS的準備工作"></a>BIOS的準備工作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># mkdir /var/lib/tftpboot/pxelinux/pxelinux.cfg</span></span><br><span class="line">~]<span class="comment"># cat &gt;&gt; /var/lib/tftpboot/pxelinux/pxelinux.cfg/default &lt;&lt; EOF</span></span><br><span class="line">default vesamenu.c32</span><br><span class="line">prompt 1</span><br><span class="line">timeout 100</span><br><span class="line"></span><br><span class="line">label linux</span><br><span class="line">  menu label ^Install system</span><br><span class="line">  menu default</span><br><span class="line">  kernel vmlinuz</span><br><span class="line">  append initrd=initrd.img ip=dhcp inst.repo=http://172.16.7.1/RHEL-7/7.8/Server/x86_64 inst.ks=http://172.16.7.1/ks/bios-ks.cfg</span><br><span class="line">label vesa</span><br><span class="line">  menu label Install system with ^basic video driver</span><br><span class="line">  kernel vmlinuz</span><br><span class="line">  append initrd=initrd.img ip=dhcp inst.xdriver=vesa nomodeset inst.repo=http://172.16.7.1/RHEL-7/7.8/Server/x86_64/os</span><br><span class="line">label rescue</span><br><span class="line">  menu label ^Rescue installed system</span><br><span class="line">  kernel vmlinuz</span><br><span class="line">  append initrd=initrd.img rescue</span><br><span class="line">label <span class="built_in">local</span></span><br><span class="line">  menu label Boot from ^<span class="built_in">local</span> drive</span><br><span class="line">  localboot 0xffff</span><br><span class="line">EOF</span><br><span class="line">~]<span class="comment"># cp /mnt/RHEL-7/7.8/images/pxeboot/&#123;vmlinuz,initrd.img&#125; /var/lib/tftpboot/pxelinux/</span></span><br><span class="line">~]<span class="comment"># cp /var/lib/tftpboot/usr/share/syslinux/&#123;pxelinux.0,vesamenu.c32&#125;  /var/lib/tftpboot/pxelinux/</span></span><br></pre></td></tr></table></figure>

<h3 id="UEFI的準備工作"><a href="#UEFI的準備工作" class="headerlink" title="UEFI的準備工作"></a>UEFI的準備工作</h3><p>在UEFI中，我們用grubx64.efi來代替pxelinux作爲UEFI的設定。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~]<span class="comment"># cp /mnt/RHEL-7/7.8/EFI/BOOT/grubx64.efi /var/lib/tftpboot/</span></span><br><span class="line">~]<span class="comment"># cat &gt;&gt; /var/lib/tftpboot/grub.cfg &lt;&lt; EOF</span></span><br><span class="line"><span class="built_in">set</span> timeout=9</span><br><span class="line">menuentry <span class="string">'Install Red Hat Enterprise Linux 7.8'</span> &#123;</span><br><span class="line">        linuxefi pxelinux/vmlinuz ip=dhcp inst.repo=http://172.16.7.1/RHEL-7/7.8/Server/x86_64 inst.ks=http://172.16.7.1/ks/uefi-ks.cfg inst.gpt</span><br><span class="line">        initrdefi pxelinux/initrd.img</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h2 id="0x02-配置TFTP服務器"><a href="#0x02-配置TFTP服務器" class="headerlink" title="0x02 配置TFTP服務器"></a>0x02 配置TFTP服務器</h2><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# sed -i &#39;&#x2F;disable&#x2F;s&#x2F;yes&#x2F;no&#x2F;g&#39; &#x2F;etc&#x2F;xinetd.d&#x2F;tftp</span><br><span class="line">~]# cat &#x2F;etc&#x2F;xinetd.d&#x2F;tftp |grep disable</span><br><span class="line">	disable			&#x3D; no</span><br><span class="line">~]# systemctl start tftp</span><br><span class="line">~]# systemctl enable tftp</span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;sockets.target.wants&#x2F;tftp.socket to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;tftp.socket.</span><br></pre></td></tr></table></figure>

<h2 id="0x03-配置DHCP服務器"><a href="#0x03-配置DHCP服務器" class="headerlink" title="0x03 配置DHCP服務器"></a>0x03 配置DHCP服務器</h2><hr>
<h3 id="寫入dhcp設置"><a href="#寫入dhcp設置" class="headerlink" title="寫入dhcp設置"></a>寫入dhcp設置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# cat &gt;&gt; &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf &lt;&lt; EOF</span><br><span class="line"># FILL THIS UP</span><br><span class="line">#</span><br><span class="line"># DHCP Server Configuration file.</span><br><span class="line">#   see &#x2F;usr&#x2F;share&#x2F;doc&#x2F;dhcp*&#x2F;dhcpd.conf.example</span><br><span class="line">#   see dhcpd.conf(5) man page</span><br><span class="line">#</span><br><span class="line">option space pxelinux;</span><br><span class="line">option pxelinux.magic code 208 &#x3D; string;</span><br><span class="line">option pxelinux.configfile code 209 &#x3D; text;</span><br><span class="line">option pxelinux.pathprefix code 210 &#x3D; text;</span><br><span class="line">option pxelinux.reboottime code 211 &#x3D; unsigned integer 32;</span><br><span class="line">option architecture-type code 93 &#x3D; unsigned integer 16;</span><br><span class="line"></span><br><span class="line">subnet 172.16.7.0 netmask 255.255.255.0 &#123;</span><br><span class="line">  option routers 172.16.7.1;</span><br><span class="line">  range 172.16.7.200 172.16.7.253;</span><br><span class="line"></span><br><span class="line">  class &quot;pxeclients&quot; &#123;</span><br><span class="line">      match if substring (option vendor-class-identifier, 0, 9) &#x3D; &quot;PXEClient&quot;;</span><br><span class="line">      next-server 172.16.7.1;</span><br><span class="line"></span><br><span class="line">      if option architecture-type &#x3D; 00:07 &#123;</span><br><span class="line">        filename &quot;grubx64.efi&quot;;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        filename &quot;pxelinux&#x2F;pxelinux.0&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">~]# systemctl start dhcpd </span><br><span class="line">~]# systemctl enable dhcpd </span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;dhcpd.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;dhcpd.service.</span><br><span class="line">~]# rm -rf &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;usr</span><br><span class="line">~]# tree -L 3 &#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;tftpboot&#x2F;</span><br><span class="line">├── grub.cfg                     &lt;--- UEFI的配置文件</span><br><span class="line">├── grubx64.efi                  &lt;--- UEFI的引導程序</span><br><span class="line">└── pxelinux</span><br><span class="line">    ├── initrd.img               &lt;--- 啓動過程中的鏡像</span><br><span class="line">    ├── pxelinux.0               &lt;--- BIOS的引導程序</span><br><span class="line">    ├── pxelinux.cfg             &lt;--- 默認為BIOS的引導程序的配置文件夾</span><br><span class="line">    │   └── default              &lt;--- 默認為BIOS的引導程序的配置文件</span><br><span class="line">    ├── vesamenu.c32             &lt;--- 配置文件引用的頭文件，用於提供簡單菜單背景</span><br><span class="line">    └── vmlinuz                  &lt;--- BIOS的引導程序所需的内核文件</span><br><span class="line"></span><br><span class="line">2 directories, 7 files</span><br></pre></td></tr></table></figure>

<h3 id="檢查DHCP工作情況"><a href="#檢查DHCP工作情況" class="headerlink" title="檢查DHCP工作情況"></a>檢查DHCP工作情況</h3><p>在相同LAN下啓動無盤VM用於測試DHCP，測試期間檢查：開機提示、日志和抓包。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/DHCPresult.png?raw=true" alt=""></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/DHCPlog.png?raw=true" alt=""></p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/tcpdumpDHCP.png" alt=""></p>
<h2 id="0x04-配置網絡安裝源"><a href="#0x04-配置網絡安裝源" class="headerlink" title="0x04 配置網絡安裝源"></a>0x04 配置網絡安裝源</h2><hr>
<h3 id="使用HTTP來提供repo源"><a href="#使用HTTP來提供repo源" class="headerlink" title="使用HTTP來提供repo源"></a>使用HTTP來提供repo源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# yum -y install httpd</span><br><span class="line">~]# rm -f &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;welcome.conf</span><br><span class="line">~]# cat &gt;&gt; &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;iso.conf &lt;&lt; EOF</span><br><span class="line"># 新建該文件</span><br><span class="line">Alias &#x2F;RHEL-7&#x2F;7.8&#x2F;Server&#x2F;x86_64 &#x2F;mnt&#x2F;RHEL-7&#x2F;7.8</span><br><span class="line">&lt;Directory &#x2F;mnt&#x2F;RHEL-7&#x2F;7.8&gt;    </span><br><span class="line">    Require all granted    </span><br><span class="line">    Options Indexes FollowSymLinks    </span><br><span class="line">    Require ip 0.0.0.0</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line">EOF</span><br><span class="line">~]# systemctl enable httpd</span><br><span class="line">Created symlink from &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;httpd.service to &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;httpd.service.</span><br><span class="line">~]# systemctl start httpd </span><br><span class="line">~]# curl -SsLv http:&#x2F;&#x2F;172.16.7.1&#x2F;RHEL-7&#x2F;7.8&#x2F;Server&#x2F;x86_64&#x2F;</span><br><span class="line">* About to connect() to 172.16.7.1 port 80 (#0)</span><br><span class="line">*   Trying 172.16.7.1...</span><br><span class="line">* Connected to 172.16.7.1 (172.16.7.1) port 80 (#0)</span><br><span class="line">&gt; GET &#x2F;RHEL-7&#x2F;7.8&#x2F;Server&#x2F;x86_64&#x2F; HTTP&#x2F;1.1</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.29.0</span><br><span class="line">&gt; Host: 172.16.7.1&gt; Accept: *&#x2F;*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP&#x2F;1.1 200 OK</span><br><span class="line">&lt; Date: Sat, 01 Aug 2020 15:16:19 GMT</span><br><span class="line">&lt; Server: Apache&#x2F;2.4.6 (Red Hat Enterprise Linux)</span><br><span class="line">&lt; Content-Length: 3715</span><br><span class="line">&lt; Content-Type: text&#x2F;html;charset&#x3D;ISO-8859-1</span><br><span class="line">&lt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># TROUBLESHOOTING的方法如下</span><br><span class="line">~]# tail -f &#x2F;var&#x2F;log&#x2F;httpd&#x2F;error_log</span><br><span class="line">~]# journalctl -xefu httpd</span><br><span class="line">~]# tcpdump -i ens38 port 80 and host 172.16.7.1 -vvv &gt;&gt; tcpdump.out</span><br></pre></td></tr></table></figure>

<h2 id="0x05-Kickstart文件編寫"><a href="#0x05-Kickstart文件編寫" class="headerlink" title="0x05 Kickstart文件編寫"></a>0x05 Kickstart文件編寫</h2><hr>
<h3 id="創建目錄"><a href="#創建目錄" class="headerlink" title="創建目錄"></a>創建目錄</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# mkdir &#x2F;var&#x2F;www&#x2F;html&#x2F;ks</span><br></pre></td></tr></table></figure>

<h3 id="創建密碼的加密字段"><a href="#創建密碼的加密字段" class="headerlink" title="創建密碼的加密字段"></a>創建密碼的加密字段</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# python -c &#39;import crypt,getpass;pw&#x3D;getpass.getpass();print(crypt.crypt(pw) if (pw&#x3D;&#x3D;getpass.getpass(&quot;Confirm: &quot;)) else exit())&#39;</span><br><span class="line">Password: </span><br><span class="line">Confirm: </span><br><span class="line">$6$SXp9tsalYxyM41qQ$mG3TbO58L9m3.Hhlec.7aoAU2AeATpJ4p.5dmTXy1iKZkoqALFi9VOhFEWWJ7Tvk6bDYbTx4SRqHw14mVnbV2.</span><br></pre></td></tr></table></figure>

<h3 id="創建BIOS自應答文件"><a href="#創建BIOS自應答文件" class="headerlink" title="創建BIOS自應答文件"></a>創建BIOS自應答文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# cat &gt;&gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;ks&#x2F;bios-ks.cfg &lt;&lt; EOF</span><br><span class="line">#platform&#x3D;x86, AMD64, or Intel EM64T</span><br><span class="line">#version&#x3D;DEVEL</span><br><span class="line"># Install OS instead of upgrade</span><br><span class="line">install</span><br><span class="line"># Keyboard layouts:</span><br><span class="line">keyboard &#39;us&#39;</span><br><span class="line"># Root password</span><br><span class="line">rootpw --iscrypted $6$SXp9tsalYxyM41qQ$mG3TbO58L9m3.Hhlec.7aoAU2AeATpJ4p.5dmTXy1iKZkoqALFi9VOhFEWWJ7Tvk6bDYbTx4SRqHw14mVnbV2.</span><br><span class="line"># System language</span><br><span class="line">lang en_US</span><br><span class="line"># System authorization information</span><br><span class="line">auth  --useshadow  --passalgo&#x3D;sha512</span><br><span class="line"># Use graphical install</span><br><span class="line">graphical</span><br><span class="line">firstboot --disable</span><br><span class="line"># SELinux configuration</span><br><span class="line">selinux --disabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Firewall configuration</span><br><span class="line">firewall --disabled</span><br><span class="line"># Network information</span><br><span class="line">network  --bootproto&#x3D;dhcp --device&#x3D;ens33</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line"># System timezone</span><br><span class="line">timezone Africa&#x2F;Abidjan</span><br><span class="line"># Use network installation</span><br><span class="line">url --url&#x3D;&quot;http:&#x2F;&#x2F;172.16.7.1&#x2F;RHEL-7&#x2F;7.8&#x2F;Server&#x2F;x86_64&quot;</span><br><span class="line"># System bootloader configuration</span><br><span class="line">bootloader --location&#x3D;mbr --boot-drive&#x3D;sda</span><br><span class="line"># Clear the Master Boot Record</span><br><span class="line">zerombr</span><br><span class="line"># Partition clearing information</span><br><span class="line">clearpart --all --initlabel</span><br><span class="line"># Disk partitioning information</span><br><span class="line">part &#x2F;boot --fstype&#x3D;xfs --size&#x3D;500</span><br><span class="line">part pv.009009 --grow --size&#x3D;1</span><br><span class="line">volgroup VolGroup --pesize&#x3D;4096 pv.009009</span><br><span class="line">logvol &#x2F; --fstype&#x3D;xfs --name&#x3D;lv_root --vgname&#x3D;VolGroup --percent&#x3D;100</span><br><span class="line">logvol swap --fstype&#x3D;swap --name&#x3D;lv_swap --vgname&#x3D;VolGroup --recommended</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@^graphical-server-environment</span><br><span class="line">@base</span><br><span class="line">@core</span><br><span class="line">@desktop-debugging</span><br><span class="line">@dial-up</span><br><span class="line">@fonts</span><br><span class="line">@gnome-desktop</span><br><span class="line">@guest-agents</span><br><span class="line">@guest-desktop-agents</span><br><span class="line">@hardware-monitoring</span><br><span class="line">@input-methods</span><br><span class="line">@internet-browser</span><br><span class="line">@multimedia</span><br><span class="line">@print-client</span><br><span class="line">@x11</span><br><span class="line">chrony</span><br><span class="line">kexec-tools</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%addon com_redhat_kdump --enable --reserve-mb&#x3D;&#39;auto&#39;</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%anaconda</span><br><span class="line">pwpolicy root --minlen&#x3D;6 --minquality&#x3D;1 --notstrict --nochanges --notempty</span><br><span class="line">pwpolicy user --minlen&#x3D;6 --minquality&#x3D;1 --notstrict --nochanges --emptyok</span><br><span class="line">pwpolicy luks --minlen&#x3D;6 --minquality&#x3D;1 --notstrict --nochanges --notempty</span><br><span class="line">%end</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="創建UEFI自應答文件"><a href="#創建UEFI自應答文件" class="headerlink" title="創建UEFI自應答文件"></a>創建UEFI自應答文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~]# cat &gt;&gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;ks&#x2F;uefi-ks.cfg &lt;&lt; EOF</span><br><span class="line">#platform&#x3D;x86, AMD64, or Intel EM64T</span><br><span class="line">#version&#x3D;DEVEL</span><br><span class="line"># Install OS instead of upgrade</span><br><span class="line">install</span><br><span class="line"># Keyboard layouts</span><br><span class="line">keyboard &#39;us&#39;</span><br><span class="line"># Root password</span><br><span class="line">rootpw --iscrypted $6$SXp9tsalYxyM41qQ$mG3TbO58L9m3.Hhlec.7aoAU2AeATpJ4p.5dmTXy1iKZkoqALFi9VOhFEWWJ7Tvk6bDYbTx4SRqHw14mVnbV2.</span><br><span class="line"># System language</span><br><span class="line">lang en_US</span><br><span class="line"># System authorization information</span><br><span class="line">auth  --useshadow  --passalgo&#x3D;sha512</span><br><span class="line"># Use graphical install</span><br><span class="line">graphical</span><br><span class="line">firstboot --disable</span><br><span class="line"># SELinux configuration</span><br><span class="line">selinux --disabled</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Firewall configuration</span><br><span class="line">firewall --disabled</span><br><span class="line"># Network information</span><br><span class="line">network  --bootproto&#x3D;dhcp --device&#x3D;ens33</span><br><span class="line"># Reboot after installation</span><br><span class="line">reboot</span><br><span class="line"># System timezone</span><br><span class="line">timezone Africa&#x2F;Abidjan</span><br><span class="line"># Use network installation</span><br><span class="line">url --url&#x3D;&quot;http:&#x2F;&#x2F;172.16.7.1&#x2F;RHEL-7&#x2F;7.8&#x2F;Server&#x2F;x86_64&quot;</span><br><span class="line"># System bootloader configuration</span><br><span class="line">bootloader --append&#x3D;&quot; crashkernel&#x3D;auto&quot; --location&#x3D;mbr --boot-drive&#x3D;sda</span><br><span class="line"># Clear the Master Boot Record</span><br><span class="line"># zerombr</span><br><span class="line"># Partition clearing information</span><br><span class="line">clearpart --all --initlabel</span><br><span class="line"># Disk partitioning information</span><br><span class="line">part &#x2F;boot&#x2F;efi --fstype&#x3D;efi --size&#x3D;200 --asprimary</span><br><span class="line">part &#x2F;boot --fstype&#x3D;xfs --size&#x3D;500</span><br><span class="line">part pv.009009 --grow --size&#x3D;1</span><br><span class="line">volgroup VolGroup --pesize&#x3D;4096 pv.009009</span><br><span class="line">logvol &#x2F; --fstype&#x3D;xfs --name&#x3D;lv_root --vgname&#x3D;VolGroup --percent&#x3D;100</span><br><span class="line">logvol swap --name&#x3D;lv_swap --vgname&#x3D;VolGroup --recommended</span><br><span class="line"></span><br><span class="line">%packages</span><br><span class="line">@^graphical-server-environment</span><br><span class="line">@base</span><br><span class="line">@core</span><br><span class="line">@desktop-debugging</span><br><span class="line">@dial-up</span><br><span class="line">@fonts</span><br><span class="line">@gnome-desktop</span><br><span class="line">@guest-agents</span><br><span class="line">@guest-desktop-agents</span><br><span class="line">@hardware-monitoring</span><br><span class="line">@input-methods</span><br><span class="line">@internet-browser</span><br><span class="line">@multimedia</span><br><span class="line">@print-client</span><br><span class="line">@x11</span><br><span class="line">chrony</span><br><span class="line">kexec-tools</span><br><span class="line"></span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%addon com_redhat_kdump --enable --reserve-mb&#x3D;&#39;128M&#39;</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%anaconda</span><br><span class="line">pwpolicy root --minlen&#x3D;6 --minquality&#x3D;1 --notstrict --nochanges --notempty</span><br><span class="line">pwpolicy user --minlen&#x3D;6 --minquality&#x3D;1 --notstrict --nochanges --emptyok</span><br><span class="line">pwpolicy luks --minlen&#x3D;6 --minquality&#x3D;1 --notstrict --nochanges --notempty</span><br><span class="line">%end</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>啓用之前的VM，并且確保其不包含ISO。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20191012215904.png?raw=true" alt=""></p>
<p>有以下界面出現就代表成功。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/20191012215957.png?raw=true" alt=""></p>
<p>創建UEFI也可以更改以下設置。</p>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/UEFIVM.png?raw=true" alt=""></p>
<h2 id="0x06-結語"><a href="#0x06-結語" class="headerlink" title="0x06 結語"></a>0x06 結語</h2><hr>
<p>簡單嘗試了基於PXE搭配Kickstart的無人值守安裝搭建。</p>
<h2 id="0x06-鳴謝"><a href="#0x06-鳴謝" class="headerlink" title="0x06 鳴謝"></a>0x06 鳴謝</h2><hr>
<ul>
<li><a href="https://www.cnblogs.com/boowii/p/6475921.html" target="_blank" rel="noopener">搭建UEFI PXE 基于linux相关资料 - boowii - 博客园</a></li>
<li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/installation_guide/index#chap-installation-server-setup" target="_blank" rel="noopener">Chapter 24. Preparing for a Network Installation</a></li>
<li><a href="https://www.server-world.info/en/note?os=CentOS_7&p=pxe&f=1&" target="_blank" rel="noopener">PXE Boot : Configure PXE Server</a></li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kickstart </tag>
        <tag>TFTP </tag>
        <tag>Httpd </tag>
        <tag>RHEL 7 </tag>
        <tag>BIOS </tag>
        <tag>UEFI </tag>
        <tag>Anaconda </tag>
        <tag>DHCP </tag>
        <tag>PXE </tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World !</title>
    <url>/uncategorized/2019-08-07-hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>sendmail的深入瞭解II</title>
    <url>/Ops/2020-10-02-learning-sendmail-II.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/LinuxAdministrationHandbook.jpg" width=50% /></center>

<p>本文簡單記錄Email自身以及其參與的工作机制閱讀筆記。</p>
<a id="more"></a>
<h2 id="0x00-組成部分"><a href="#0x00-組成部分" class="headerlink" title="0x00 組成部分"></a>0x00 組成部分</h2><ul>
<li><p>信封（envelope）</p>
<blockquote>
<p>信封确定消息将投递到哪里，或者如果消息不能投递出去的话，应该把它返回给谁。对于单个收件人来说，信封地址通常与信头的From和To行一致，如果消息是发送给一个邮递列表的，那么就不一致了。地址是单独提供给MSA的。信封对用户不可见，它不是消息本身的一部分，它供sendmail在内部确定把这则消息发送到哪里。</p>
</blockquote>
</li>
<li><p>信頭（header）</p>
<blockquote>
<p>信头是一组格式遵循RFC822的属性/值。它们记录与消息有关的各种信息，比如发送的日期和时间、它在旅程中经过哪些传输代理传递等。信头是邮件消息的一个真实部分，只不过用户代理向用户显示消息时通常会隐藏一些不太引人注意的项。</p>
</blockquote>
</li>
<li><p>消息主體（body of message）</p>
<blockquote>
<p>消息的主体是将要发送的实际内容。它必须由纯文本组成，虽然文本经常表示各种二进制内容，但此时采用了对邮件来说是安全的编码方式。</p>
</blockquote>
</li>
</ul>
<h2 id="0x01-郵件尋址"><a href="#0x01-郵件尋址" class="headerlink" title="0x01 郵件尋址"></a>0x01 郵件尋址</h2><ul>
<li><p>本地尋址標識：用戶登錄名</p>
</li>
<li><p>Internet尋址標識：<a href="mailto:user@host.domain">user@host.domain</a> user@domain</p>
</li>
<li><p>過時的地址類型：(中繼轉發)</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/OldEmailAddressType.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/OldEmailAddressType.png"></p>
</li>
</ul>
<h2 id="0x02-郵件信頭"><a href="#0x02-郵件信頭" class="headerlink" title="0x02 郵件信頭"></a>0x02 郵件信頭</h2><ul>
<li><p>標準信頭的格式在<a href="https://tools.ietf.org/html/rfc822" target="_blank" rel="noopener">RFC822</a>中定义，也可自定義“X-”信頭(被郵件系統忽略)來隨消息傳送。</p>
</li>
<li><p>用戶代理(MUA)，傳輸代理(MTA)各負責部分信頭。</p>
</li>
<li><p>負責的部分如下：</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/header.png" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/header.png"></p>
</li>
<li><p>DA於最後一次投遞中添加最上面的From。</p>
</li>
<li><p>Return-Path: 回傳報錯信息。</p>
</li>
<li><p>Delivery-Date: 發送日期</p>
</li>
<li><p>Received: 經過的MTA會依次添加。127.0.0.1表明它是來自local的MTA。包含其他字段如下：</p>
<ul>
<li>發送機器名稱</li>
<li>接收機器名稱</li>
<li>接收機器的MTA版本(8.13.1)</li>
<li>接收機器的id唯一標識號(k612inkG001576)</li>
<li>收件人</li>
<li>日期時間</li>
<li>本地時區與UTC偏移量</li>
</ul>
</li>
<li><p>Message-ID: 消息ID，世界範圍內郵件系統是唯一的。UA追加</p>
</li>
<li><p>每次經過MTA都需要dns查詢來完成Received。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/MTADNSQuery.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/MTADNSQuery.jpg"></p>
<h2 id="0x03-結語"><a href="#0x03-結語" class="headerlink" title="0x03 結語"></a>0x03 結語</h2><p>讀書筆記，Email在傳輸中參與眾多工序，有點像流水線作業。這在大型的郵件系統中尤為重要。</p>
<h2 id="0x04-鳴謝"><a href="#0x04-鳴謝" class="headerlink" title="0x04 鳴謝"></a>0x04 鳴謝</h2><p><a href="http://www.5dmail.net/html/2008-4-27/200842725951.htm" target="_blank" rel="noopener">18.2 剖析邮件消息</a></p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>sendmail </tag>
      </tags>
  </entry>
  <entry>
    <title>sendmail的深入瞭解I</title>
    <url>/Ops/2020-10-01-learning-sendmail-I.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/LinuxAdministrationHandbook.jpg" width=50% /></center>

<p>本文簡單記錄sendmail的工作模式模型閱讀筆記。</p>
<a id="more"></a>
<h2 id="0x00-什麼是郵件系統"><a href="#0x00-什麼是郵件系統" class="headerlink" title="0x00 什麼是郵件系統"></a>0x00 什麼是郵件系統</h2><p>有以下五部分：</p>
<ul>
<li>让用户阅读和撰写邮件的“邮件用户代理”（mail user agent，MUA）</li>
<li>在机器之间发送消息的“邮件传输代理”（mail transport agent，MTA）</li>
<li>把消息放到本地消息库 中的“投递代理（delivery agent，DA）”；它有时叫做本地投递代理（Local Delivery Agent，LDA）</li>
<li>可有可无的“访问代理（access agent）”，它可以把用户代理连接到消息库（例如，通过IMAP或POP协议）</li>
<li>邮件提交代理（mail submission agent，MSA），这种代理使用SMTP（simple mail transport protocol，简单邮件传输协议），并完成传输代理的一些工作。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/emailsystem.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/emailsystem.jpg"></p>
<h2 id="0x01-用戶代理-MUA-UA"><a href="#0x01-用戶代理-MUA-UA" class="headerlink" title="0x01 用戶代理(MUA/UA)"></a>0x01 用戶代理(MUA/UA)</h2><ul>
<li>用户代理的一项工作是确保在邮件消息的内容中嵌入的任何可能被邮件系统误解的文字得到保护。用作消息之间记录分隔符的字符串“From”就是一个例子。</li>
<li>一个用户代理不必和邮件系统的其余部分运行在相同的系统，乃至相同的平台上。</li>
<li>/bin/mail是最初的用户代理</li>
</ul>
<blockquote>
<p>Red Hat和Fedora上的/bin/mail是原UNIX命令mail的BSD版本；在SUSE、Debian和Ubuntu上，它变成了/usr/bin/mail 。这个用户代理只支持文本，并且需要在本地保存邮件。<br>Mozilla的Thunderbird，有Linux、Windows和Mac OS的版本。<br>Evolution（也叫做Novell Evolution，以前叫Ximian Evolution），有Linux、Windows和Mac OS的版本。<br>华盛顿大学（University of Washington）的pine，<a href="http://www.washington.edu/pine%E3%80%82" target="_blank" rel="noopener">www.washington.edu/pine。</a><br>Qualcomm的Eudora，用于Mac机或者运行Windows的PC。<br>微软的Outlook，也用于Windows。</p>
</blockquote>
<h2 id="0x02-傳輸代理-MTA"><a href="#0x02-傳輸代理-MTA" class="headerlink" title="0x02 傳輸代理(MTA)"></a>0x02 傳輸代理(MTA)</h2><ul>
<li>必须接受从MUA那里来的邮件，读懂目的地，并设法把邮件交给正确的主机进行投递。</li>
<li>大多数传输代理还担当消息提交代理(MSA)，完成把新消息发送到邮件系统的功能。</li>
<li>传输代理使用RFC821中定义的SMTP协议（Simple Mail Transport Protocol，简单邮件传输协议），或者使用RFC1869、RFC1870、RFC1891和RFC1985中定义的ESMTP协议（Extended SMTP，扩展的SMTP协议）。</li>
</ul>
<blockquote>
<p>Red Hat、Fedora和SUSE Linux自带装好的sendmail。Debian表面上好像是带了sendmail，但是如果您仔细一看，会发现sendmail实际上是到Exim这个邮件传输代理的链接。Exim经过仔细地调整开发，已经能够理解sendmail的命令行标志。直接调用“sendmail”的用户代理应该是不知情的。Ubuntu默认带Exim。</p>
</blockquote>
<h2 id="0x03-郵件提交代理-MSA"><a href="#0x03-郵件提交代理-MSA" class="headerlink" title="0x03 郵件提交代理(MSA)"></a>0x03 郵件提交代理(MSA)</h2><blockquote>
<p>在繁忙的主邮件枢纽上的传输代理要花费大量时间进行邮件消息的预处理：确保所有主机名是完整的，修改从已损坏的邮件用户代理（MUA）那里得到的信头、日志记录错误、重写信头等。RFC2476引入的思路是：将邮件提交代理（MSA）从邮件传输代理（MTA）中分离出来，以便分担工作负荷并获得最佳性能。</p>
</blockquote>
<ul>
<li>MSA负责消息由传输代理发送之前必须完成的所有预备工作和错误检验。它有点像在MUA和MTA之间插入一个头脑清楚的检验员。</li>
<li>如果用户代理不能识别端口587，您仍然可以在端口25上运行MSA，但是得在和MTA不同的另一台服务器。(直接打开SMTP连接的用户代理必须进行修改，使用587端口来调用MSA。)</li>
<li>MSA，587端口，用-bs或者-bm标志调用。</li>
<li>MTA，25端口，用-bd标志调用。</li>
</ul>
<h2 id="0x04-投遞代理-DA"><a href="#0x04-投遞代理-DA" class="headerlink" title="0x04 投遞代理(DA)"></a>0x04 投遞代理(DA)</h2><ul>
<li>從MTA接受郵件，並把它真正投递给适当的本地收件人。可以是人、一个邮递列表、文件或一个程序。</li>
</ul>
<blockquote>
<p>每种类型的收件人可能需要一个不同的代理。/bin/mail是用于本地用户的投递代理。/bin/sh是发给文件或程序的邮件最初的投递代理，投递到文件则在内部处理。sendmail的新近版本附带了更安全的本地投递代理，名为mail.local和smrsh（念做“smursh”）。<a href="http://www.procmail.org的procmail也可以用作本地投递代理，参见18.9.16节。类似地，如果您运行Cyrus" target="_blank" rel="noopener">www.procmail.org的procmail也可以用作本地投递代理，参见18.9.16节。类似地，如果您运行Cyrus</a> imapd作为AA（访问代理），它还包括自己的本地投递代理。</p>
</blockquote>
<h2 id="0x05-消息庫"><a href="#0x05-消息庫" class="headerlink" title="0x05 消息庫"></a>0x05 消息庫</h2><ul>
<li><p>本地计算机上保存电子邮件的地方。/var/spool/mail或/var/mail。</p>
</li>
<li><p>不同OS權限如下：</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/authmail.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/authmail.jpg"></p>
</li>
<li><p>SUSE的权限要宽松一点儿，但是在邮件缓存目录中的文件模式为660，属组为root。设置了粘附位的目录（在权限位中的t）不允许用户彼此删除对方的文件，即便他们有这个目录的写权限也不行。不过，恶意的用户可以填满邮件缓存目录，把它当作一个乱写乱画的分区，或者创建另一个用户的邮箱。</p>
</li>
</ul>
<h2 id="0x06-訪問代理-AA"><a href="#0x06-訪問代理-AA" class="headerlink" title="0x06 訪問代理(AA)"></a>0x06 訪問代理(AA)</h2><ul>
<li>協助用戶下載，通過IMAP（Internet Message Access Protocol，Internet消息访问协议）或者POP（Post Office Protocol，邮局协议）</li>
</ul>
<h2 id="0x07-結語"><a href="#0x07-結語" class="headerlink" title="0x07 結語"></a>0x07 結語</h2><p>重新整理了一下閱讀筆記，未完待續。</p>
<h2 id="0x08-鳴謝"><a href="#0x08-鳴謝" class="headerlink" title="0x08 鳴謝"></a>0x08 鳴謝</h2><ul>
<li><a href="http://www.5dmail.net/html/2008-4-27/200842725823.htm" target="_blank" rel="noopener">18.1 邮件系统</a></li>
</ul>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>sendmail </tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(Pod的對象們)</title>
    <url>/Ops/2022-02-06-What-is-pods-object.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/pod.png" width=50% /></center>

<h2 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h2><p>编写yaml时很容易遇到的一个问题：什么属性属于Pod对象，而什么又属于Container对象？</p>
<a id="more"></a>

<h2 id="0x01-Pod类"><a href="#0x01-Pod类" class="headerlink" title="0x01 Pod类"></a>0x01 Pod类</h2><p>一言以蔽之，只需把Pod看成“机器”、“虚拟机”。就很容易把<strong>调度、网络、存储以及安全相关属性，归类为Pod级</strong>。</p>
<h3 id="第一类对象"><a href="#第一类对象" class="headerlink" title="第一类对象"></a>第一类对象</h3><p>Pod“外在属性”对象。也就是“外貌”级别的node、host类对象。随便举例三个</p>
<h4 id="nodeSelector"><a href="#nodeSelector" class="headerlink" title="nodeSelector"></a>nodeSelector</h4><p>用于绑定Pod和Node的字段。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"> <span class="attr">nodeSelector:</span></span><br><span class="line">   <span class="attr">disktype:</span> <span class="string">ssd</span>   <span class="comment">#Pod始终保持和携带“disktype: ssd”的node保持亲昵。</span></span><br></pre></td></tr></table></figure>
<h4 id="nodeName"><a href="#nodeName" class="headerlink" title="nodeName"></a>nodeName</h4><p>一般由调度器负责填写，或手动指定“骗过”调度器，达到测试调试的目的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods two-containers -o yaml ｜grep nodeName</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">items:</span><br><span class="line">- apiVersion: v1</span><br><span class="line">  kind: Pod</span><br><span class="line">  metadata:</span><br><span class="line">    creationTimestamp: <span class="string">"2022-01-30T16:56:32Z"</span></span><br><span class="line">    ...</span><br><span class="line">  spec:</span><br><span class="line">    containers:</span><br><span class="line">    - image: nginx</span><br><span class="line">      ...</span><br><span class="line">    - args:</span><br><span class="line">      ...</span><br><span class="line">    dnsPolicy: ClusterFirst</span><br><span class="line">    enableServiceLinks: <span class="literal">true</span></span><br><span class="line">    nodeName: storage-k3sw4.m4d3bug.com <span class="comment">#&lt;------------</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h4 id="hostAliases"><a href="#hostAliases" class="headerlink" title="hostAliases"></a>hostAliases</h4><p>直接定义Pod里的hosts</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hostAliases:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">"10.1.2.3"</span></span><br><span class="line">    <span class="attr">hostnames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"foo.remote"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"bar.remote"</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/hosts</span></span><br><span class="line"><span class="comment"># Kubernetes-managed hosts file.</span></span><br><span class="line">127.0.0.1 localhost</span><br><span class="line">...</span><br><span class="line">10.244.135.10 hostaliases-pod</span><br><span class="line">10.1.2.3 foo.remote</span><br><span class="line">10.1.2.3 bar.remote</span><br></pre></td></tr></table></figure>
<h3 id="第二类对象"><a href="#第二类对象" class="headerlink" title="第二类对象"></a>第二类对象</h3><p>Pod“内在属性”对象。也就是“经脉”级别的namespace类对象。随便举例两个</p>
<h3 id="shareProcessNamespace"><a href="#shareProcessNamespace" class="headerlink" title="shareProcessNamespace"></a>shareProcessNamespace</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">shareProcessNamespace:</span> <span class="literal">true</span> <span class="comment">#Pod内共享PID Namespace, 使得你可以再shell容器里检查到nginx</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shell</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">stdin:</span> <span class="literal">true</span> <span class="comment">#保持stdin开启</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span> <span class="comment">#调用接受标准输入，方便attach</span></span><br></pre></td></tr></table></figure>
<p>容器里去检查一下是否共享正常</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl attach -it nginx -c shell</span></span><br><span class="line"><span class="string">/</span> <span class="comment"># ifconfig</span></span><br><span class="line"><span class="string">eth0</span>      <span class="string">Link</span> <span class="string">encap:Ethernet</span>  <span class="string">HWaddr</span> <span class="string">1A:89:15:C2:8F:CB</span>  </span><br><span class="line">          <span class="string">inet</span> <span class="string">addr:10.42.2.167</span>  <span class="string">Bcast:10.42.2.255</span>  <span class="string">Mask:255.255.255.0</span></span><br><span class="line">          <span class="attr">inet6 addr:</span> <span class="string">fe80::1889:15ff:fec2:8fcb/64</span> <span class="string">Scope:Link</span></span><br><span class="line">          <span class="string">UP</span> <span class="string">BROADCAST</span> <span class="string">RUNNING</span> <span class="string">MULTICAST</span>  <span class="string">MTU:1500</span>  <span class="string">Metric:1</span></span><br><span class="line">          <span class="string">RX</span> <span class="string">packets:6845</span> <span class="string">errors:0</span> <span class="string">dropped:0</span> <span class="string">overruns:0</span> <span class="string">frame:0</span></span><br><span class="line">          <span class="string">TX</span> <span class="string">packets:6354</span> <span class="string">errors:0</span> <span class="string">dropped:0</span> <span class="string">overruns:0</span> <span class="string">carrier:0</span></span><br><span class="line">          <span class="string">collisions:0</span> <span class="string">txqueuelen:0</span> </span><br><span class="line">          <span class="string">RX</span> <span class="string">bytes:10250592</span> <span class="string">(9.7</span> <span class="string">MiB)</span>  <span class="string">TX</span> <span class="string">bytes:451381</span> <span class="string">(440.8</span> <span class="string">KiB)</span></span><br><span class="line"></span><br><span class="line"><span class="string">lo</span>        <span class="string">Link</span> <span class="string">encap:Local</span> <span class="string">Loopback</span>  </span><br><span class="line">          <span class="string">inet</span> <span class="string">addr:127.0.0.1</span>  <span class="string">Mask:255.0.0.0</span></span><br><span class="line">          <span class="attr">inet6 addr:</span> <span class="string">::1/128</span> <span class="string">Scope:Host</span></span><br><span class="line">          <span class="string">UP</span> <span class="string">LOOPBACK</span> <span class="string">RUNNING</span>  <span class="string">MTU:65536</span>  <span class="string">Metric:1</span></span><br><span class="line">          <span class="string">RX</span> <span class="string">packets:0</span> <span class="string">errors:0</span> <span class="string">dropped:0</span> <span class="string">overruns:0</span> <span class="string">frame:0</span></span><br><span class="line">          <span class="string">TX</span> <span class="string">packets:0</span> <span class="string">errors:0</span> <span class="string">dropped:0</span> <span class="string">overruns:0</span> <span class="string">carrier:0</span></span><br><span class="line">          <span class="string">collisions:0</span> <span class="string">txqueuelen:1000</span> </span><br><span class="line">          <span class="string">RX</span> <span class="string">bytes:0</span> <span class="string">(0.0</span> <span class="string">B)</span>  <span class="string">TX</span> <span class="string">bytes:0</span> <span class="string">(0.0</span> <span class="string">B)</span></span><br><span class="line"><span class="string">/</span> <span class="comment"># ps ax</span></span><br><span class="line"><span class="string">PID</span>   <span class="string">USER</span>     <span class="string">TIME</span>  <span class="string">COMMAND</span></span><br><span class="line">    <span class="number">1</span> <span class="string">root</span>      <span class="number">0</span><span class="string">:00</span> <span class="string">/pause</span></span><br><span class="line">    <span class="attr">7 root      0:00 nginx:</span> <span class="string">master</span> <span class="string">process</span> <span class="string">nginx</span> <span class="string">-g</span> <span class="string">daemon</span> <span class="string">off;</span></span><br><span class="line">   <span class="attr">37 101       0:00 nginx:</span> <span class="string">worker</span> <span class="string">process</span></span><br><span class="line">   <span class="attr">38 101       0:00 nginx:</span> <span class="string">worker</span> <span class="string">process</span></span><br><span class="line">   <span class="attr">39 101       0:00 nginx:</span> <span class="string">worker</span> <span class="string">process</span></span><br><span class="line">   <span class="attr">40 101       0:00 nginx:</span> <span class="string">worker</span> <span class="string">process</span></span><br><span class="line">   <span class="number">41</span> <span class="string">root</span>      <span class="number">0</span><span class="string">:00</span> <span class="string">sh</span></span><br><span class="line">   <span class="number">48</span> <span class="string">root</span>      <span class="number">0</span><span class="string">:00</span> <span class="string">ps</span> <span class="string">ax</span></span><br></pre></td></tr></table></figure>
<h3 id="hostNetwork"><a href="#hostNetwork" class="headerlink" title="hostNetwork"></a>hostNetwork</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span> <span class="comment">#共享宿主机网络，直接使用宿主机网络</span></span><br><span class="line">  <span class="attr">hostIPC:</span> <span class="literal">true</span> <span class="comment">#共享宿主机IPC，IPC通信</span></span><br><span class="line">  <span class="attr">hostPID:</span> <span class="literal">true</span> <span class="comment">#共享宿主机PID，看到宿主机运行进程</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shell</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">stdin:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="0x02-Container类"><a href="#0x02-Container类" class="headerlink" title="0x02 Container类"></a>0x02 Container类</h2><h3 id="ImagePullPolicy"><a href="#ImagePullPolicy" class="headerlink" title="ImagePullPolicy"></a>ImagePullPolicy</h3><p><a href="https://kubernetes.io/zh/docs/concepts/configuration/overview/" target="_blank" rel="noopener">官网</a>有很详细的说明，默认情况下为Always，Never或IfNotPresent则不会主动拉取，或不存在时拉取。</p>
<h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">lifecycle-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">lifecycle-demo-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">lifecycle:</span></span><br><span class="line">      <span class="attr">postStart:</span> <span class="comment">#容器启动后立刻执行的操作，在容器ENTRYPOINT后执行，不一定等到完成后</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">["/bin/sh",</span> <span class="string">"-c"</span><span class="string">,</span> <span class="string">"echo Hello from the postStart handler &gt; /usr/share/message"</span><span class="string">]</span></span><br><span class="line">      <span class="attr">preStop:</span> <span class="comment">#杀死前执行的命令，先阻塞杀死hook进程后执行杀死。实现容器优雅退出。</span></span><br><span class="line">        <span class="attr">exec:</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">["/usr/sbin/nginx","-s","quit"]</span></span><br></pre></td></tr></table></figure>
<h2 id="0x03-Status类"><a href="#0x03-Status类" class="headerlink" title="0x03 Status类"></a>0x03 Status类</h2><p>Status类并不是严格意义上Pod和Container类之外的API对象，它更多的是体现Pod的当前状态，它是除了metadata和spec部分之外的重要字段，其中pod.status.phase是Pod的当前状态。</p>
<blockquote>
<p>Pending。这个状态意味着，Pod 的 YAML 文件已经提交给了 Kubernetes，API 对象已经被创建并保存在 Etcd 当中。但是，这个 Pod 里有些容器因为某种原因而不能被顺利创建。比如，调度不成功。</p>
</blockquote>
<blockquote>
<p>Running。这个状态下，Pod 已经调度成功，跟一个具体的节点绑定。它包含的容器都已经创建成功，并且至少有一个正在运行中。</p>
</blockquote>
<blockquote>
<p>Succeeded。这个状态意味着，Pod 里的所有容器都正常运行完毕，并且已经退出了。这种情况在运行一次性任务时最为常见。</p>
</blockquote>
<blockquote>
<p>Failed。这个状态下，Pod 里至少有一个容器以不正常的状态（非 0 的返回码）退出。这个状态的出现，意味着你得想办法 Debug 这个容器的应用，比如查看 Pod 的 Events 和日志。</p>
</blockquote>
<blockquote>
<p>Unknown。这是一个异常状态，意味着 Pod 的状态不能持续地被 kubelet 汇报给 kube-apiserver，这很有可能是主从节点（Master 和 Kubelet）间的通信出现了问题。</p>
</blockquote>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>本文简单阐述了几种Pod常见的对象，简单阐述了它们的作用范围，类别。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Pod </tag>
      </tags>
  </entry>
  <entry>
    <title>sendmail的深入瞭解III</title>
    <url>/Ops/2020-10-02-learning-sendmail-III.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/LinuxAdministrationHandbook.jpg" width=50% /></center>

<p>本文記錄關於郵件服務器的相關。</p>
<a id="more"></a>
<h2 id="0x00-基本原理"><a href="#0x00-基本原理" class="headerlink" title="0x00 基本原理"></a>0x00 基本原理</h2><ul>
<li>四個功能<ul>
<li>接收從UA來的郵件提交，並發送到相應郵件系統。</li>
<li>接收外部傳入的郵件。</li>
<li>郵件遞送到最終用戶的郵箱。</li>
<li>用戶可通過IMAP或POP訪問。</li>
</ul>
</li>
<li>上述功能可以是同一台機器或不同機器。</li>
</ul>
<h2 id="0x01-使用郵件服務器"><a href="#0x01-使用郵件服務器" class="headerlink" title="0x01 使用郵件服務器"></a>0x01 使用郵件服務器</h2><ul>
<li><p>直接接入Internet的站點。</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/DesignEmailSystem.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/DesignEmailSystem.jpg"></p>
<ul>
<li>傳入傳出需要防火牆隔離。</li>
<li>多台傳入可搭配負載均衡。</li>
<li>單獨的機器可充當客戶機來備份MX記錄。</li>
<li>不建議使用NFS來共享/var/spool/mail</li>
</ul>
</li>
<li><p>不直接接入Internet的站點。</p>
<p>  <img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/DeployEmailSystemII.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/DeployEmailSystemII.jpg"></p>
</li>
</ul>
<h2 id="0x02-使用IMAP或POP"><a href="#0x02-使用IMAP或POP" class="headerlink" title="0x02 使用IMAP或POP"></a>0x02 使用IMAP或POP</h2><ul>
<li>IMAP和POP是用户的桌面机器连接到网络中时用来下载电子邮件的协议。</li>
<li>使用它们的时候要求有口令，确保使用一个采用SSL加密的协议版本（IMAPS和POPS）。</li>
<li>IMAP可以在多个站点之间管理邮件文件夹。</li>
<li>POP（Post Office Protocol，邮局协议）与IMAP相似，但它假定了一个模型，在这个模型中所有邮件都是从服务器下载到PC的。这些邮件可以从服务器上删除（在此情况下就不能备份了）或者保存在服务器上（在此情况下您的邮件缓冲区文件就会变得越来越大）</li>
</ul>
<blockquote>
<p>如果用户从来都不删除任何邮件消息的话，这两种协议都可以变成消耗资源的大户。在采用IMAP的情况下，它永远要载入所有邮件消息的信头，POP则会传送整个邮箱。要确保您的用户理解了删除消息或者在本地文件夹中过滤它们的重要性。</p>
</blockquote>
<blockquote>
<p><a href="http://xn--www-xi9dllmz.eudora.com/qpopper%E7%9A%84Qualcomm%E5%8F%AF%E4%BB%A5%E4%B8%8B%E8%BD%BDPOP3%E5%8D%8F%E8%AE%AE%E5%BD%93%E5%89%8D%E7%89%88%E6%9C%AC%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%8D%E9%94%99%E5%AE%9E%E7%8E%B0%E3%80%82qpopper%E6%98%AF%E4%B8%AAPOP%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E5%AE%83%E5%8C%85%E5%90%AB%E4%BA%86%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E5%AE%A2%E6%88%B7%E6%9C%BA%E4%B9%8B%E9%97%B4%E7%9A%84TLS/SSL%E9%AA%8C%E8%AF%81%E5%8A%9F%E8%83%BD%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8A%A0%E5%AF%86%E9%82%AE%E4%BB%B6%E6%B6%88%E6%81%AF%E3%80%82" target="_blank" rel="noopener">从位于www.eudora.com/qpopper的Qualcomm可以下载POP3协议当前版本的一个不错实现。qpopper是个POP服务器，它包含了在服务器和客户机之间的TLS/SSL验证功能，并且加密邮件消息。</a><br>您可以在Internet上找到许多别的用于Linux的POP3服务器程序，务必选择其中得到积极维护的一种。<br><a href="http://xn--imapwww-c64ksl362a9ud81jvq2djf1h.washington.edu/imap%E8%8E%B7%E5%BE%97%E3%80%82%E9%99%A4%E4%BA%86%E6%8A%8A%E9%80%82%E5%BD%93%E7%9A%84IMAP%E9%A1%B9%E5%8A%A0%E5%85%A5%E5%88%B0/etc/services%E5%92%8C/etc/inetd.conf%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E7%A1%AE%E4%BF%9D%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%88%E5%A6%82%E6%9E%9C%E6%9C%89%E7%9A%84%E8%AF%9D%EF%BC%89%E4%B8%8D%E4%BC%9A%E5%A6%A8%E7%A2%8D%E5%AE%83%E5%B7%A5%E4%BD%9C%E4%B9%8B%E5%A4%96%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BB%BB%E4%BD%95%E9%85%8D%E7%BD%AE%E3%80%82IMAP%E5%9C%A8%E8%BF%87%E5%8E%BB%E6%9C%89%E8%BF%87%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E8%AE%B0%E5%BD%95%EF%BC%8C%E8%AF%B7%E5%8F%82%E8%80%83CERT%E7%9A%84%E6%8A%A5%E5%91%8A%E5%B9%B6%E5%8A%A1%E5%BF%85%E5%BE%97%E5%88%B0%E6%9C%80%E6%96%B0%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E5%A6%82%E6%9E%9C%E9%92%88%E5%AF%B9%E6%82%A8%E7%9A%84%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC%E6%9C%89%E5%AE%89%E5%85%A8%E6%8A%A5%E5%91%8A%E7%9A%84%E8%AF%9D%E7%89%B9%E5%88%AB%E8%A6%81%E6%B3%A8%E6%84%8F%E3%80%82" target="_blank" rel="noopener">IMAP服务器软件可从www.washington.edu/imap获得。除了把适当的IMAP项加入到/etc/services和/etc/inetd.conf文件，并确保防火墙（如果有的话）不会妨碍它工作之外，不需要进行任何配置。IMAP在过去有过安全问题的记录，请参考CERT的报告并务必得到最新的版本，如果针对您的发行版本有安全报告的话特别要注意。</a><br>卡内基梅隆大学（Carnegie Mellon University）开发了一种叫做Cyrus IMAP的IMAP服务器，它也支持POP协议。比起UW（译者注：华盛顿大学，University of Washington）的IMAP实现来，我们更喜欢前者。<br>Dovecot是更新的一种软件包，它实现了IMAP和POP服务。它按照严格和明确的编码规范来编写代码，所以至少从理论上说，提高了它的安全性。Dovecot还有一些有意思的功能，例如能够把电子邮件保存在SQL数据库而不是文件系统中。Dovecot尚未取得Cyrus那样的业绩和使用基础，但它肯定是一个值得关注和评估的项目。<br>我们举例的所有Linux发行版本都带有叫做imapd的IMAP服务器，还有一个客户端fetchmail，它既支持IMAP协议也支持POP协议。Red Hat的imapd是CMU的Cyrus IMAP服务器，SUSE、Debian和Ubuntu使用UW的版本。Red Hat也带有pop 3d，它是POP服务器。SUSE包含3种POP服务器（这可不是多余）：qpopper（SUSE把它叫做popper），pop2d和pop3d。Debian有几种用IMAP管理邮箱的工具，命令man -kimap会告诉您它们的名字。</p>
</blockquote>
<h2 id="0x03-鳴謝"><a href="#0x03-鳴謝" class="headerlink" title="0x03 鳴謝"></a>0x03 鳴謝</h2><p><a href="http://www.5dmail.net/html/2008-4-27/200842730128.htm" target="_blank" rel="noopener">18.3 邮件基本原理</a></p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>sendmail </tag>
        <tag>IMAP </tag>
        <tag>POP </tag>
      </tags>
  </entry>
  <entry>
    <title>sendmail的深入瞭解IV</title>
    <url>/Ops/2020-10-04-learning-sendmail-IV.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/LinuxAdministrationHandbook.jpg" width=50% /></center>

<p>本文簡單記錄郵件別名。</p>
<a id="more"></a>

<h2 id="0x00-別名類型"><a href="#0x00-別名類型" class="headerlink" title="0x00 別名類型"></a>0x00 別名類型</h2><blockquote>
<p>别名（alias）能够让系统管理员或单个用户重新发送邮件 。他们可以定义邮递列表、在机器之间转发邮件，或者允许用多个名字指定一个用户。别名处理是递归的，所以一个别名指向的其他目的地也可以是别名。</p>
</blockquote>
<p>sendmail支持好几种别名机制：</p>
<ul>
<li>純文件映射。</li>
<li>老式文件發佈系統：Sun的NIS和NIS+，Apple的NetInfo</li>
<li>各種郵件路由數據庫：LDAP（Lightweight Directory Access Protocol，轻量级目录访问协议）。</li>
</ul>
<blockquote>
<p>传统上可以在下列3个地方定义别名（遗憾的是，要用3种不同的句法）：<br>在用户代理的配置文件中（由发送方用户定义）；<br>在系统范围内起作用的/etc/mail/aliases文件中（由系统管理员定义）；<br>在用户的转发文件~/.forward中（由接收方用户定义） 。</p>
</blockquote>
<p>以下是別名相關例子：</p>
<ol>
<li><p>遞歸語法，發往nemeth的應發往evi，發往evi的應發往evi@mailhub。</p>
 <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nemeth</span>:  evi</span><br><span class="line"><span class="attribute">evi</span>: evi<span class="variable">@mailhub</span></span><br><span class="line"><span class="attribute">authors</span>: evi,garth,trent</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局aliases文件路徑是/etc/aliases，/etc/mail/aliases实际上才是“标准”位置。</p>
<p> local-name匹配传入消息的源地址，而收件人名单则包含收件人地址或其他别名的名字。</p>
 <figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span>-<span class="built_in">name</span>:  recipient1,recipient2,...</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/mail/aliases文件<strong>应该永远包含一个叫做“postmaster”的别名</strong>，它把邮件转发给负责维护邮件系统的人。</p>
</li>
<li><p>當Receiced行數多達25行跳(hop)轉則會回彈到發件人。</p>
</li>
<li><p>別名可以是以下內容。</p>
<blockquote>
<p>一个包含地址列表的文件；<br>一个应该把消息附加到其后的文件；<br>一条应该把消息作为其输入的命令。</p>
</blockquote>
</li>
<li><p>DontBlameSendmail設置可以關閉對aliaes文件的敏感程度。</p>
</li>
</ol>
<h2 id="0x01-別名與郵遞列表"><a href="#0x01-別名與郵遞列表" class="headerlink" title="0x01 別名與郵遞列表"></a>0x01 別名與郵遞列表</h2><ul>
<li><p>include: 引入郵遞列表文件，方便細分權限。</p>
  <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sabook:</span>  <span class="symbol">:include</span><span class="symbol">:/usr/local/mail/lah</span>.readers</span><br></pre></td></tr></table></figure>
</li>
<li><p>lah.readers 應位於非NFS安裝的文件系統中，格式如下：</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">owner-<span class="string">sabook:</span>  evi</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="0x02-發郵件給文件"><a href="#0x02-發郵件給文件" class="headerlink" title="0x02 發郵件給文件"></a>0x02 發郵件給文件</h2><ul>
<li><p>文件名須是絕對路徑，特殊字符雙引號。文件名不認為是標準地址。</p>
  <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="string">complaints:</span>  <span class="regexp">/dev/</span><span class="literal">null</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>也可以在aliases文件或者用戶的.forward文件中使用⬆️。</p>
</li>
<li><p>被寫文件須對任何人可寫，有setuid位但不可執行，或由sendmail默認用戶所有。</p>
</li>
<li><p>.forward文件中引用該文件，須對原消息收件人所有，且帶有✍️寫權限，且用戶合法，有/etc/passwd記錄，合法shell。對於由root用戶擁有的文件，以4644或4600來設置setuid。不可執行。</p>
</li>
</ul>
<h2 id="0x03-發郵件給程序"><a href="#0x03-發郵件給程序" class="headerlink" title="0x03 發郵件給程序"></a>0x03 發郵件給程序</h2><ul>
<li><p>可以使用ftp接收標準輸入。如下：</p>
  <figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">autoftp:</span>  <span class="string">"|/usr/local/bin/ftpserver"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>⚠️注意事项⚠️</p>
<blockquote>
<p>用这项功能甚至比发邮件给文件更容易造成安全性漏洞，所以再强调一次，它只允许用在aliases、.forward或:include:文件中，sendmail的默认配置现在要求使用受限制的shell—smrsh 。在aliases文件中，程序作为sendmail的默认用户运行；否则，程序作为.forward或:include:文件的所有者运行。这个用户必须已经在/etc/passwd文件中列出，并具有一个有效的shell（在/etc/shells中）。</p>
</blockquote>
<blockquote>
<p>程序的邮寄程序在运行接收邮件的命令之前先把它的工作目录变为用户的主目录（或者，如果那个目录不能访问，就变为root的目录）。默认原本是sendmail的邮件队列目录，但是有些基于csh的shell不接受。</p>
</blockquote>
</li>
</ul>
<h2 id="0x04-别名举例"><a href="#0x04-别名举例" class="headerlink" title="0x04 别名举例"></a>0x04 别名举例</h2><p><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/AliaesExample.jpg" alt="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/AliaesExample.jpg"></p>
<p>postmaster指定維護郵件系統的郵件，發送到trouble，evi兩個別名。其中trouble是由trouble.alias提供郵件列表。</p>
<p>tmr，trouble mail readers（问题邮件阅读器），用於分配給管理員新手查看問題。</p>
<p>sa-class，維護包含學生列表的數據文件，類似於上述sabook一樣的子列表。</p>
<p>diary記錄重要的日誌事件，升級變更崩潰。</p>
<h2 id="0x05-郵件轉發"><a href="#0x05-郵件轉發" class="headerlink" title="0x05 郵件轉發"></a>0x05 郵件轉發</h2><ul>
<li><p>.forward是系統層面的變量，使用ForwardIPath變量即可開啟。</p>
</li>
<li><p>.forward格式如下：</p>
  <figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">evi@ipn.caida.org</span><br><span class="line">evi@atrust.com</span><br><span class="line"></span><br><span class="line"><span class="string">\mcbryan,</span> <span class="string">"/home/mcbryan/archive"</span>, mcbryan@f1supi1.gmd.de</span><br></pre></td></tr></table></figure>
</li>
<li><p>第一種格式，發往evi轉發給caida的機器ipn和<a href="mailto:evi@atrust.com">evi@atrust.com</a></p>
</li>
<li><p>第二種格式，本地緩衝區，傳入郵件的永久存檔文件，臨時郵件地址。反斜線指代無視其他任何關於mcbryan別名設置。</p>
</li>
<li><p>注意⚠️設置不當引起的死循環，直至25跳後原路返回。</p>
  <figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">全局aliases</span><br><span class="line">evi:  evi@boulder</span><br><span class="line"></span><br><span class="line">boulder的.forward</span><br><span class="line">evi@<span class="built_in">anchor</span>.cs</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="0x06-別名數據庫"><a href="#0x06-別名數據庫" class="headerlink" title="0x06 別名數據庫"></a>0x06 別名數據庫</h2><p>自帶散列數據庫，/etc/mail/aliases.db，修改aliases文件後使用newaliases自動生成。</p>
<h2 id="0x07-鳴謝"><a href="#0x07-鳴謝" class="headerlink" title="0x07 鳴謝"></a>0x07 鳴謝</h2><p><a href="http://www.5dmail.net/html/2008-4-27/200842730420.htm" target="_blank" rel="noopener">18.4 邮件别名</a></p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>sendmail</tag>
      </tags>
  </entry>
  <entry>
    <title>深入剖析K8s筆記(爲什麽我們需要Pod)</title>
    <url>/Ops/2022-01-31-why-we-need-pods.html</url>
    <content><![CDATA[<center><img src="https://raw.githubusercontent.com/m4d3bug/images-of-website/master/blog/pod.png" width=50% /></center>

<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>Pod，是Kubernetes项目的原子调度单位。但为什么是呢？</p>
<a id="more"></a>
<h2 id="0x01-Pod的第一层意义"><a href="#0x01-Pod的第一层意义" class="headerlink" title="0x01 Pod的第一层意义"></a>0x01 Pod的第一层意义</h2><p><strong>容器其本质是特殊的进程</strong>，而K8s身为一个Paas领军产物，设计之初就借鉴了OS。</p>
<p>来，先观察一下Linux的进程树结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pstree -g |more</span></span><br><span class="line">systemd(1)-+-acpid(680)</span><br><span class="line">           |-agetty(1924)</span><br><span class="line">           |-agetty(1925)</span><br><span class="line">           |-atd(1462)</span><br><span class="line">           |-auditd(614)---&#123;auditd&#125;(614)</span><br><span class="line">           |-barad_agent(10479)-+-barad_agent(10479)</span><br><span class="line">           |                    `-barad_agent(10479)-+-&#123;barad_agent&#125;(10479)</span><br><span class="line">           |                                         |-&#123;barad_agent&#125;(10479)</span><br><span class="line">           |                                         `-&#123;barad_agent&#125;(10479)</span><br><span class="line">           |-containerd-shim(860)-+-entrypoint.sh(15567)---sleep(15567)</span><br><span class="line">           |                      |-pause(878)</span><br><span class="line">           |                      |-sleep(12230)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      |-&#123;containerd-shim&#125;(860)</span><br><span class="line">           |                      `-&#123;containerd-shim&#125;(860)</span><br></pre></td></tr></table></figure>
<p>那跟K8s有什么关系？</p>
<p>用<a href="https://krew.sigs.k8s.io/docs/user-guide/setup/install/" target="_blank" rel="noopener">krew</a>装个<a href="https://github.com/ahmetb/kubectl-tree" target="_blank" rel="noopener">tree</a>看看。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl tree deployment nginx-deployment</span></span><br><span class="line">NAMESPACE  NAME                                       READY  REASON  AGE  </span><br><span class="line">default    Deployment/nginx-deployment                -              24h  </span><br><span class="line">default    ├─ReplicaSet/nginx-deployment-5d59d67564   -              24h  </span><br><span class="line">default    ├─ReplicaSet/nginx-deployment-64c9d67564   -              7h48m</span><br><span class="line">default    ├─ReplicaSet/nginx-deployment-66db4f9b59   -              7h32m</span><br><span class="line">default    └─ReplicaSet/nginx-deployment-848bcb569b   -              7h30m</span><br><span class="line">default      ├─Pod/nginx-deployment-848bcb569b-7zk57  True           7h30m</span><br><span class="line">default      └─Pod/nginx-deployment-848bcb569b-w9mzm  True           7h30m</span><br><span class="line"><span class="comment"># kubectl tree deployment csi-resizer -n longhorn-system</span></span><br><span class="line">NAMESPACE        NAME                                  READY  REASON  AGE  </span><br><span class="line">longhorn-system  Deployment/csi-resizer                -              11d  </span><br><span class="line">longhorn-system  └─ReplicaSet/csi-resizer-6dd8bd4c97   -              11d  </span><br><span class="line">longhorn-system    ├─Pod/csi-resizer-6dd8bd4c97-gvwm9  True           2d21h</span><br><span class="line">longhorn-system    ├─Pod/csi-resizer-6dd8bd4c97-nxg5n  True           2d21h</span><br><span class="line">longhorn-system    └─Pod/csi-resizer-6dd8bd4c97-xjcwn  True           10d</span><br></pre></td></tr></table></figure>
<p>至此，对Pod的理解又加深一层，Pod于K8s的意义，跟进程于Linux的意义，跃然纸上。</p>
<h2 id="0x02-Pod的第二层意义"><a href="#0x02-Pod的第二层意义" class="headerlink" title="0x02 Pod的第二层意义"></a>0x02 Pod的第二层意义</h2><p>为什么不是container，而是Pod呢？</p>
<p><strong>Pod其实只是逻辑概念</strong>，K8s管的其实是各node的经脉（namespace、Cgroups），<strong>Pod更重要的意义，使容器可以共享Network Namespace，以及Volume。</strong></p>
<p>而container需要共享时，还得先按序启动。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run --net=B --volumes-from=B --name=A imgae</span></span><br></pre></td></tr></table></figure>
<p>不像Pod，靠Pause容器，就可保证各container相互对等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├─containerd-shim(10811)─┬─minio(10859)─┬─&#123;minio&#125;(10859)</span><br><span class="line">           │                        │              ├─&#123;minio&#125;(10859)</span><br><span class="line">           │                        │              ├─&#123;minio&#125;(10859)</span><br><span class="line">           │                        │              ├─&#123;minio&#125;(10859)</span><br><span class="line">           │                        │              └─&#123;minio&#125;(10859)</span><br><span class="line">           │                        ├─pause(10831)</span><br><span class="line">           │                        ├─&#123;containerd-shim&#125;(10811)</span><br><span class="line">           │                        ├─&#123;containerd-shim&#125;(10811)</span><br><span class="line">           │                        ├─&#123;containerd-shim&#125;(10811)</span><br><span class="line">           │                        ├─&#123;containerd-shim&#125;(10811)</span><br><span class="line">           │                        ├─&#123;containerd-shim&#125;(10811)</span><br></pre></td></tr></table></figure>
<p>有什么好处呢？</p>
<ul>
<li>localhost可以直接通信。</li>
<li>container内网络设备 == pause容器（Infra容器）</li>
<li>Pod生命周期关联pause container（Infra container）</li>
<li>一个Pod一个IP，也就是一个Network Namespace一个IP</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pods  -l app=nginx -o wide</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE     IP            NODE                        NOMINATED NODE   READINESS GATES</span><br><span class="line">nginx-deployment-848bcb569b-7zk57   1/1     Running   0          13h     10.42.2.166   storage-k3sw2.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-848bcb569b-w9mzm   1/1     Running   0          13h     10.42.5.242   storage-k3sw4.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-848bcb569b-ztt4r   1/1     Running   0          3h38m   10.42.3.32    storage-k3sw3.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">nginx-deployment-848bcb569b-dvc7t   1/1     Running   0          3h38m   10.42.1.42    storage-k3sw1.m4d3bug.com   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>Pod内资源所有containers共享，例如存储</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">two-containers</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">    <span class="attr">hostPath:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/var/tmp.</span> <span class="comment"># 宿主机路径</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">debian-container</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">debian</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-data</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">/pod-data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">["/bin/sh"]</span></span><br><span class="line">    <span class="attr">args:</span> <span class="string">["-c",</span> <span class="string">"echo Hello from the debian container &gt; /pod-data/index.html &amp;&amp; sleep 999"</span><span class="string">]</span> </span><br><span class="line">                                                                              <span class="comment">#sleep续命，pod才会是ready</span></span><br></pre></td></tr></table></figure>
<ul>
<li>(题外话) 不共享的Volumes也可以这样写</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span> <span class="comment"># 控制器用于控制pod行为 controller pattern</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">4</span> <span class="comment">#保证自动调动</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span> <span class="comment">#存放要监管的对象</span></span><br><span class="line">      <span class="attr">labels:</span> <span class="comment">#强行关联Deployment纳管app：nginx为管理对象</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">     <span class="comment">#annotations: 通告给Kubernetes组件本身，而不是用户</span></span><br><span class="line">    <span class="attr">spec:</span> <span class="comment">#存放该对象的独有定义</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.8</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">"/usr/share/nginx/html"</span> <span class="comment">#指定容器内路径</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nginx-vol</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-vol</span></span><br><span class="line">        <span class="comment"># emptyDir: &#123;&#125; #隐式声明自动创建宿主机的临时目录</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">"/tmp"</span> <span class="comment">#显式声明宿主机的永久目录，搭配nfs挂载可以做到多副本存活</span></span><br></pre></td></tr></table></figure>
<h2 id="0x03-Pod的最终意义"><a href="#0x03-Pod的最终意义" class="headerlink" title="0x03 Pod的最终意义"></a>0x03 Pod的最终意义</h2><p>有了前面的铺垫，我们可以得到以下的对照关系。</p>
<table>
<thead>
<tr>
<th>线程</th>
<th>进程组</th>
<th>操作系统OS</th>
</tr>
</thead>
<tbody><tr>
<td>容器</td>
<td>Pod</td>
<td>Kubernetes</td>
</tr>
</tbody></table>
<p>凭借Pod的特性，我们打通了不同容器、不同软件的耦合关系，并且像进程组一样共享了各种resource。</p>
<p>而这种“组合”，也正是sidecar的工作思路，通过共享目录不染指业务容器达到协管（我更喜欢译成随航而不是边车。</p>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>简单探讨了Pod于K8s的含义，帮助自己理解消化总结。</p>
]]></content>
      <categories>
        <category>Ops </category>
      </categories>
      <tags>
        <tag>Linux </tag>
        <tag>Kubernetes </tag>
        <tag>Pod </tag>
      </tags>
  </entry>
</search>
